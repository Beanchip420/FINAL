
FContrerasAcostaFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e2c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b30  08006fd8  08006fd8  00007fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b08  08008b08  0000a1b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b08  08008b08  00009b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b10  08008b10  0000a1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b10  08008b10  00009b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b14  08008b14  00009b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  08008b18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1b8  2**0
                  CONTENTS
 10 .bss          00025c80  200001b8  200001b8  0000a1b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e38  20025e38  0000a1b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117d2  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003131  00000000  00000000  0001b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0001eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e91  00000000  00000000  0001fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027514  00000000  00000000  00020c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d05  00000000  00000000  0004817d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b82  00000000  00000000  0005fe82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141a04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056a4  00000000  00000000  00141a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  001470ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001b8 	.word	0x200001b8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006fc0 	.word	0x08006fc0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001bc 	.word	0x200001bc
 80001e8:	08006fc0 	.word	0x08006fc0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004f0:	f006 fa26 	bl	8006940 <initialise_monitor_handles>
    LTCD__Init();
 80004f4:	f000 fa66 	bl	80009c4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fa23 	bl	8000944 <LTCD_Layer_Init>
    // POLLING TOUCH SCREEN:
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fe:	f000 fbb5 	bl	8000c6c <InitializeLCDTouch>

	First_Screen();
 8000502:	f000 f847 	bl	8000594 <First_Screen>

	Tim_Init();
 8000506:	f000 f84b 	bl	80005a0 <Tim_Init>
	IRQ_ENABLE(TIM2_IRQ_NUMBER);
 800050a:	201c      	movs	r0, #28
 800050c:	f000 f8c4 	bl	8000698 <IRQ_ENABLE>
	IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 8000510:	2006      	movs	r0, #6
 8000512:	f000 f8c1 	bl	8000698 <IRQ_ENABLE>
	BUTT_Init_IT();
 8000516:	f000 f849 	bl	80005ac <BUTT_Init_IT>
	Random_Init();
 800051a:	f000 f84d 	bl	80005b8 <Random_Init>

	// This is the orientation for the board to be directly up where the buttons are
	// vertically above the screen Top left would be low x value, high y value. Bottom
	// right would be low x value, low y value.

	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 800051e:	4b02      	ldr	r3, [pc, #8]	@ (8000528 <ApplicationInit+0x3c>)
 8000520:	2201      	movs	r2, #1
 8000522:	719a      	strb	r2, [r3, #6]


	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200001d8 	.word	0x200001d8

0800052c <ApplicationGame>:

void ApplicationGame(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8000530:	4816      	ldr	r0, [pc, #88]	@ (800058c <ApplicationGame+0x60>)
 8000532:	f000 fba6 	bl	8000c82 <returnTouchStateAndLocation>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d124      	bne.n	8000586 <ApplicationGame+0x5a>
	{
		if(START_FLAG == 0)
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <ApplicationGame+0x64>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d106      	bne.n	8000554 <ApplicationGame+0x28>
		{
			addSchedulerEvent(START);
 8000546:	2010      	movs	r0, #16
 8000548:	f000 fee6 	bl	8001318 <addSchedulerEvent>
			START_FLAG = 1;
 800054c:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <ApplicationGame+0x64>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
			addSchedulerEvent(SHIFT_R);
		}

	}

}
 8000552:	e018      	b.n	8000586 <ApplicationGame+0x5a>
		else if(START_FLAG == 1 && StaticTouchData.x<120)
 8000554:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <ApplicationGame+0x64>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b01      	cmp	r3, #1
 800055c:	d107      	bne.n	800056e <ApplicationGame+0x42>
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <ApplicationGame+0x60>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b77      	cmp	r3, #119	@ 0x77
 8000564:	d803      	bhi.n	800056e <ApplicationGame+0x42>
			addSchedulerEvent(SHIFT_L);
 8000566:	2002      	movs	r0, #2
 8000568:	f000 fed6 	bl	8001318 <addSchedulerEvent>
}
 800056c:	e00b      	b.n	8000586 <ApplicationGame+0x5a>
		else if(START_FLAG == 1 && StaticTouchData.x>240)
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <ApplicationGame+0x64>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b01      	cmp	r3, #1
 8000576:	d106      	bne.n	8000586 <ApplicationGame+0x5a>
 8000578:	4b04      	ldr	r3, [pc, #16]	@ (800058c <ApplicationGame+0x60>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2bf0      	cmp	r3, #240	@ 0xf0
 800057e:	d902      	bls.n	8000586 <ApplicationGame+0x5a>
			addSchedulerEvent(SHIFT_R);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fec9 	bl	8001318 <addSchedulerEvent>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200001d8 	.word	0x200001d8
 8000590:	200001d4 	.word	0x200001d4

08000594 <First_Screen>:
}
#endif // Example Code
// ************** Write your functions here **************

void First_Screen(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	Start_Screen();
 8000598:	f000 fb80 	bl	8000c9c <Start_Screen>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <Tim_Init>:
//{
//	Game_Screen();
//}

void Tim_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	TIMER_Init();
 80005a4:	f001 fad2 	bl	8001b4c <TIMER_Init>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <BUTT_Init_IT>:

void BUTT_Init_IT(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	BUTTON_Init_Interupt();
 80005b0:	f000 f84e 	bl	8000650 <BUTTON_Init_Interupt>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <Random_Init>:

void Random_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	RNG_Init();
 80005bc:	f000 fe62 	bl	8001284 <RNG_Init>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	 IRQ_DISABLE(TIM2_IRQ_NUMBER);
 80005c8:	201c      	movs	r0, #28
 80005ca:	f000 f88b 	bl	80006e4 <IRQ_DISABLE>
	 IRQ_CLEAR(TIM2_IRQ_NUMBER);
 80005ce:	201c      	movs	r0, #28
 80005d0:	f000 f8b0 	bl	8000734 <IRQ_CLEAR>
	 TIM2->SR &= ~(0x1 << UIF_OFFSET); // Lowering the Flag
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005de:	f023 0301 	bic.w	r3, r3, #1
 80005e2:	6113      	str	r3, [r2, #16]

	 addSchedulerEvent(COUNT);
 80005e4:	2008      	movs	r0, #8
 80005e6:	f000 fe97 	bl	8001318 <addSchedulerEvent>

	 IRQ_ENABLE(TIM2_IRQ_NUMBER);
 80005ea:	201c      	movs	r0, #28
 80005ec:	f000 f854 	bl	8000698 <IRQ_ENABLE>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) // : need to loewr the flag in the nvic
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	 IRQ_DISABLE(EXTI0_IRQ_NUMBER);
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 f873 	bl	80006e4 <IRQ_DISABLE>
	 IRQ_CLEAR(EXTI0_IRQ_NUMBER);
 80005fe:	2006      	movs	r0, #6
 8000600:	f000 f898 	bl	8000734 <IRQ_CLEAR>

	 addSchedulerEvent(ROTATE_CC);
 8000604:	2004      	movs	r0, #4
 8000606:	f000 fe87 	bl	8001318 <addSchedulerEvent>

	 CLEAR_EXTI(B_PIN);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f8ba 	bl	8000784 <CLEAR_EXTI>
	 IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 8000610:	2006      	movs	r0, #6
 8000612:	f000 f841 	bl	8000698 <IRQ_ENABLE>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <BUTTON_ClockControl>:
	HAL_GPIO_Init(GPIOA, &BUTTONPinConfig);

}

void BUTTON_ClockControl(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <BUTTON_ClockControl+0x30>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <BUTTON_ClockControl+0x30>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <BUTTON_ClockControl+0x30>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800

08000650 <BUTTON_Init_Interupt>:
		return false;
	}
}

void BUTTON_Init_Interupt(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0

	BUTTON_ClockControl();
 8000656:	f7ff ffe1 	bl	800061c <BUTTON_ClockControl>
	GPIO_InitTypeDef BUTTONPinConfig= {RESET};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
	BUTTONPinConfig.Pin = GPIO_PIN_0;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
	BUTTONPinConfig.Mode = GPIO_MODE_IT_RISING; // Configure as Rising Edge Int
 800066c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000670:	60bb      	str	r3, [r7, #8]
	BUTTONPinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
	BUTTONPinConfig.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
	//BUTTONPinConfig.Alternate = GPIO_PUPDR_NONE;

	HAL_GPIO_Init(GPIOA, &BUTTONPinConfig);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <BUTTON_Init_Interupt+0x44>)
 8000680:	f002 fe10 	bl	80032a4 <HAL_GPIO_Init>
	//HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);

	IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 8000684:	2006      	movs	r0, #6
 8000686:	f000 f807 	bl	8000698 <IRQ_ENABLE>

}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000

08000698 <IRQ_ENABLE>:
#define check 32
static uint8_t reg_select;
static uint32_t bit_select;

void IRQ_ENABLE(uint8_t number)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	095b      	lsrs	r3, r3, #5
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <IRQ_ENABLE+0x44>)
 80006aa:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	4a0b      	ldr	r2, [pc, #44]	@ (80006e0 <IRQ_ENABLE+0x48>)
 80006b4:	6013      	str	r3, [r2, #0]
	*(NVIC_ISER0+reg_select) = (0x1 << bit_select);
 80006b6:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <IRQ_ENABLE+0x48>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2201      	movs	r2, #1
 80006bc:	409a      	lsls	r2, r3
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <IRQ_ENABLE+0x44>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006c8:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80006cc:	601a      	str	r2, [r3, #0]

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	200001e0 	.word	0x200001e0
 80006e0:	200001e4 	.word	0x200001e4

080006e4 <IRQ_DISABLE>:

void IRQ_DISABLE(uint8_t number)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	095b      	lsrs	r3, r3, #5
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <IRQ_DISABLE+0x44>)
 80006f6:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 031f 	and.w	r3, r3, #31
 80006fe:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <IRQ_DISABLE+0x48>)
 8000700:	6013      	str	r3, [r2, #0]
	*(NVIC_ICER0+reg_select) = (0x1 << bit_select);
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <IRQ_DISABLE+0x48>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2201      	movs	r2, #1
 8000708:	fa02 f103 	lsl.w	r1, r2, r3
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <IRQ_DISABLE+0x44>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	009a      	lsls	r2, r3, #2
 8000712:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <IRQ_DISABLE+0x4c>)
 8000714:	4413      	add	r3, r2
 8000716:	460a      	mov	r2, r1
 8000718:	601a      	str	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200001e0 	.word	0x200001e0
 800072c:	200001e4 	.word	0x200001e4
 8000730:	e000e180 	.word	0xe000e180

08000734 <IRQ_CLEAR>:

void IRQ_CLEAR(uint8_t number) // N ee
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	095b      	lsrs	r3, r3, #5
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <IRQ_CLEAR+0x44>)
 8000746:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <IRQ_CLEAR+0x48>)
 8000750:	6013      	str	r3, [r2, #0]
	*(NVIC_ICPR0+reg_select) = (0x1 << bit_select);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <IRQ_CLEAR+0x48>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2201      	movs	r2, #1
 8000758:	fa02 f103 	lsl.w	r1, r2, r3
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <IRQ_CLEAR+0x44>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	009a      	lsls	r2, r3, #2
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <IRQ_CLEAR+0x4c>)
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	200001e0 	.word	0x200001e0
 800077c:	200001e4 	.word	0x200001e4
 8000780:	e000e280 	.word	0xe000e280

08000784 <CLEAR_EXTI>:
	bit_select = number % check;
	*(NVIC_ISPR0+reg_select) = (0x1 << bit_select);
}

void CLEAR_EXTI(uint8_t number) // EXTI is for external hardware don't apply to clocks since internal hardware
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0x1 << number);
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <CLEAR_EXTI+0x2c>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <CLEAR_EXTI+0x2c>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6153      	str	r3, [r2, #20]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40013c00 	.word	0x40013c00

080007b4 <LCD_GPIO_Init>:
// However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	4b5a      	ldr	r3, [pc, #360]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	4a59      	ldr	r2, [pc, #356]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ca:	4b57      	ldr	r3, [pc, #348]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b53      	ldr	r3, [pc, #332]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a52      	ldr	r2, [pc, #328]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b49      	ldr	r3, [pc, #292]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a44      	ldr	r2, [pc, #272]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b3e      	ldr	r3, [pc, #248]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3d      	ldr	r2, [pc, #244]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <LCD_GPIO_Init+0x174>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b37      	ldr	r3, [pc, #220]	@ (8000928 <LCD_GPIO_Init+0x174>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a36      	ldr	r2, [pc, #216]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000850:	f043 0320 	orr.w	r3, r3, #32
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0320 	and.w	r3, r3, #32
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <LCD_GPIO_Init+0x174>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800087e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000882:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800088c:	2302      	movs	r3, #2
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000890:	230e      	movs	r3, #14
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4824      	ldr	r0, [pc, #144]	@ (800092c <LCD_GPIO_Init+0x178>)
 800089c:	f002 fd02 	bl	80032a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80008a0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008a4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4820      	ldr	r0, [pc, #128]	@ (8000930 <LCD_GPIO_Init+0x17c>)
 80008ae:	f002 fcf9 	bl	80032a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80008b2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481d      	ldr	r0, [pc, #116]	@ (8000934 <LCD_GPIO_Init+0x180>)
 80008c0:	f002 fcf0 	bl	80032a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80008c4:	2348      	movs	r3, #72	@ 0x48
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481a      	ldr	r0, [pc, #104]	@ (8000938 <LCD_GPIO_Init+0x184>)
 80008d0:	f002 fce8 	bl	80032a4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80008d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4816      	ldr	r0, [pc, #88]	@ (800093c <LCD_GPIO_Init+0x188>)
 80008e2:	f002 fcdf 	bl	80032a4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80008e6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80008ea:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <LCD_GPIO_Init+0x18c>)
 80008f4:	f002 fcd6 	bl	80032a4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80008fc:	2309      	movs	r3, #9
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	480a      	ldr	r0, [pc, #40]	@ (8000930 <LCD_GPIO_Init+0x17c>)
 8000908:	f002 fccc 	bl	80032a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800090c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <LCD_GPIO_Init+0x18c>)
 800091a:	f002 fcc3 	bl	80032a4 <HAL_GPIO_Init>
}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400
 8000934:	40020800 	.word	0x40020800
 8000938:	40020c00 	.word	0x40020c00
 800093c:	40021400 	.word	0x40021400
 8000940:	40021800 	.word	0x40021800

08000944 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	@ 0x40
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000952:	23f0      	movs	r3, #240	@ 0xf0
 8000954:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800095a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800095e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!!
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
	// IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format.
	// 2 bytes for each pixel
	pLayerCfg.Alpha = 255;
 8000964:	23ff      	movs	r3, #255	@ 0xff
 8000966:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <LTCD_Layer_Init+0x78>)
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000980:	23f0      	movs	r3, #240	@ 0xf0
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000984:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000988:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <LTCD_Layer_Init+0x7c>)
 80009a6:	f004 f843 	bl	8004a30 <HAL_LTDC_ConfigLayer>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80009b0:	f000 f956 	bl	8000c60 <LCD_Error_Handler>
	}
}
 80009b4:	bf00      	nop
 80009b6:	3740      	adds	r7, #64	@ 0x40
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200002c4 	.word	0x200002c4
 80009c0:	200001e8 	.word	0x200001e8

080009c4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80009c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <LTCD__Init+0xb0>)
 80009ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000a78 <LTCD__Init+0xb4>)
 80009cc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <LTCD__Init+0xb0>)
 80009d0:	2209      	movs	r2, #9
 80009d2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <LTCD__Init+0xb0>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <LTCD__Init+0xb0>)
 80009dc:	221d      	movs	r2, #29
 80009de:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80009e0:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <LTCD__Init+0xb0>)
 80009e2:	2203      	movs	r2, #3
 80009e4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <LTCD__Init+0xb0>)
 80009e8:	f240 120d 	movw	r2, #269	@ 0x10d
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <LTCD__Init+0xb0>)
 80009f0:	f240 1243 	movw	r2, #323	@ 0x143
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <LTCD__Init+0xb0>)
 80009f8:	f240 1217 	movw	r2, #279	@ 0x117
 80009fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a00:	f240 1247 	movw	r2, #327	@ 0x147
 8000a04:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a26:	22c0      	movs	r2, #192	@ 0xc0
 8000a28:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a38:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a3a:	f004 fe53 	bl	80056e4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000a56:	f7ff fead 	bl	80007b4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a5c:	f003 ff18 	bl	8004890 <HAL_LTDC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a66:	f000 f8fb 	bl	8000c60 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a6a:	f001 f927 	bl	8001cbc <ili9341_Init>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001e8 	.word	0x200001e8
 8000a78:	40016800 	.word	0x40016800
 8000a7c:	20000290 	.word	0x20000290

08000a80 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a92:	88ba      	ldrh	r2, [r7, #4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	1a9b      	subs	r3, r3, r2
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4905      	ldr	r1, [pc, #20]	@ (8000ab8 <LCD_Draw_Pixel+0x38>)
 8000aa4:	887a      	ldrh	r2, [r7, #2]
 8000aa6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200002c4 	.word	0x200002c4

08000abc <LCD_Clear>:
  }
}
#endif

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10e      	bne.n	8000af0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e007      	b.n	8000ae8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ad8:	4908      	ldr	r1, [pc, #32]	@ (8000afc <LCD_Clear+0x40>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	88ba      	ldrh	r2, [r7, #4]
 8000ade:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000aee:	d3f3      	bcc.n	8000ad8 <LCD_Clear+0x1c>
		}
	}
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	200002c4 	.word	0x200002c4

08000b00 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <LCD_SetTextColor+0x1c>)
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	8013      	strh	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20000000 	.word	0x20000000

08000b20 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <LCD_SetFont+0x1c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200002c0 	.word	0x200002c0

08000b40 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	603a      	str	r2, [r7, #0]
 8000b4a:	80fb      	strh	r3, [r7, #6]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	e04c      	b.n	8000bf8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	e03f      	b.n	8000be4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	889b      	ldrh	r3, [r3, #4]
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <LCD_Draw_Char+0xd4>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	2280      	movs	r2, #128	@ 0x80
 8000b84:	409a      	lsls	r2, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	fa42 f303 	asr.w	r3, r2, r3
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d104      	bne.n	8000b9c <LCD_Draw_Char+0x5c>
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	889b      	ldrh	r3, [r3, #4]
 8000b98:	2b0c      	cmp	r3, #12
 8000b9a:	d920      	bls.n	8000bde <LCD_Draw_Char+0x9e>
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	fa42 f303 	asr.w	r3, r2, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d104      	bne.n	8000bc0 <LCD_Draw_Char+0x80>
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	889b      	ldrh	r3, [r3, #4]
 8000bbc:	2b0c      	cmp	r3, #12
 8000bbe:	d80e      	bhi.n	8000bde <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b298      	uxth	r0, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <LCD_Draw_Char+0xd8>)
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f7ff ff51 	bl	8000a80 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	889b      	ldrh	r3, [r3, #4]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d3b8      	bcc.n	8000b64 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	88db      	ldrh	r3, [r3, #6]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d3ab      	bcc.n	8000b5e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200002c0 	.word	0x200002c0
 8000c14:	aaaaaaab 	.word	0xaaaaaaab
 8000c18:	20000000 	.word	0x20000000

08000c1c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	460b      	mov	r3, r1
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	3b20      	subs	r3, #32
 8000c32:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <LCD_DisplayChar+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	4907      	ldr	r1, [pc, #28]	@ (8000c5c <LCD_DisplayChar+0x40>)
 8000c3e:	6809      	ldr	r1, [r1, #0]
 8000c40:	88c9      	ldrh	r1, [r1, #6]
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	441a      	add	r2, r3
 8000c4a:	88b9      	ldrh	r1, [r7, #4]
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff76 	bl	8000b40 <LCD_Draw_Char>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200002c0 	.word	0x200002c0

08000c60 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <LCD_Error_Handler+0x8>

08000c6c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c70:	f001 fe17 	bl	80028a2 <STMPE811_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d001      	beq.n	8000c7e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <InitializeLCDTouch+0xe>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f001 fec1 	bl	8002a12 <STMPE811_ReadTouch>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <Start_Screen>:

// ************** Write your functions here **************


void Start_Screen(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff ff0a 	bl	8000abc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ca8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000cac:	f7ff ff28 	bl	8000b00 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000cb0:	4841      	ldr	r0, [pc, #260]	@ (8000db8 <Start_Screen+0x11c>)
 8000cb2:	f7ff ff35 	bl	8000b20 <LCD_SetFont>
	LCD_DisplayChar(35,10,'T');
 8000cb6:	2254      	movs	r2, #84	@ 0x54
 8000cb8:	210a      	movs	r1, #10
 8000cba:	2023      	movs	r0, #35	@ 0x23
 8000cbc:	f7ff ffae 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(65,10,'E');
 8000cc0:	2245      	movs	r2, #69	@ 0x45
 8000cc2:	210a      	movs	r1, #10
 8000cc4:	2041      	movs	r0, #65	@ 0x41
 8000cc6:	f7ff ffa9 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(95,10,'T');
 8000cca:	2254      	movs	r2, #84	@ 0x54
 8000ccc:	210a      	movs	r1, #10
 8000cce:	205f      	movs	r0, #95	@ 0x5f
 8000cd0:	f7ff ffa4 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(125,10,'R');
 8000cd4:	2252      	movs	r2, #82	@ 0x52
 8000cd6:	210a      	movs	r1, #10
 8000cd8:	207d      	movs	r0, #125	@ 0x7d
 8000cda:	f7ff ff9f 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(155,10,'I');
 8000cde:	2249      	movs	r2, #73	@ 0x49
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	209b      	movs	r0, #155	@ 0x9b
 8000ce4:	f7ff ff9a 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(185,10,'S');
 8000ce8:	2253      	movs	r2, #83	@ 0x53
 8000cea:	210a      	movs	r1, #10
 8000cec:	20b9      	movs	r0, #185	@ 0xb9
 8000cee:	f7ff ff95 	bl	8000c1c <LCD_DisplayChar>

	O_Shape(0, 60, 60, LCD_COLOR_YELLOW);
 8000cf2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000cf6:	223c      	movs	r2, #60	@ 0x3c
 8000cf8:	213c      	movs	r1, #60	@ 0x3c
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f85e 	bl	8000dbc <O_Shape>

	I_Shape(210, 0, 120, LCD_COLOR_CYAN);
 8000d00:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d04:	2278      	movs	r2, #120	@ 0x78
 8000d06:	2100      	movs	r1, #0
 8000d08:	20d2      	movs	r0, #210	@ 0xd2
 8000d0a:	f000 f88b 	bl	8000e24 <I_Shape>

	S_Shape(90, 90, 90, LCD_COLOR_RED);
 8000d0e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d12:	225a      	movs	r2, #90	@ 0x5a
 8000d14:	215a      	movs	r1, #90	@ 0x5a
 8000d16:	205a      	movs	r0, #90	@ 0x5a
 8000d18:	f000 f8ba 	bl	8000e90 <S_Shape>

	Z_Shape(0, 150 ,90, LCD_COLOR_GREEN);
 8000d1c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d20:	225a      	movs	r2, #90	@ 0x5a
 8000d22:	2196      	movs	r1, #150	@ 0x96
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f905 	bl	8000f34 <Z_Shape>

	L_Shape(0, 210, 90, LCD_COLOR_BLUE);
 8000d2a:	231f      	movs	r3, #31
 8000d2c:	225a      	movs	r2, #90	@ 0x5a
 8000d2e:	21d2      	movs	r1, #210	@ 0xd2
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f951 	bl	8000fd8 <L_Shape>

	J_Shape(210, 210, 90, LCD_COLOR_MAGENTA);
 8000d36:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000d3a:	225a      	movs	r2, #90	@ 0x5a
 8000d3c:	21d2      	movs	r1, #210	@ 0xd2
 8000d3e:	20d2      	movs	r0, #210	@ 0xd2
 8000d40:	f000 f9b6 	bl	80010b0 <J_Shape>

	T_Shape(150, 150, 90, LCD_COLOR_BLUE2);
 8000d44:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d48:	225a      	movs	r2, #90	@ 0x5a
 8000d4a:	2196      	movs	r1, #150	@ 0x96
 8000d4c:	2096      	movs	r0, #150	@ 0x96
 8000d4e:	f000 fa1b 	bl	8001188 <T_Shape>

	LCD_DisplayChar(35, 250, 'T');
 8000d52:	2254      	movs	r2, #84	@ 0x54
 8000d54:	21fa      	movs	r1, #250	@ 0xfa
 8000d56:	2023      	movs	r0, #35	@ 0x23
 8000d58:	f7ff ff60 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(65, 250, 'A');
 8000d5c:	2241      	movs	r2, #65	@ 0x41
 8000d5e:	21fa      	movs	r1, #250	@ 0xfa
 8000d60:	2041      	movs	r0, #65	@ 0x41
 8000d62:	f7ff ff5b 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(95, 250, 'P');
 8000d66:	2250      	movs	r2, #80	@ 0x50
 8000d68:	21fa      	movs	r1, #250	@ 0xfa
 8000d6a:	205f      	movs	r0, #95	@ 0x5f
 8000d6c:	f7ff ff56 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(155, 250, 'T');
 8000d70:	2254      	movs	r2, #84	@ 0x54
 8000d72:	21fa      	movs	r1, #250	@ 0xfa
 8000d74:	209b      	movs	r0, #155	@ 0x9b
 8000d76:	f7ff ff51 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(185, 250, 'O');
 8000d7a:	224f      	movs	r2, #79	@ 0x4f
 8000d7c:	21fa      	movs	r1, #250	@ 0xfa
 8000d7e:	20b9      	movs	r0, #185	@ 0xb9
 8000d80:	f7ff ff4c 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(65, 280, 'P');
 8000d84:	2250      	movs	r2, #80	@ 0x50
 8000d86:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d8a:	2041      	movs	r0, #65	@ 0x41
 8000d8c:	f7ff ff46 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(95, 280, 'L');
 8000d90:	224c      	movs	r2, #76	@ 0x4c
 8000d92:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d96:	205f      	movs	r0, #95	@ 0x5f
 8000d98:	f7ff ff40 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(125, 280, 'A');
 8000d9c:	2241      	movs	r2, #65	@ 0x41
 8000d9e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000da2:	207d      	movs	r0, #125	@ 0x7d
 8000da4:	f7ff ff3a 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(155, 280, 'Y');
 8000da8:	2259      	movs	r2, #89	@ 0x59
 8000daa:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000dae:	209b      	movs	r0, #155	@ 0x9b
 8000db0:	f7ff ff34 	bl	8000c1c <LCD_DisplayChar>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000134 	.word	0x20000134

08000dbc <O_Shape>:
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)

*/

void O_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81fb      	strh	r3, [r7, #14]
 8000dde:	e018      	b.n	8000e12 <O_Shape+0x56>
	{
		for (uint16_t ii = 0; ii < len; ii++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	81bb      	strh	r3, [r7, #12]
 8000de4:	e00e      	b.n	8000e04 <O_Shape+0x48>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 8000de6:	89fa      	ldrh	r2, [r7, #14]
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	4413      	add	r3, r2
 8000dec:	b298      	uxth	r0, r3
 8000dee:	89ba      	ldrh	r2, [r7, #12]
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	883a      	ldrh	r2, [r7, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fe41 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < len; ii++)
 8000dfe:	89bb      	ldrh	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	81bb      	strh	r3, [r7, #12]
 8000e04:	89ba      	ldrh	r2, [r7, #12]
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3ec      	bcc.n	8000de6 <O_Shape+0x2a>
	for (uint16_t i = 0; i < len; i++)
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	81fb      	strh	r3, [r7, #14]
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3e2      	bcc.n	8000de0 <O_Shape+0x24>
		}
	}

}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <I_Shape>:
void I_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	4611      	mov	r1, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	4623      	mov	r3, r4
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	4603      	mov	r3, r0
 8000e38:	80bb      	strh	r3, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len/4; i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	81fb      	strh	r3, [r7, #14]
 8000e46:	e018      	b.n	8000e7a <I_Shape+0x56>
	{
		for (uint16_t ii = 0; ii < len; ii++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	81bb      	strh	r3, [r7, #12]
 8000e4c:	e00e      	b.n	8000e6c <I_Shape+0x48>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 8000e4e:	89fa      	ldrh	r2, [r7, #14]
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4413      	add	r3, r2
 8000e54:	b298      	uxth	r0, r3
 8000e56:	89ba      	ldrh	r2, [r7, #12]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	883a      	ldrh	r2, [r7, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fe0d 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < len; ii++)
 8000e66:	89bb      	ldrh	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	81bb      	strh	r3, [r7, #12]
 8000e6c:	89ba      	ldrh	r2, [r7, #12]
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3ec      	bcc.n	8000e4e <I_Shape+0x2a>
	for (uint16_t i = 0; i < len/4; i++)
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	3301      	adds	r3, #1
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	89fa      	ldrh	r2, [r7, #14]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d3e0      	bcc.n	8000e48 <I_Shape+0x24>
		}
	}
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}

08000e90 <S_Shape>:
void S_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4604      	mov	r4, r0
 8000e98:	4608      	mov	r0, r1
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < 2; i++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	81fb      	strh	r3, [r7, #14]
 8000eb2:	e033      	b.n	8000f1c <S_Shape+0x8c>
	{
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81bb      	strh	r3, [r7, #12]
 8000eb8:	e01d      	b.n	8000ef6 <S_Shape+0x66>
		{
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	817b      	strh	r3, [r7, #10]
 8000ebe:	e00e      	b.n	8000ede <S_Shape+0x4e>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 8000ec0:	89ba      	ldrh	r2, [r7, #12]
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b298      	uxth	r0, r3
 8000ec8:	897a      	ldrh	r2, [r7, #10]
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	883a      	ldrh	r2, [r7, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fdd4 	bl	8000a80 <LCD_Draw_Pixel>
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000ed8:	897b      	ldrh	r3, [r7, #10]
 8000eda:	3301      	adds	r3, #1
 8000edc:	817b      	strh	r3, [r7, #10]
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <S_Shape+0x9c>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	897a      	ldrh	r2, [r7, #10]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d3e7      	bcc.n	8000ec0 <S_Shape+0x30>
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000ef0:	89bb      	ldrh	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	81bb      	strh	r3, [r7, #12]
 8000ef6:	89ba      	ldrh	r2, [r7, #12]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	490c      	ldr	r1, [pc, #48]	@ (8000f30 <S_Shape+0xa0>)
 8000efe:	fb81 0103 	smull	r0, r1, r1, r3
 8000f02:	17db      	asrs	r3, r3, #31
 8000f04:	1acb      	subs	r3, r1, r3
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbd7      	blt.n	8000eba <S_Shape+0x2a>
			}
		}
		x=x+BLOCK;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	331e      	adds	r3, #30
 8000f0e:	80fb      	strh	r3, [r7, #6]
		y=y-BLOCK;
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	3b1e      	subs	r3, #30
 8000f14:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < 2; i++)
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	81fb      	strh	r3, [r7, #14]
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d9c8      	bls.n	8000eb4 <S_Shape+0x24>
	}
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	aaaaaaab 	.word	0xaaaaaaab
 8000f30:	55555556 	.word	0x55555556

08000f34 <Z_Shape>:
void Z_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	80fb      	strh	r3, [r7, #6]
 8000f46:	4603      	mov	r3, r0
 8000f48:	80bb      	strh	r3, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < 2; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	81fb      	strh	r3, [r7, #14]
 8000f56:	e033      	b.n	8000fc0 <Z_Shape+0x8c>
	{
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81bb      	strh	r3, [r7, #12]
 8000f5c:	e01d      	b.n	8000f9a <Z_Shape+0x66>
		{
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	817b      	strh	r3, [r7, #10]
 8000f62:	e00e      	b.n	8000f82 <Z_Shape+0x4e>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	897a      	ldrh	r2, [r7, #10]
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	883a      	ldrh	r2, [r7, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fd82 	bl	8000a80 <LCD_Draw_Pixel>
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	817b      	strh	r3, [r7, #10]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <Z_Shape+0x9c>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	085b      	lsrs	r3, r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	897a      	ldrh	r2, [r7, #10]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3e7      	bcc.n	8000f64 <Z_Shape+0x30>
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000f94:	89bb      	ldrh	r3, [r7, #12]
 8000f96:	3301      	adds	r3, #1
 8000f98:	81bb      	strh	r3, [r7, #12]
 8000f9a:	89ba      	ldrh	r2, [r7, #12]
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <Z_Shape+0xa0>)
 8000fa2:	fb81 0103 	smull	r0, r1, r1, r3
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	429a      	cmp	r2, r3
 8000fac:	dbd7      	blt.n	8000f5e <Z_Shape+0x2a>
			}
		}
		x=x+BLOCK;
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	331e      	adds	r3, #30
 8000fb2:	80fb      	strh	r3, [r7, #6]
		y=y+BLOCK;
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	331e      	adds	r3, #30
 8000fb8:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < 2; i++)
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d9c8      	bls.n	8000f58 <Z_Shape+0x24>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	aaaaaaab 	.word	0xaaaaaaab
 8000fd4:	55555556 	.word	0x55555556

08000fd8 <L_Shape>:
void L_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	80fb      	strh	r3, [r7, #6]
 8000fea:	4603      	mov	r3, r0
 8000fec:	80bb      	strh	r3, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	803b      	strh	r3, [r7, #0]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	e018      	b.n	800102e <L_Shape+0x56>
	{
		for (uint16_t iii = 0 ;iii < len; iii++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	81bb      	strh	r3, [r7, #12]
 8001000:	e00e      	b.n	8001020 <L_Shape+0x48>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 8001002:	89fa      	ldrh	r2, [r7, #14]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4413      	add	r3, r2
 8001008:	b298      	uxth	r0, r3
 800100a:	89ba      	ldrh	r2, [r7, #12]
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	b29b      	uxth	r3, r3
 8001012:	883a      	ldrh	r2, [r7, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fd33 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len; iii++)
 800101a:	89bb      	ldrh	r3, [r7, #12]
 800101c:	3301      	adds	r3, #1
 800101e:	81bb      	strh	r3, [r7, #12]
 8001020:	89ba      	ldrh	r2, [r7, #12]
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3ec      	bcc.n	8001002 <L_Shape+0x2a>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	3301      	adds	r3, #1
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	4a1e      	ldr	r2, [pc, #120]	@ (80010ac <L_Shape+0xd4>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	89fa      	ldrh	r2, [r7, #14]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3dd      	bcc.n	8000ffc <L_Shape+0x24>
		}
	}
	x= x + BLOCK;
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	331e      	adds	r3, #30
 8001044:	80fb      	strh	r3, [r7, #6]
	y= y + 2*BLOCK;
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	333c      	adds	r3, #60	@ 0x3c
 800104a:	80bb      	strh	r3, [r7, #4]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 800104c:	2300      	movs	r3, #0
 800104e:	817b      	strh	r3, [r7, #10]
 8001050:	e01d      	b.n	800108e <L_Shape+0xb6>
	{
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001052:	2300      	movs	r3, #0
 8001054:	813b      	strh	r3, [r7, #8]
 8001056:	e00e      	b.n	8001076 <L_Shape+0x9e>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 8001058:	897a      	ldrh	r2, [r7, #10]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4413      	add	r3, r2
 800105e:	b298      	uxth	r0, r3
 8001060:	893a      	ldrh	r2, [r7, #8]
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	b29b      	uxth	r3, r3
 8001068:	883a      	ldrh	r2, [r7, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd08 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001070:	893b      	ldrh	r3, [r7, #8]
 8001072:	3301      	adds	r3, #1
 8001074:	813b      	strh	r3, [r7, #8]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <L_Shape+0xd4>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	b29b      	uxth	r3, r3
 8001082:	893a      	ldrh	r2, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3e7      	bcc.n	8001058 <L_Shape+0x80>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	3301      	adds	r3, #1
 800108c:	817b      	strh	r3, [r7, #10]
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <L_Shape+0xd4>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	897a      	ldrh	r2, [r7, #10]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3d8      	bcc.n	8001052 <L_Shape+0x7a>
		}
	}



}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	aaaaaaab 	.word	0xaaaaaaab

080010b0 <J_Shape>:
void J_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	4603      	mov	r3, r0
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	803b      	strh	r3, [r7, #0]
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	81fb      	strh	r3, [r7, #14]
 80010d2:	e018      	b.n	8001106 <J_Shape+0x56>
	{
		for ( uint16_t iii = 0 ;iii < len; iii++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	81bb      	strh	r3, [r7, #12]
 80010d8:	e00e      	b.n	80010f8 <J_Shape+0x48>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4413      	add	r3, r2
 80010e0:	b298      	uxth	r0, r3
 80010e2:	89ba      	ldrh	r2, [r7, #12]
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	883a      	ldrh	r2, [r7, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fcc7 	bl	8000a80 <LCD_Draw_Pixel>
		for ( uint16_t iii = 0 ;iii < len; iii++)
 80010f2:	89bb      	ldrh	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	81bb      	strh	r3, [r7, #12]
 80010f8:	89ba      	ldrh	r2, [r7, #12]
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3ec      	bcc.n	80010da <J_Shape+0x2a>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	3301      	adds	r3, #1
 8001104:	81fb      	strh	r3, [r7, #14]
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	4a1e      	ldr	r2, [pc, #120]	@ (8001184 <J_Shape+0xd4>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	085b      	lsrs	r3, r3, #1
 8001110:	b29b      	uxth	r3, r3
 8001112:	89fa      	ldrh	r2, [r7, #14]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3dd      	bcc.n	80010d4 <J_Shape+0x24>
		}
	}

	x=x - BLOCK;
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	3b1e      	subs	r3, #30
 800111c:	80fb      	strh	r3, [r7, #6]
	y=y + 2*BLOCK;
 800111e:	88bb      	ldrh	r3, [r7, #4]
 8001120:	333c      	adds	r3, #60	@ 0x3c
 8001122:	80bb      	strh	r3, [r7, #4]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001124:	2300      	movs	r3, #0
 8001126:	817b      	strh	r3, [r7, #10]
 8001128:	e01d      	b.n	8001166 <J_Shape+0xb6>
	{
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 800112a:	2300      	movs	r3, #0
 800112c:	813b      	strh	r3, [r7, #8]
 800112e:	e00e      	b.n	800114e <J_Shape+0x9e>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 8001130:	897a      	ldrh	r2, [r7, #10]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4413      	add	r3, r2
 8001136:	b298      	uxth	r0, r3
 8001138:	893a      	ldrh	r2, [r7, #8]
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fc9c 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	813b      	strh	r3, [r7, #8]
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <J_Shape+0xd4>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	893a      	ldrh	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3e7      	bcc.n	8001130 <J_Shape+0x80>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001160:	897b      	ldrh	r3, [r7, #10]
 8001162:	3301      	adds	r3, #1
 8001164:	817b      	strh	r3, [r7, #10]
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <J_Shape+0xd4>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	897a      	ldrh	r2, [r7, #10]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3d8      	bcc.n	800112a <J_Shape+0x7a>
		}

	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	aaaaaaab 	.word	0xaaaaaaab

08001188 <T_Shape>:
void T_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4604      	mov	r4, r0
 8001190:	4608      	mov	r0, r1
 8001192:	4611      	mov	r1, r2
 8001194:	461a      	mov	r2, r3
 8001196:	4623      	mov	r3, r4
 8001198:	80fb      	strh	r3, [r7, #6]
 800119a:	4603      	mov	r3, r0
 800119c:	80bb      	strh	r3, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	807b      	strh	r3, [r7, #2]
 80011a2:	4613      	mov	r3, r2
 80011a4:	803b      	strh	r3, [r7, #0]
	static uint16_t ii = 0;

	for (uint16_t i = 0 ;i < 2; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	81fb      	strh	r3, [r7, #14]
 80011aa:	e032      	b.n	8001212 <T_Shape+0x8a>
	{
		for ( ;ii < len; ii++)
		{
			for (uint16_t iii = 0 ;iii < len/3; iii++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	81bb      	strh	r3, [r7, #12]
 80011b0:	e00f      	b.n	80011d2 <T_Shape+0x4a>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <T_Shape+0x9c>)
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4413      	add	r3, r2
 80011ba:	b298      	uxth	r0, r3
 80011bc:	89ba      	ldrh	r2, [r7, #12]
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	883a      	ldrh	r2, [r7, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc5a 	bl	8000a80 <LCD_Draw_Pixel>
			for (uint16_t iii = 0 ;iii < len/3; iii++)
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	81bb      	strh	r3, [r7, #12]
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <T_Shape+0xa0>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	b29b      	uxth	r3, r3
 80011de:	89ba      	ldrh	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3e6      	bcc.n	80011b2 <T_Shape+0x2a>
		for ( ;ii < len; ii++)
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <T_Shape+0x9c>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <T_Shape+0x9c>)
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <T_Shape+0x9c>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d8d8      	bhi.n	80011ac <T_Shape+0x24>
			}
		}
		x=x-BLOCK;
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	3b1e      	subs	r3, #30
 80011fe:	80fb      	strh	r3, [r7, #6]
		y=y+BLOCK;
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	331e      	adds	r3, #30
 8001204:	80bb      	strh	r3, [r7, #4]
		ii = 2*BLOCK;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <T_Shape+0x9c>)
 8001208:	223c      	movs	r2, #60	@ 0x3c
 800120a:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0 ;i < 2; i++)
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	3301      	adds	r3, #1
 8001210:	81fb      	strh	r3, [r7, #14]
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d9eb      	bls.n	80011f0 <T_Shape+0x68>
	}
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	bf00      	nop
 8001224:	20025ac4 	.word	0x20025ac4
 8001228:	aaaaaaab 	.word	0xaaaaaaab

0800122c <Draw_Block>:

void Draw_Block(uint16_t x, uint16_t y, uint16_t color)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	460b      	mov	r3, r1
 8001238:	80bb      	strh	r3, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i < 20; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	81fb      	strh	r3, [r7, #14]
 8001242:	e017      	b.n	8001274 <Draw_Block+0x48>
	{
		for (uint16_t ii = 0; ii < 20; ii++)
 8001244:	2300      	movs	r3, #0
 8001246:	81bb      	strh	r3, [r7, #12]
 8001248:	e00e      	b.n	8001268 <Draw_Block+0x3c>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 800124a:	89fa      	ldrh	r2, [r7, #14]
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4413      	add	r3, r2
 8001250:	b298      	uxth	r0, r3
 8001252:	89ba      	ldrh	r2, [r7, #12]
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc0f 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < 20; ii++)
 8001262:	89bb      	ldrh	r3, [r7, #12]
 8001264:	3301      	adds	r3, #1
 8001266:	81bb      	strh	r3, [r7, #12]
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	2b13      	cmp	r3, #19
 800126c:	d9ed      	bls.n	800124a <Draw_Block+0x1e>
	for (uint16_t i = 0; i < 20; i++)
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	3301      	adds	r3, #1
 8001272:	81fb      	strh	r3, [r7, #14]
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	2b13      	cmp	r3, #19
 8001278:	d9e4      	bls.n	8001244 <Draw_Block+0x18>
		}
	}
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <RNG_Init>:
static RNG_HandleTypeDef hrng;

// HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng);

void RNG_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <RNG_Init+0x4c>)
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001292:	4a0f      	ldr	r2, [pc, #60]	@ (80012d0 <RNG_Init+0x4c>)
 8001294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001298:	6353      	str	r3, [r2, #52]	@ 0x34
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <RNG_Init+0x4c>)
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

	 hrng.Instance = RNG;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <RNG_Init+0x50>)
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <RNG_Init+0x54>)
 80012aa:	601a      	str	r2, [r3, #0]
	 rngHALStatus = HAL_RNG_Init(&hrng);
 80012ac:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <RNG_Init+0x50>)
 80012ae:	f004 fbd9 	bl	8005a64 <HAL_RNG_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <RNG_Init+0x58>)
 80012b8:	701a      	strb	r2, [r3, #0]
		if(rngHALStatus != HAL_OK)
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <RNG_Init+0x58>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <RNG_Init+0x42>
			{
				for(;;);
 80012c2:	bf00      	nop
 80012c4:	e7fd      	b.n	80012c2 <RNG_Init+0x3e>
			}

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	20025ac8 	.word	0x20025ac8
 80012d8:	50060800 	.word	0x50060800
 80012dc:	20025ac6 	.word	0x20025ac6

080012e0 <Gen_Number>:

uint32_t Gen_Number(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	uint32_t randomNumber;

	 rngHALStatus = HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <Gen_Number+0x30>)
 80012ec:	f004 fbe4 	bl	8005ab8 <HAL_RNG_GenerateRandomNumber>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <Gen_Number+0x34>)
 80012f6:	701a      	strb	r2, [r3, #0]
		if(rngHALStatus != HAL_OK)
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <Gen_Number+0x34>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <Gen_Number+0x24>
			{
				for(;;);
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Gen_Number+0x20>
			}
	return randomNumber;
 8001304:	687b      	ldr	r3, [r7, #4]

}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20025ac8 	.word	0x20025ac8
 8001314:	20025ac6 	.word	0x20025ac6

08001318 <addSchedulerEvent>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event; // Is this what we want?
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <addSchedulerEvent+0x20>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	@ (8001338 <addSchedulerEvent+0x20>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20025ad8 	.word	0x20025ad8

0800133c <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event; // Is this what we want?
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	43da      	mvns	r2, r3
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <removeSchedulerEvent+0x24>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4013      	ands	r3, r2
 800134e:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <removeSchedulerEvent+0x24>)
 8001350:	6013      	str	r3, [r2, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20025ad8 	.word	0x20025ad8

08001364 <getScheduledEvents>:

uint32_t getScheduledEvents(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <getScheduledEvents+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20025ad8 	.word	0x20025ad8

0800137c <Start_Tetris>:

};


void Start_Tetris(void)
{
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0

	Ran_Numb = Random_Shape();
 8001380:	f000 f902 	bl	8001588 <Random_Shape>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <Start_Tetris+0xf0>)
 800138a:	701a      	strb	r2, [r3, #0]

	block_struct.x_pos = 4;
 800138c:	4b38      	ldr	r3, [pc, #224]	@ (8001470 <Start_Tetris+0xf4>)
 800138e:	2204      	movs	r2, #4
 8001390:	821a      	strh	r2, [r3, #16]
	block_struct.y_pos=0;
 8001392:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <Start_Tetris+0xf4>)
 8001394:	2200      	movs	r2, #0
 8001396:	825a      	strh	r2, [r3, #18]


             	switch(Ran_Numb)
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <Start_Tetris+0xf0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b06      	cmp	r3, #6
 800139e:	d85d      	bhi.n	800145c <Start_Tetris+0xe0>
 80013a0:	a201      	add	r2, pc, #4	@ (adr r2, 80013a8 <Start_Tetris+0x2c>)
 80013a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a6:	bf00      	nop
 80013a8:	080013c5 	.word	0x080013c5
 80013ac:	080013db 	.word	0x080013db
 80013b0:	080013f1 	.word	0x080013f1
 80013b4:	08001407 	.word	0x08001407
 80013b8:	0800141d 	.word	0x0800141d
 80013bc:	08001431 	.word	0x08001431
 80013c0:	08001447 	.word	0x08001447
	{
	case 0:
		memcpy(block_struct.Current_Shape, O, sizeof(block_struct.Current_Shape));
 80013c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001470 <Start_Tetris+0xf4>)
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <Start_Tetris+0xf8>)
 80013c8:	4614      	mov	r4, r2
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_YELLOW;
 80013d0:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <Start_Tetris+0xf4>)
 80013d2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013d6:	829a      	strh	r2, [r3, #20]
		break;
 80013d8:	e040      	b.n	800145c <Start_Tetris+0xe0>

	case 1:
		memcpy(block_struct.Current_Shape, I, sizeof(block_struct.Current_Shape));
 80013da:	4a25      	ldr	r2, [pc, #148]	@ (8001470 <Start_Tetris+0xf4>)
 80013dc:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <Start_Tetris+0xfc>)
 80013de:	4614      	mov	r4, r2
 80013e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_CYAN;
 80013e6:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <Start_Tetris+0xf4>)
 80013e8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013ec:	829a      	strh	r2, [r3, #20]
		break;
 80013ee:	e035      	b.n	800145c <Start_Tetris+0xe0>

	case 2:
		memcpy(block_struct.Current_Shape, S, sizeof(block_struct.Current_Shape));
 80013f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001470 <Start_Tetris+0xf4>)
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <Start_Tetris+0x100>)
 80013f4:	4614      	mov	r4, r2
 80013f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_RED;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <Start_Tetris+0xf4>)
 80013fe:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001402:	829a      	strh	r2, [r3, #20]
		break;
 8001404:	e02a      	b.n	800145c <Start_Tetris+0xe0>

	case 3:
		memcpy(block_struct.Current_Shape, Z, sizeof(block_struct.Current_Shape));
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <Start_Tetris+0xf4>)
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <Start_Tetris+0x104>)
 800140a:	4614      	mov	r4, r2
 800140c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800140e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_GREEN;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <Start_Tetris+0xf4>)
 8001414:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001418:	829a      	strh	r2, [r3, #20]
		break;
 800141a:	e01f      	b.n	800145c <Start_Tetris+0xe0>

	case 4:
		memcpy(block_struct.Current_Shape, L, sizeof(block_struct.Current_Shape));
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <Start_Tetris+0xf4>)
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <Start_Tetris+0x108>)
 8001420:	4614      	mov	r4, r2
 8001422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_BLUE;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <Start_Tetris+0xf4>)
 800142a:	221f      	movs	r2, #31
 800142c:	829a      	strh	r2, [r3, #20]
		break;
 800142e:	e015      	b.n	800145c <Start_Tetris+0xe0>

	case 5:
		memcpy(block_struct.Current_Shape, J, sizeof(block_struct.Current_Shape));
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <Start_Tetris+0xf4>)
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <Start_Tetris+0x10c>)
 8001434:	4614      	mov	r4, r2
 8001436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_MAGENTA;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <Start_Tetris+0xf4>)
 800143e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001442:	829a      	strh	r2, [r3, #20]
		break;
 8001444:	e00a      	b.n	800145c <Start_Tetris+0xe0>

	case 6:
		memcpy(block_struct.Current_Shape, T, sizeof(block_struct.Current_Shape));
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <Start_Tetris+0xf4>)
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <Start_Tetris+0x110>)
 800144a:	4614      	mov	r4, r2
 800144c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_BLUE2;
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <Start_Tetris+0xf4>)
 8001454:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001458:	829a      	strh	r2, [r3, #20]
		break;
 800145a:	bf00      	nop
	}

	Draw_Shape(&block_struct);
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <Start_Tetris+0xf4>)
 800145e:	f000 f817 	bl	8001490 <Draw_Shape>
	TIMER_Int_Start();
 8001462:	f000 fbf5 	bl	8001c50 <TIMER_Int_Start>

}
 8001466:	bf00      	nop
 8001468:	bd98      	pop	{r3, r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	20025ae1 	.word	0x20025ae1
 8001470:	20025ae4 	.word	0x20025ae4
 8001474:	20000004 	.word	0x20000004
 8001478:	20000014 	.word	0x20000014
 800147c:	20000024 	.word	0x20000024
 8001480:	20000034 	.word	0x20000034
 8001484:	20000044 	.word	0x20000044
 8001488:	20000054 	.word	0x20000054
 800148c:	20000064 	.word	0x20000064

08001490 <Draw_Shape>:

void Draw_Shape(block_t* block)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

	// If any element in the row is 1 then draw block @ x_start+i and y_start

	// If any element in the next colm then draw block @ x_start+i and y_start+j // i may very well be 0 cause far left

	for (uint16_t j = 0; j < 4; j++)
 8001498:	2300      	movs	r3, #0
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	e02d      	b.n	80014fa <Draw_Shape+0x6a>
	{
		for (uint16_t i = 0; i < 4; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	81bb      	strh	r3, [r7, #12]
 80014a2:	e024      	b.n	80014ee <Draw_Shape+0x5e>
		{
			if((block->Current_Shape)[j][i] == 1)
 80014a4:	89fa      	ldrh	r2, [r7, #14]
 80014a6:	89bb      	ldrh	r3, [r7, #12]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	440a      	add	r2, r1
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d118      	bne.n	80014e8 <Draw_Shape+0x58>
			{
				Draw_Block((block->x_pos+i)*20, (block->y_pos+j)*20, block->Current_Color);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	8a1a      	ldrh	r2, [r3, #16]
 80014ba:	89bb      	ldrh	r3, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	b298      	uxth	r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	8a5a      	ldrh	r2, [r3, #18]
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	b299      	uxth	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8a9b      	ldrh	r3, [r3, #20]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f7ff fea2 	bl	800122c <Draw_Block>
		for (uint16_t i = 0; i < 4; i++)
 80014e8:	89bb      	ldrh	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	81bb      	strh	r3, [r7, #12]
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d9d7      	bls.n	80014a4 <Draw_Shape+0x14>
	for (uint16_t j = 0; j < 4; j++)
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	3301      	adds	r3, #1
 80014f8:	81fb      	strh	r3, [r7, #14]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d9ce      	bls.n	800149e <Draw_Shape+0xe>

			}
		}
	}
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <Update_Board>:
// Got an Error when I did block_t* block then did switch(block->Current_Shape) so decided to do
// Void for input then did an instance!
void Update_Board(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t j;


	for (i = 0; i < 4; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	e028      	b.n	800156a <Update_Board+0x5e>
	{
		for (j = 0; j < 4; j++)
 8001518:	2300      	movs	r3, #0
 800151a:	71bb      	strb	r3, [r7, #6]
 800151c:	e01f      	b.n	800155e <Update_Board+0x52>
		{
			if (block_struct.Current_Shape[i][j] == 1)
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	4917      	ldr	r1, [pc, #92]	@ (8001580 <Update_Board+0x74>)
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	440a      	add	r2, r1
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d113      	bne.n	8001558 <Update_Board+0x4c>
			{
				//TODO: Next line commented out for testing.
				Board[(block_struct.y_pos) + i-1][block_struct.x_pos + j] = 1;
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <Update_Board+0x74>)
 8001532:	8a5b      	ldrh	r3, [r3, #18]
 8001534:	461a      	mov	r2, r3
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4413      	add	r3, r2
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <Update_Board+0x74>)
 800153e:	8a1b      	ldrh	r3, [r3, #16]
 8001540:	4619      	mov	r1, r3
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	4419      	add	r1, r3
 8001546:	480f      	ldr	r0, [pc, #60]	@ (8001584 <Update_Board+0x78>)
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	440b      	add	r3, r1
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 4; j++)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	3301      	adds	r3, #1
 800155c:	71bb      	strb	r3, [r7, #6]
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d9dc      	bls.n	800151e <Update_Board+0x12>
	for (i = 0; i < 4; i++)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	3301      	adds	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d9d3      	bls.n	8001518 <Update_Board+0xc>
				//Board[(block_struct.y_pos) + i][block_struct.x_pos + j] = 1;

			}
		}
	}
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20025ae4 	.word	0x20025ae4
 8001584:	20000074 	.word	0x20000074

08001588 <Random_Shape>:

uint8_t Random_Shape(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	uint32_t random = Gen_Number();
 800158e:	f7ff fea7 	bl	80012e0 <Gen_Number>
 8001592:	6078      	str	r0, [r7, #4]
	random = random % SEVEN;
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <Random_Shape+0x34>)
 8001598:	fba3 1302 	umull	r1, r3, r3, r2
 800159c:	1ad1      	subs	r1, r2, r3
 800159e:	0849      	lsrs	r1, r1, #1
 80015a0:	440b      	add	r3, r1
 80015a2:	0899      	lsrs	r1, r3, #2
 80015a4:	460b      	mov	r3, r1
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a5b      	subs	r3, r3, r1
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	607b      	str	r3, [r7, #4]
	return random;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	b2db      	uxtb	r3, r3
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	24924925 	.word	0x24924925

080015c0 <Rotate_CC>:

void Rotate_CC(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
	if( Check_Down() == true )
 80015c6:	f000 f865 	bl	8001694 <Check_Down>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d05a      	beq.n	8001686 <Rotate_CC+0xc6>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <Rotate_CC+0xd0>)
 80015d2:	8a9b      	ldrh	r3, [r3, #20]
 80015d4:	827b      	strh	r3, [r7, #18]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <Rotate_CC+0xd0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 80015dc:	482c      	ldr	r0, [pc, #176]	@ (8001690 <Rotate_CC+0xd0>)
 80015de:	f7ff ff57 	bl	8001490 <Draw_Shape>
		block_struct.Current_Color = temp_color;
 80015e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001690 <Rotate_CC+0xd0>)
 80015e4:	8a7b      	ldrh	r3, [r7, #18]
 80015e6:	8293      	strh	r3, [r2, #20]

		uint8_t temp[4][4] = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
		// Flip the matrix clockwise using nested loops
		for (uint8_t i = 0; i < 4; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	75fb      	strb	r3, [r7, #23]
 80015f8:	e01d      	b.n	8001636 <Rotate_CC+0x76>
		{
			for (uint8_t j = 0; j < 4; j++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	75bb      	strb	r3, [r7, #22]
 80015fe:	e014      	b.n	800162a <Rotate_CC+0x6a>
			{
				temp[j][4 - i - 1] = (block_struct.Current_Shape)[i][j];
 8001600:	7df8      	ldrb	r0, [r7, #23]
 8001602:	7db9      	ldrb	r1, [r7, #22]
 8001604:	7dba      	ldrb	r2, [r7, #22]
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	f1c3 0303 	rsb	r3, r3, #3
 800160c:	4c20      	ldr	r4, [pc, #128]	@ (8001690 <Rotate_CC+0xd0>)
 800160e:	0080      	lsls	r0, r0, #2
 8001610:	4420      	add	r0, r4
 8001612:	4401      	add	r1, r0
 8001614:	7809      	ldrb	r1, [r1, #0]
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	3218      	adds	r2, #24
 800161a:	443a      	add	r2, r7
 800161c:	4413      	add	r3, r2
 800161e:	3b18      	subs	r3, #24
 8001620:	460a      	mov	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4; j++)
 8001624:	7dbb      	ldrb	r3, [r7, #22]
 8001626:	3301      	adds	r3, #1
 8001628:	75bb      	strb	r3, [r7, #22]
 800162a:	7dbb      	ldrb	r3, [r7, #22]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d9e7      	bls.n	8001600 <Rotate_CC+0x40>
		for (uint8_t i = 0; i < 4; i++)
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	3301      	adds	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d9de      	bls.n	80015fa <Rotate_CC+0x3a>
			}
		}

		// Copy result back to mat
		for (uint8_t i = 0; i < 4; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	757b      	strb	r3, [r7, #21]
 8001640:	e01b      	b.n	800167a <Rotate_CC+0xba>
		{
			for (uint8_t j = 0; j < 4; j++)
 8001642:	2300      	movs	r3, #0
 8001644:	753b      	strb	r3, [r7, #20]
 8001646:	e012      	b.n	800166e <Rotate_CC+0xae>
			{
				(block_struct.Current_Shape)[i][j] = temp[i][j];
 8001648:	7d78      	ldrb	r0, [r7, #21]
 800164a:	7d39      	ldrb	r1, [r7, #20]
 800164c:	7d7a      	ldrb	r2, [r7, #21]
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	0080      	lsls	r0, r0, #2
 8001652:	3018      	adds	r0, #24
 8001654:	4438      	add	r0, r7
 8001656:	4401      	add	r1, r0
 8001658:	3918      	subs	r1, #24
 800165a:	7808      	ldrb	r0, [r1, #0]
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <Rotate_CC+0xd0>)
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	440a      	add	r2, r1
 8001662:	4413      	add	r3, r2
 8001664:	4602      	mov	r2, r0
 8001666:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4; j++)
 8001668:	7d3b      	ldrb	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	753b      	strb	r3, [r7, #20]
 800166e:	7d3b      	ldrb	r3, [r7, #20]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d9e9      	bls.n	8001648 <Rotate_CC+0x88>
		for (uint8_t i = 0; i < 4; i++)
 8001674:	7d7b      	ldrb	r3, [r7, #21]
 8001676:	3301      	adds	r3, #1
 8001678:	757b      	strb	r3, [r7, #21]
 800167a:	7d7b      	ldrb	r3, [r7, #21]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d9e0      	bls.n	8001642 <Rotate_CC+0x82>
			}
		}

		Draw_Shape(&block_struct);
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <Rotate_CC+0xd0>)
 8001682:	f7ff ff05 	bl	8001490 <Draw_Shape>
	{

	}


}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	bf00      	nop
 8001690:	20025ae4 	.word	0x20025ae4

08001694 <Check_Down>:
bool Check_Down(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	far_overal_l_col = 0;
 800169a:	4b82      	ldr	r3, [pc, #520]	@ (80018a4 <Check_Down+0x210>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
	far_overal_r_col = 0;
 80016a0:	4b81      	ldr	r3, [pc, #516]	@ (80018a8 <Check_Down+0x214>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]

	lowest_row = 0;
 80016a6:	4b81      	ldr	r3, [pc, #516]	@ (80018ac <Check_Down+0x218>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	int8_t i = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	71fb      	strb	r3, [r7, #7]
	int8_t j = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	71bb      	strb	r3, [r7, #6]

	for ( i = 3; i > -1; i--)
 80016b4:	2303      	movs	r3, #3
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	e028      	b.n	800170c <Check_Down+0x78>
		{
			for ( j = 0; j < 4; j++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	71bb      	strb	r3, [r7, #6]
 80016be:	e01b      	b.n	80016f8 <Check_Down+0x64>
			{
				// Find the lowest row that has element equal to 1 because then when checking
				// the board I can just check Board[(block_struct.y_pos)-lowest_row]
				if( (block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 80016c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80016c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016c8:	4979      	ldr	r1, [pc, #484]	@ (80018b0 <Check_Down+0x21c>)
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	440a      	add	r2, r1
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00a      	beq.n	80016ec <Check_Down+0x58>
 80016d6:	4b77      	ldr	r3, [pc, #476]	@ (80018b4 <Check_Down+0x220>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <Check_Down+0x58>
				{
					LOWRFLAG = 0;
 80016de:	4b75      	ldr	r3, [pc, #468]	@ (80018b4 <Check_Down+0x220>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
					lowest_row = i;
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	4b71      	ldr	r3, [pc, #452]	@ (80018ac <Check_Down+0x218>)
 80016e8:	701a      	strb	r2, [r3, #0]
					break;
 80016ea:	e009      	b.n	8001700 <Check_Down+0x6c>
			for ( j = 0; j < 4; j++)
 80016ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	71bb      	strb	r3, [r7, #6]
 80016f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	dddf      	ble.n	80016c0 <Check_Down+0x2c>
	for ( i = 3; i > -1; i--)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	dad2      	bge.n	80016ba <Check_Down+0x26>
				}
			}
		}

		LOWRFLAG = 1;
 8001714:	4b67      	ldr	r3, [pc, #412]	@ (80018b4 <Check_Down+0x220>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]

		for ( j=0; j<4; j++)
 800171a:	2300      	movs	r3, #0
 800171c:	71bb      	strb	r3, [r7, #6]
 800171e:	e02e      	b.n	800177e <Check_Down+0xea>
		{
			for ( i=0; i<=lowest_row; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	e01b      	b.n	800175e <Check_Down+0xca>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 8001726:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800172a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800172e:	4960      	ldr	r1, [pc, #384]	@ (80018b0 <Check_Down+0x21c>)
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	440a      	add	r2, r1
 8001734:	4413      	add	r3, r2
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00a      	beq.n	8001752 <Check_Down+0xbe>
 800173c:	4b5d      	ldr	r3, [pc, #372]	@ (80018b4 <Check_Down+0x220>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <Check_Down+0xbe>
				{
					LOWRFLAG = 0;
 8001744:	4b5b      	ldr	r3, [pc, #364]	@ (80018b4 <Check_Down+0x220>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
					far_overal_l_col = j;
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	4b55      	ldr	r3, [pc, #340]	@ (80018a4 <Check_Down+0x210>)
 800174e:	701a      	strb	r2, [r3, #0]
					break;
 8001750:	e00b      	b.n	800176a <Check_Down+0xd6>
			for ( i=0; i<=lowest_row; i++)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	4a52      	ldr	r2, [pc, #328]	@ (80018ac <Check_Down+0x218>)
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	4293      	cmp	r3, r2
 8001768:	dddd      	ble.n	8001726 <Check_Down+0x92>
				}
			}
			if (LOWRFLAG == 0)
 800176a:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <Check_Down+0x220>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <Check_Down+0xf4>
		for ( j=0; j<4; j++)
 8001772:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	71bb      	strb	r3, [r7, #6]
 800177e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001782:	2b03      	cmp	r3, #3
 8001784:	ddcc      	ble.n	8001720 <Check_Down+0x8c>
 8001786:	e000      	b.n	800178a <Check_Down+0xf6>
			{
				break;
 8001788:	bf00      	nop
			}
		}

		LOWRFLAG = 1;
 800178a:	4b4a      	ldr	r3, [pc, #296]	@ (80018b4 <Check_Down+0x220>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]

		for ( j=3; j>-1; j--)
 8001790:	2303      	movs	r3, #3
 8001792:	71bb      	strb	r3, [r7, #6]
 8001794:	e02e      	b.n	80017f4 <Check_Down+0x160>
		{
			for ( i=0; i<=lowest_row; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	e01b      	b.n	80017d4 <Check_Down+0x140>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 800179c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80017a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017a4:	4942      	ldr	r1, [pc, #264]	@ (80018b0 <Check_Down+0x21c>)
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	440a      	add	r2, r1
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00a      	beq.n	80017c8 <Check_Down+0x134>
 80017b2:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <Check_Down+0x220>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d106      	bne.n	80017c8 <Check_Down+0x134>
				{
					LOWRFLAG = 0;
 80017ba:	4b3e      	ldr	r3, [pc, #248]	@ (80018b4 <Check_Down+0x220>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
					far_overal_r_col = j;
 80017c0:	79ba      	ldrb	r2, [r7, #6]
 80017c2:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <Check_Down+0x214>)
 80017c4:	701a      	strb	r2, [r3, #0]
					break;
 80017c6:	e00b      	b.n	80017e0 <Check_Down+0x14c>
			for ( i=0; i<=lowest_row; i++)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4a34      	ldr	r2, [pc, #208]	@ (80018ac <Check_Down+0x218>)
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4293      	cmp	r3, r2
 80017de:	dddd      	ble.n	800179c <Check_Down+0x108>
				}

			}
			if (LOWRFLAG == 0)
 80017e0:	4b34      	ldr	r3, [pc, #208]	@ (80018b4 <Check_Down+0x220>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00a      	beq.n	80017fe <Check_Down+0x16a>
		for ( j=3; j>-1; j--)
 80017e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	71bb      	strb	r3, [r7, #6]
 80017f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dacc      	bge.n	8001796 <Check_Down+0x102>
 80017fc:	e000      	b.n	8001800 <Check_Down+0x16c>
			{
				break;
 80017fe:	bf00      	nop
			}
		}

	if ( LOWRFLAG == 0)
 8001800:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <Check_Down+0x220>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d145      	bne.n	8001894 <Check_Down+0x200>
	{
		for (i = lowest_row; i> -1; i--  )
 8001808:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <Check_Down+0x218>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	e038      	b.n	8001882 <Check_Down+0x1ee>
		{
			for ( j= far_overal_l_col; j <= far_overal_r_col; j++)
 8001810:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <Check_Down+0x210>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	e028      	b.n	800186a <Check_Down+0x1d6>
			{
				if(Board[(block_struct.y_pos)+i][(block_struct.x_pos)+j] && block_struct.Current_Shape[i][j] == 1)
 8001818:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <Check_Down+0x21c>)
 800181a:	8a5b      	ldrh	r3, [r3, #18]
 800181c:	461a      	mov	r2, r3
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	441a      	add	r2, r3
 8001824:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <Check_Down+0x21c>)
 8001826:	8a1b      	ldrh	r3, [r3, #16]
 8001828:	4619      	mov	r1, r3
 800182a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800182e:	4419      	add	r1, r3
 8001830:	4821      	ldr	r0, [pc, #132]	@ (80018b8 <Check_Down+0x224>)
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4403      	add	r3, r0
 800183c:	440b      	add	r3, r1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00c      	beq.n	800185e <Check_Down+0x1ca>
 8001844:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001848:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800184c:	4918      	ldr	r1, [pc, #96]	@ (80018b0 <Check_Down+0x21c>)
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	440a      	add	r2, r1
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <Check_Down+0x1ca>
				{
					return false;
 800185a:	2300      	movs	r3, #0
 800185c:	e01b      	b.n	8001896 <Check_Down+0x202>
			for ( j= far_overal_l_col; j <= far_overal_r_col; j++)
 800185e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3301      	adds	r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	71bb      	strb	r3, [r7, #6]
 800186a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800186e:	4a0e      	ldr	r2, [pc, #56]	@ (80018a8 <Check_Down+0x214>)
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	4293      	cmp	r3, r2
 8001874:	ddd0      	ble.n	8001818 <Check_Down+0x184>
		for (i = lowest_row; i> -1; i--  )
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	dac2      	bge.n	8001810 <Check_Down+0x17c>
				}
			}
		}

		LOWRFLAG = 1;
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <Check_Down+0x220>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
		return true;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <Check_Down+0x202>

	}
	return false;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20025adf 	.word	0x20025adf
 80018a8:	20025ae0 	.word	0x20025ae0
 80018ac:	20025ade 	.word	0x20025ade
 80018b0:	20025ae4 	.word	0x20025ae4
 80018b4:	20000002 	.word	0x20000002
 80018b8:	20000074 	.word	0x20000074

080018bc <Move_Down>:

void Move_Down(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	if( Check_Down() == true )
 80018c2:	f7ff fee7 	bl	8001694 <Check_Down>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d015      	beq.n	80018f8 <Move_Down+0x3c>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <Move_Down+0x58>)
 80018ce:	8a9b      	ldrh	r3, [r3, #20]
 80018d0:	80fb      	strh	r3, [r7, #6]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <Move_Down+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 80018d8:	480e      	ldr	r0, [pc, #56]	@ (8001914 <Move_Down+0x58>)
 80018da:	f7ff fdd9 	bl	8001490 <Draw_Shape>


		block_struct.Current_Color = temp_color;
 80018de:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <Move_Down+0x58>)
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	8293      	strh	r3, [r2, #20]
		block_struct.y_pos +=1;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <Move_Down+0x58>)
 80018e6:	8a5b      	ldrh	r3, [r3, #18]
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <Move_Down+0x58>)
 80018ee:	825a      	strh	r2, [r3, #18]
		Draw_Shape(&block_struct);
 80018f0:	4808      	ldr	r0, [pc, #32]	@ (8001914 <Move_Down+0x58>)
 80018f2:	f7ff fdcd 	bl	8001490 <Draw_Shape>
		Update_Board();
		Check_Endgame();
		Start_Tetris();

	}
}
 80018f6:	e009      	b.n	800190c <Move_Down+0x50>
		TIMER_Int_Stop();
 80018f8:	f000 f9c0 	bl	8001c7c <TIMER_Int_Stop>
		TIMER_Reset();
 80018fc:	f000 f990 	bl	8001c20 <TIMER_Reset>
		Update_Board();
 8001900:	f7ff fe04 	bl	800150c <Update_Board>
		Check_Endgame();
 8001904:	f000 f808 	bl	8001918 <Check_Endgame>
		Start_Tetris();
 8001908:	f7ff fd38 	bl	800137c <Start_Tetris>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20025ae4 	.word	0x20025ae4

08001918 <Check_Endgame>:

void Check_Endgame(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

	for (uint8_t j = 2; j <= 9; j++)
 800191e:	2302      	movs	r3, #2
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	e00d      	b.n	8001940 <Check_Endgame+0x28>
	{
		if ( Board[0][j] == 1)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <Check_Endgame+0x38>)
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d105      	bne.n	800193a <Check_Endgame+0x22>
		{

			EndGame();
 800192e:	f000 f813 	bl	8001958 <EndGame>
			ENDGAME_FLAG = 1;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <Check_Endgame+0x3c>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
			break;
 8001938:	e006      	b.n	8001948 <Check_Endgame+0x30>
	for (uint8_t j = 2; j <= 9; j++)
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	3301      	adds	r3, #1
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b09      	cmp	r3, #9
 8001944:	d9ee      	bls.n	8001924 <Check_Endgame+0xc>
		}
	}

}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000074 	.word	0x20000074
 8001954:	20025adc 	.word	0x20025adc

08001958 <EndGame>:

void EndGame(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
	uint32_t count_value = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
	uint32_t time_elapsed = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]

	char Time[5] = {'P', 'P', 'P', 'P', 'P'};
 8001966:	4a75      	ldr	r2, [pc, #468]	@ (8001b3c <EndGame+0x1e4>)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196e:	6018      	str	r0, [r3, #0]
 8001970:	3304      	adds	r3, #4
 8001972:	7019      	strb	r1, [r3, #0]

	LCD_Clear(0,LCD_COLOR_BLACK);
 8001974:	2100      	movs	r1, #0
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff f8a0 	bl	8000abc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800197c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001980:	f7ff f8be 	bl	8000b00 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8001984:	486e      	ldr	r0, [pc, #440]	@ (8001b40 <EndGame+0x1e8>)
 8001986:	f7ff f8cb 	bl	8000b20 <LCD_SetFont>

	LCD_DisplayChar(20, 100, 'E');
 800198a:	2245      	movs	r2, #69	@ 0x45
 800198c:	2164      	movs	r1, #100	@ 0x64
 800198e:	2014      	movs	r0, #20
 8001990:	f7ff f944 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(30, 100, 'L');
 8001994:	224c      	movs	r2, #76	@ 0x4c
 8001996:	2164      	movs	r1, #100	@ 0x64
 8001998:	201e      	movs	r0, #30
 800199a:	f7ff f93f 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(40, 100, 'A');
 800199e:	2241      	movs	r2, #65	@ 0x41
 80019a0:	2164      	movs	r1, #100	@ 0x64
 80019a2:	2028      	movs	r0, #40	@ 0x28
 80019a4:	f7ff f93a 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(50, 100, 'P');
 80019a8:	2250      	movs	r2, #80	@ 0x50
 80019aa:	2164      	movs	r1, #100	@ 0x64
 80019ac:	2032      	movs	r0, #50	@ 0x32
 80019ae:	f7ff f935 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(60, 100, 'S');
 80019b2:	2253      	movs	r2, #83	@ 0x53
 80019b4:	2164      	movs	r1, #100	@ 0x64
 80019b6:	203c      	movs	r0, #60	@ 0x3c
 80019b8:	f7ff f930 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(70, 100, 'E');
 80019bc:	2245      	movs	r2, #69	@ 0x45
 80019be:	2164      	movs	r1, #100	@ 0x64
 80019c0:	2046      	movs	r0, #70	@ 0x46
 80019c2:	f7ff f92b 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(80, 100, 'D');
 80019c6:	2244      	movs	r2, #68	@ 0x44
 80019c8:	2164      	movs	r1, #100	@ 0x64
 80019ca:	2050      	movs	r0, #80	@ 0x50
 80019cc:	f7ff f926 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(100, 100, 'T');
 80019d0:	2254      	movs	r2, #84	@ 0x54
 80019d2:	2164      	movs	r1, #100	@ 0x64
 80019d4:	2064      	movs	r0, #100	@ 0x64
 80019d6:	f7ff f921 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(110, 100, 'I');
 80019da:	2249      	movs	r2, #73	@ 0x49
 80019dc:	2164      	movs	r1, #100	@ 0x64
 80019de:	206e      	movs	r0, #110	@ 0x6e
 80019e0:	f7ff f91c 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 80019e4:	224d      	movs	r2, #77	@ 0x4d
 80019e6:	2164      	movs	r1, #100	@ 0x64
 80019e8:	2078      	movs	r0, #120	@ 0x78
 80019ea:	f7ff f917 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(130, 100, 'E');
 80019ee:	2245      	movs	r2, #69	@ 0x45
 80019f0:	2164      	movs	r1, #100	@ 0x64
 80019f2:	2082      	movs	r0, #130	@ 0x82
 80019f4:	f7ff f912 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(15, 250, 'R');
 80019f8:	2252      	movs	r2, #82	@ 0x52
 80019fa:	21fa      	movs	r1, #250	@ 0xfa
 80019fc:	200f      	movs	r0, #15
 80019fe:	f7ff f90d 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(25, 250, 'E');
 8001a02:	2245      	movs	r2, #69	@ 0x45
 8001a04:	21fa      	movs	r1, #250	@ 0xfa
 8001a06:	2019      	movs	r0, #25
 8001a08:	f7ff f908 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(35, 250, 'S');
 8001a0c:	2253      	movs	r2, #83	@ 0x53
 8001a0e:	21fa      	movs	r1, #250	@ 0xfa
 8001a10:	2023      	movs	r0, #35	@ 0x23
 8001a12:	f7ff f903 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(45, 250, 'E');
 8001a16:	2245      	movs	r2, #69	@ 0x45
 8001a18:	21fa      	movs	r1, #250	@ 0xfa
 8001a1a:	202d      	movs	r0, #45	@ 0x2d
 8001a1c:	f7ff f8fe 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(55, 250, 'T');
 8001a20:	2254      	movs	r2, #84	@ 0x54
 8001a22:	21fa      	movs	r1, #250	@ 0xfa
 8001a24:	2037      	movs	r0, #55	@ 0x37
 8001a26:	f7ff f8f9 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(75, 250, 'T');
 8001a2a:	2254      	movs	r2, #84	@ 0x54
 8001a2c:	21fa      	movs	r1, #250	@ 0xfa
 8001a2e:	204b      	movs	r0, #75	@ 0x4b
 8001a30:	f7ff f8f4 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(85, 250, 'O');
 8001a34:	224f      	movs	r2, #79	@ 0x4f
 8001a36:	21fa      	movs	r1, #250	@ 0xfa
 8001a38:	2055      	movs	r0, #85	@ 0x55
 8001a3a:	f7ff f8ef 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(105, 250, 'P');
 8001a3e:	2250      	movs	r2, #80	@ 0x50
 8001a40:	21fa      	movs	r1, #250	@ 0xfa
 8001a42:	2069      	movs	r0, #105	@ 0x69
 8001a44:	f7ff f8ea 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(115, 250, 'L');
 8001a48:	224c      	movs	r2, #76	@ 0x4c
 8001a4a:	21fa      	movs	r1, #250	@ 0xfa
 8001a4c:	2073      	movs	r0, #115	@ 0x73
 8001a4e:	f7ff f8e5 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(125, 250, 'A');
 8001a52:	2241      	movs	r2, #65	@ 0x41
 8001a54:	21fa      	movs	r1, #250	@ 0xfa
 8001a56:	207d      	movs	r0, #125	@ 0x7d
 8001a58:	f7ff f8e0 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(135, 250, 'Y');
 8001a5c:	2259      	movs	r2, #89	@ 0x59
 8001a5e:	21fa      	movs	r1, #250	@ 0xfa
 8001a60:	2087      	movs	r0, #135	@ 0x87
 8001a62:	f7ff f8db 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(155, 250, 'A');
 8001a66:	2241      	movs	r2, #65	@ 0x41
 8001a68:	21fa      	movs	r1, #250	@ 0xfa
 8001a6a:	209b      	movs	r0, #155	@ 0x9b
 8001a6c:	f7ff f8d6 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(165, 250, 'G');
 8001a70:	2247      	movs	r2, #71	@ 0x47
 8001a72:	21fa      	movs	r1, #250	@ 0xfa
 8001a74:	20a5      	movs	r0, #165	@ 0xa5
 8001a76:	f7ff f8d1 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(175, 250, 'A');
 8001a7a:	2241      	movs	r2, #65	@ 0x41
 8001a7c:	21fa      	movs	r1, #250	@ 0xfa
 8001a7e:	20af      	movs	r0, #175	@ 0xaf
 8001a80:	f7ff f8cc 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(185, 250, 'I');
 8001a84:	2249      	movs	r2, #73	@ 0x49
 8001a86:	21fa      	movs	r1, #250	@ 0xfa
 8001a88:	20b9      	movs	r0, #185	@ 0xb9
 8001a8a:	f7ff f8c7 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(195, 250, 'N');
 8001a8e:	224e      	movs	r2, #78	@ 0x4e
 8001a90:	21fa      	movs	r1, #250	@ 0xfa
 8001a92:	20c3      	movs	r0, #195	@ 0xc3
 8001a94:	f7ff f8c2 	bl	8000c1c <LCD_DisplayChar>

	count_value = TIMER_ReturnVal();
 8001a98:	f000 f8ce 	bl	8001c38 <TIMER_ReturnVal>
 8001a9c:	6138      	str	r0, [r7, #16]
	// In seconds
	time_elapsed = ((count_value + 1)*(PRESCALER + 1))/PCLK;
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <EndGame+0x1ec>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	0e5b      	lsrs	r3, r3, #25
 8001ab2:	60fb      	str	r3, [r7, #12]
	itoa(time_elapsed, Time, 10);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1d39      	adds	r1, r7, #4
 8001ab8:	220a      	movs	r2, #10
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 ffb8 	bl	8006a30 <itoa>
	uint8_t Temp = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 4; i>=0; i--)
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	75fb      	strb	r3, [r7, #23]
	{
		if ( Time[i] != 'P' && ELAPSE_FLAG == 0)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	3318      	adds	r3, #24
 8001acc:	443b      	add	r3, r7
 8001ace:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001ad2:	2b50      	cmp	r3, #80	@ 0x50
 8001ad4:	d00f      	beq.n	8001af6 <EndGame+0x19e>
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <EndGame+0x1f0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <EndGame+0x19e>
		{
			Temp = i;
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	72fb      	strb	r3, [r7, #11]
			ELAPSE_FLAG = 1;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <EndGame+0x1f0>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
			break;
 8001aea:	bf00      	nop
		}
	}

	uint8_t space = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < Temp; i++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	757b      	strb	r3, [r7, #21]
 8001af4:	e016      	b.n	8001b24 <EndGame+0x1cc>
	for (uint8_t i = 4; i>=0; i--)
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	75fb      	strb	r3, [r7, #23]
		if ( Time[i] != 'P' && ELAPSE_FLAG == 0)
 8001afc:	e7e4      	b.n	8001ac8 <EndGame+0x170>
	{

		LCD_DisplayChar(150+space, 100 ,Time[i]);
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3396      	adds	r3, #150	@ 0x96
 8001b04:	b298      	uxth	r0, r3
 8001b06:	7d7b      	ldrb	r3, [r7, #21]
 8001b08:	3318      	adds	r3, #24
 8001b0a:	443b      	add	r3, r7
 8001b0c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001b10:	461a      	mov	r2, r3
 8001b12:	2164      	movs	r1, #100	@ 0x64
 8001b14:	f7ff f882 	bl	8000c1c <LCD_DisplayChar>
		space += 10;
 8001b18:	7dbb      	ldrb	r3, [r7, #22]
 8001b1a:	330a      	adds	r3, #10
 8001b1c:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < Temp; i++)
 8001b1e:	7d7b      	ldrb	r3, [r7, #21]
 8001b20:	3301      	adds	r3, #1
 8001b22:	757b      	strb	r3, [r7, #21]
 8001b24:	7d7a      	ldrb	r2, [r7, #21]
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3e8      	bcc.n	8001afe <EndGame+0x1a6>
	}
	HAL_Delay(15000);
 8001b2c:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001b30:	f001 faae 	bl	8003090 <HAL_Delay>
}
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	08006fd8 	.word	0x08006fd8
 8001b40:	2000013c 	.word	0x2000013c
 8001b44:	6642d929 	.word	0x6642d929
 8001b48:	20025add 	.word	0x20025add

08001b4c <TIMER_Init>:
static TIM_HandleTypeDef htim2;
static TIM_HandleTypeDef htim5;


void TIMER_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM5_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <TIMER_Init+0xc0>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c0c <TIMER_Init+0xc0>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <TIMER_Init+0xc0>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
	htim5.Instance = TIM5;
 8001b6e:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <TIMER_Init+0xc4>)
 8001b70:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <TIMER_Init+0xc8>)
 8001b72:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = PRESCALER;
 8001b74:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <TIMER_Init+0xc4>)
 8001b76:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001b7a:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <TIMER_Init+0xc4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = ARR_MAX;
 8001b82:	4b23      	ldr	r3, [pc, #140]	@ (8001c10 <TIMER_Init+0xc4>)
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b88:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <TIMER_Init+0xc4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <TIMER_Init+0xc4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
	timHALStatus = HAL_TIM_Base_Init(&htim5);
 8001b96:	481e      	ldr	r0, [pc, #120]	@ (8001c10 <TIMER_Init+0xc4>)
 8001b98:	f004 fac4 	bl	8006124 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <TIMER_Init+0xcc>)
 8001ba2:	701a      	strb	r2, [r3, #0]


	__HAL_RCC_TIM2_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <TIMER_Init+0xc0>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a17      	ldr	r2, [pc, #92]	@ (8001c0c <TIMER_Init+0xc0>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <TIMER_Init+0xc0>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]

	// TIM 2 Config

	htim2.Instance = TIM2;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <TIMER_Init+0xd0>)
 8001bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = PRESCALER;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <TIMER_Init+0xd0>)
 8001bca:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001bce:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <TIMER_Init+0xd0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]

	// TODO: CHANGE ME TO ARR_3 for the blocks to fall every 3 Seconds

	htim2.Init.Period = ARR_1;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <TIMER_Init+0xd0>)
 8001bd8:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001bdc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <TIMER_Init+0xd0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <TIMER_Init+0xd0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
	timHALStatus = HAL_TIM_Base_Init(&htim2);
 8001bea:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <TIMER_Init+0xd0>)
 8001bec:	f004 fa9a 	bl	8006124 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <TIMER_Init+0xcc>)
 8001bf6:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <TIMER_Init+0xcc>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <TIMER_Init+0xb8>
		{
			for(;;);
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <TIMER_Init+0xb4>
		}



}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	20025b44 	.word	0x20025b44
 8001c14:	40000c00 	.word	0x40000c00
 8001c18:	20025afa 	.word	0x20025afa
 8001c1c:	20025afc 	.word	0x20025afc

08001c20 <TIMER_Reset>:
//void TIMER_Start(void);
//
//void TIMER_Stop(void);
//
void TIMER_Reset()
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
	TIM2->CNT = RESET;
 8001c24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c28:	2200      	movs	r2, #0
 8001c2a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <TIMER_ReturnVal>:
//	specific_clock->CNT = RESET;
//}


uint32_t TIMER_ReturnVal() // Return Timer Value
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <TIMER_ReturnVal+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20025b44 	.word	0x20025b44

08001c50 <TIMER_Int_Start>:

void TIMER_Int_Start(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

	timHALStatus = HAL_TIM_Base_Start_IT(&htim2);
 8001c54:	4807      	ldr	r0, [pc, #28]	@ (8001c74 <TIMER_Int_Start+0x24>)
 8001c56:	f004 fb1d 	bl	8006294 <HAL_TIM_Base_Start_IT>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <TIMER_Int_Start+0x28>)
 8001c60:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <TIMER_Int_Start+0x28>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <TIMER_Int_Start+0x1e>
		{
			for(;;);
 8001c6a:	bf00      	nop
 8001c6c:	e7fd      	b.n	8001c6a <TIMER_Int_Start+0x1a>
		}
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20025afc 	.word	0x20025afc
 8001c78:	20025afa 	.word	0x20025afa

08001c7c <TIMER_Int_Stop>:

void TIMER_Int_Stop(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	timHALStatus = HAL_TIM_Base_Stop_IT(&htim2);
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <TIMER_Int_Stop+0x24>)
 8001c82:	f004 fb77 	bl	8006374 <HAL_TIM_Base_Stop_IT>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <TIMER_Int_Stop+0x28>)
 8001c8c:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <TIMER_Int_Stop+0x28>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <TIMER_Int_Stop+0x1e>
		{
			for(;;);
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <TIMER_Int_Stop+0x1a>
		}
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20025afc 	.word	0x20025afc
 8001ca4:	20025afa 	.word	0x20025afa

08001ca8 <TIMER5_Start>:
{
	return __HAL_TIM_GET_AUTORELOAD(&htim2);
}

void TIMER5_Start(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim5);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <TIMER5_Start+0x10>)
 8001cae:	f004 fa89 	bl	80061c4 <HAL_TIM_Base_Start>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20025b44 	.word	0x20025b44

08001cbc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cc0:	f000 f9fe 	bl	80020c0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001cc4:	20ca      	movs	r0, #202	@ 0xca
 8001cc6:	f000 f943 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001cca:	20c3      	movs	r0, #195	@ 0xc3
 8001ccc:	f000 f94d 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001cd0:	2008      	movs	r0, #8
 8001cd2:	f000 f94a 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001cd6:	2050      	movs	r0, #80	@ 0x50
 8001cd8:	f000 f947 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001cdc:	20cf      	movs	r0, #207	@ 0xcf
 8001cde:	f000 f937 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f941 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001ce8:	20c1      	movs	r0, #193	@ 0xc1
 8001cea:	f000 f93e 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001cee:	2030      	movs	r0, #48	@ 0x30
 8001cf0:	f000 f93b 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001cf4:	20ed      	movs	r0, #237	@ 0xed
 8001cf6:	f000 f92b 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001cfa:	2064      	movs	r0, #100	@ 0x64
 8001cfc:	f000 f935 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f932 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001d06:	2012      	movs	r0, #18
 8001d08:	f000 f92f 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001d0c:	2081      	movs	r0, #129	@ 0x81
 8001d0e:	f000 f92c 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001d12:	20e8      	movs	r0, #232	@ 0xe8
 8001d14:	f000 f91c 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001d18:	2085      	movs	r0, #133	@ 0x85
 8001d1a:	f000 f926 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f923 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001d24:	2078      	movs	r0, #120	@ 0x78
 8001d26:	f000 f920 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001d2a:	20cb      	movs	r0, #203	@ 0xcb
 8001d2c:	f000 f910 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001d30:	2039      	movs	r0, #57	@ 0x39
 8001d32:	f000 f91a 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001d36:	202c      	movs	r0, #44	@ 0x2c
 8001d38:	f000 f917 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 f914 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001d42:	2034      	movs	r0, #52	@ 0x34
 8001d44:	f000 f911 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f000 f90e 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001d4e:	20f7      	movs	r0, #247	@ 0xf7
 8001d50:	f000 f8fe 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001d54:	2020      	movs	r0, #32
 8001d56:	f000 f908 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001d5a:	20ea      	movs	r0, #234	@ 0xea
 8001d5c:	f000 f8f8 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f000 f902 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f8ff 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001d6c:	20b1      	movs	r0, #177	@ 0xb1
 8001d6e:	f000 f8ef 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 f8f9 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001d78:	201b      	movs	r0, #27
 8001d7a:	f000 f8f6 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001d7e:	20b6      	movs	r0, #182	@ 0xb6
 8001d80:	f000 f8e6 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001d84:	200a      	movs	r0, #10
 8001d86:	f000 f8f0 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001d8a:	20a2      	movs	r0, #162	@ 0xa2
 8001d8c:	f000 f8ed 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001d90:	20c0      	movs	r0, #192	@ 0xc0
 8001d92:	f000 f8dd 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f000 f8e7 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001d9c:	20c1      	movs	r0, #193	@ 0xc1
 8001d9e:	f000 f8d7 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001da2:	2010      	movs	r0, #16
 8001da4:	f000 f8e1 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001da8:	20c5      	movs	r0, #197	@ 0xc5
 8001daa:	f000 f8d1 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001dae:	2045      	movs	r0, #69	@ 0x45
 8001db0:	f000 f8db 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001db4:	2015      	movs	r0, #21
 8001db6:	f000 f8d8 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001dba:	20c7      	movs	r0, #199	@ 0xc7
 8001dbc:	f000 f8c8 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001dc0:	2090      	movs	r0, #144	@ 0x90
 8001dc2:	f000 f8d2 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001dc6:	2036      	movs	r0, #54	@ 0x36
 8001dc8:	f000 f8c2 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001dcc:	20c8      	movs	r0, #200	@ 0xc8
 8001dce:	f000 f8cc 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001dd2:	20f2      	movs	r0, #242	@ 0xf2
 8001dd4:	f000 f8bc 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f8c6 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001dde:	20b0      	movs	r0, #176	@ 0xb0
 8001de0:	f000 f8b6 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001de4:	20c2      	movs	r0, #194	@ 0xc2
 8001de6:	f000 f8c0 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001dea:	20b6      	movs	r0, #182	@ 0xb6
 8001dec:	f000 f8b0 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001df0:	200a      	movs	r0, #10
 8001df2:	f000 f8ba 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001df6:	20a7      	movs	r0, #167	@ 0xa7
 8001df8:	f000 f8b7 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001dfc:	2027      	movs	r0, #39	@ 0x27
 8001dfe:	f000 f8b4 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e02:	2004      	movs	r0, #4
 8001e04:	f000 f8b1 	bl	8001f6a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001e08:	202a      	movs	r0, #42	@ 0x2a
 8001e0a:	f000 f8a1 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 f8ab 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 f8a8 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f8a5 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001e20:	20ef      	movs	r0, #239	@ 0xef
 8001e22:	f000 f8a2 	bl	8001f6a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001e26:	202b      	movs	r0, #43	@ 0x2b
 8001e28:	f000 f892 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f000 f89c 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f899 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f000 f896 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001e3e:	203f      	movs	r0, #63	@ 0x3f
 8001e40:	f000 f893 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001e44:	20f6      	movs	r0, #246	@ 0xf6
 8001e46:	f000 f883 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 f88d 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f88a 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001e56:	2006      	movs	r0, #6
 8001e58:	f000 f887 	bl	8001f6a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001e5c:	202c      	movs	r0, #44	@ 0x2c
 8001e5e:	f000 f877 	bl	8001f50 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e62:	20c8      	movs	r0, #200	@ 0xc8
 8001e64:	f000 f9e8 	bl	8002238 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001e68:	2026      	movs	r0, #38	@ 0x26
 8001e6a:	f000 f871 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 f87b 	bl	8001f6a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001e74:	20e0      	movs	r0, #224	@ 0xe0
 8001e76:	f000 f86b 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f000 f875 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001e80:	2029      	movs	r0, #41	@ 0x29
 8001e82:	f000 f872 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001e86:	2024      	movs	r0, #36	@ 0x24
 8001e88:	f000 f86f 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001e8c:	200c      	movs	r0, #12
 8001e8e:	f000 f86c 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001e92:	200e      	movs	r0, #14
 8001e94:	f000 f869 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001e98:	2009      	movs	r0, #9
 8001e9a:	f000 f866 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001e9e:	204e      	movs	r0, #78	@ 0x4e
 8001ea0:	f000 f863 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001ea4:	2078      	movs	r0, #120	@ 0x78
 8001ea6:	f000 f860 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001eaa:	203c      	movs	r0, #60	@ 0x3c
 8001eac:	f000 f85d 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001eb0:	2009      	movs	r0, #9
 8001eb2:	f000 f85a 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001eb6:	2013      	movs	r0, #19
 8001eb8:	f000 f857 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001ebc:	2005      	movs	r0, #5
 8001ebe:	f000 f854 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001ec2:	2017      	movs	r0, #23
 8001ec4:	f000 f851 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f000 f84e 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f84b 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ed4:	20e1      	movs	r0, #225	@ 0xe1
 8001ed6:	f000 f83b 	bl	8001f50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f845 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001ee0:	2016      	movs	r0, #22
 8001ee2:	f000 f842 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ee6:	201b      	movs	r0, #27
 8001ee8:	f000 f83f 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001eec:	2004      	movs	r0, #4
 8001eee:	f000 f83c 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ef2:	2011      	movs	r0, #17
 8001ef4:	f000 f839 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001ef8:	2007      	movs	r0, #7
 8001efa:	f000 f836 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001efe:	2031      	movs	r0, #49	@ 0x31
 8001f00:	f000 f833 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001f04:	2033      	movs	r0, #51	@ 0x33
 8001f06:	f000 f830 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001f0a:	2042      	movs	r0, #66	@ 0x42
 8001f0c:	f000 f82d 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001f10:	2005      	movs	r0, #5
 8001f12:	f000 f82a 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001f16:	200c      	movs	r0, #12
 8001f18:	f000 f827 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	f000 f824 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001f22:	2028      	movs	r0, #40	@ 0x28
 8001f24:	f000 f821 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001f28:	202f      	movs	r0, #47	@ 0x2f
 8001f2a:	f000 f81e 	bl	8001f6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f000 f81b 	bl	8001f6a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001f34:	2011      	movs	r0, #17
 8001f36:	f000 f80b 	bl	8001f50 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f3a:	20c8      	movs	r0, #200	@ 0xc8
 8001f3c:	f000 f97c 	bl	8002238 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001f40:	2029      	movs	r0, #41	@ 0x29
 8001f42:	f000 f805 	bl	8001f50 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001f46:	202c      	movs	r0, #44	@ 0x2c
 8001f48:	f000 f802 	bl	8001f50 <ili9341_Write_Reg>
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f949 	bl	80021f4 <LCD_IO_WriteReg>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f91a 	bl	80021b0 <LCD_IO_WriteData>
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <SPI_Init+0x6c>)
 8001f8a:	f003 ffe0 	bl	8005f4e <HAL_SPI_GetState>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d12b      	bne.n	8001fec <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <SPI_Init+0x6c>)
 8001f96:	4a17      	ldr	r2, [pc, #92]	@ (8001ff4 <SPI_Init+0x70>)
 8001f98:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <SPI_Init+0x6c>)
 8001f9c:	2218      	movs	r2, #24
 8001f9e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fba:	2207      	movs	r2, #7
 8001fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fda:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fde:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001fe0:	4803      	ldr	r0, [pc, #12]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fe2:	f000 f833 	bl	800204c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001fe6:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <SPI_Init+0x6c>)
 8001fe8:	f003 fdbc 	bl	8005b64 <HAL_SPI_Init>
  }
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20025b8c 	.word	0x20025b8c
 8001ff4:	40015000 	.word	0x40015000

08001ff8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <SPI_Write+0x34>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1db9      	adds	r1, r7, #6
 800200c:	2201      	movs	r2, #1
 800200e:	4808      	ldr	r0, [pc, #32]	@ (8002030 <SPI_Write+0x38>)
 8002010:	f003 fe59 	bl	8005cc6 <HAL_SPI_Transmit>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800201e:	f000 f809 	bl	8002034 <SPI_Error>
  }
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000144 	.word	0x20000144
 8002030:	20025b8c 	.word	0x20025b8c

08002034 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002038:	4803      	ldr	r0, [pc, #12]	@ (8002048 <SPI_Error+0x14>)
 800203a:	f003 fe1c 	bl	8005c76 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800203e:	f7ff ffa1 	bl	8001f84 <SPI_Init>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20025b8c 	.word	0x20025b8c

0800204c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	@ 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <SPI_MspInit+0x6c>)
 800205a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205c:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <SPI_MspInit+0x6c>)
 800205e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002062:	6453      	str	r3, [r2, #68]	@ 0x44
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <SPI_MspInit+0x6c>)
 8002066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <SPI_MspInit+0x6c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	4a0f      	ldr	r2, [pc, #60]	@ (80020b8 <SPI_MspInit+0x6c>)
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002080:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <SPI_MspInit+0x6c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800208c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002096:	2302      	movs	r3, #2
 8002098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800209a:	2301      	movs	r3, #1
 800209c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800209e:	2305      	movs	r3, #5
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	4804      	ldr	r0, [pc, #16]	@ (80020bc <SPI_MspInit+0x70>)
 80020aa:	f001 f8fb 	bl	80032a4 <HAL_GPIO_Init>
}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	@ 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40021400 	.word	0x40021400

080020c0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80020c6:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <LCD_IO_Init+0xe0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d164      	bne.n	8002198 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80020ce:	4b34      	ldr	r3, [pc, #208]	@ (80021a0 <LCD_IO_Init+0xe0>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <LCD_IO_Init+0xe4>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	4a31      	ldr	r2, [pc, #196]	@ (80021a4 <LCD_IO_Init+0xe4>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e4:	4b2f      	ldr	r3, [pc, #188]	@ (80021a4 <LCD_IO_Init+0xe4>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80020f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020fe:	2302      	movs	r3, #2
 8002100:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	4619      	mov	r1, r3
 8002108:	4827      	ldr	r0, [pc, #156]	@ (80021a8 <LCD_IO_Init+0xe8>)
 800210a:	f001 f8cb 	bl	80032a4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <LCD_IO_Init+0xe4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <LCD_IO_Init+0xe4>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <LCD_IO_Init+0xe4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800212a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800212e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002138:	2302      	movs	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4619      	mov	r1, r3
 8002142:	4819      	ldr	r0, [pc, #100]	@ (80021a8 <LCD_IO_Init+0xe8>)
 8002144:	f001 f8ae 	bl	80032a4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <LCD_IO_Init+0xe4>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <LCD_IO_Init+0xe4>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6313      	str	r3, [r2, #48]	@ 0x30
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <LCD_IO_Init+0xe4>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002164:	2304      	movs	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002170:	2302      	movs	r3, #2
 8002172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4619      	mov	r1, r3
 800217a:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LCD_IO_Init+0xec>)
 800217c:	f001 f892 	bl	80032a4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002180:	2200      	movs	r2, #0
 8002182:	2104      	movs	r1, #4
 8002184:	4809      	ldr	r0, [pc, #36]	@ (80021ac <LCD_IO_Init+0xec>)
 8002186:	f001 fb45 	bl	8003814 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800218a:	2201      	movs	r2, #1
 800218c:	2104      	movs	r1, #4
 800218e:	4807      	ldr	r0, [pc, #28]	@ (80021ac <LCD_IO_Init+0xec>)
 8002190:	f001 fb40 	bl	8003814 <HAL_GPIO_WritePin>

    SPI_Init();
 8002194:	f7ff fef6 	bl	8001f84 <SPI_Init>
  }
}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20025be4 	.word	0x20025be4
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40020800 	.word	0x40020800

080021b0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c0:	480a      	ldr	r0, [pc, #40]	@ (80021ec <LCD_IO_WriteData+0x3c>)
 80021c2:	f001 fb27 	bl	8003814 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80021c6:	2200      	movs	r2, #0
 80021c8:	2104      	movs	r1, #4
 80021ca:	4809      	ldr	r0, [pc, #36]	@ (80021f0 <LCD_IO_WriteData+0x40>)
 80021cc:	f001 fb22 	bl	8003814 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff10 	bl	8001ff8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021d8:	2201      	movs	r2, #1
 80021da:	2104      	movs	r1, #4
 80021dc:	4804      	ldr	r0, [pc, #16]	@ (80021f0 <LCD_IO_WriteData+0x40>)
 80021de:	f001 fb19 	bl	8003814 <HAL_GPIO_WritePin>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40020800 	.word	0x40020800

080021f4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002204:	480a      	ldr	r0, [pc, #40]	@ (8002230 <LCD_IO_WriteReg+0x3c>)
 8002206:	f001 fb05 	bl	8003814 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800220a:	2200      	movs	r2, #0
 800220c:	2104      	movs	r1, #4
 800220e:	4809      	ldr	r0, [pc, #36]	@ (8002234 <LCD_IO_WriteReg+0x40>)
 8002210:	f001 fb00 	bl	8003814 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff feed 	bl	8001ff8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800221e:	2201      	movs	r2, #1
 8002220:	2104      	movs	r1, #4
 8002222:	4804      	ldr	r0, [pc, #16]	@ (8002234 <LCD_IO_WriteReg+0x40>)
 8002224:	f001 faf6 	bl	8003814 <HAL_GPIO_WritePin>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40020800 	.word	0x40020800

08002238 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 ff25 	bl	8003090 <HAL_Delay>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 8002254:	f004 fb74 	bl	8006940 <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002258:	f000 fea8 	bl	8002fac <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  SystemClockOverride();
 800225c:	f000 f848 	bl	80022f0 <SystemClockOverride>

  ApplicationInit();
 8002260:	f7fe f944 	bl	80004ec <ApplicationInit>

  // Orientation of the board: Top left is the x and y axis ORIGIN

  while (1)
	{
	  ApplicationGame();
 8002264:	f7fe f962 	bl	800052c <ApplicationGame>
	  if (getScheduledEvents() == START)
 8002268:	f7ff f87c 	bl	8001364 <getScheduledEvents>
 800226c:	4603      	mov	r3, r0
 800226e:	2b10      	cmp	r3, #16
 8002270:	d112      	bne.n	8002298 <main+0x48>
	   {
		   removeSchedulerEvent(START);
 8002272:	2010      	movs	r0, #16
 8002274:	f7ff f862 	bl	800133c <removeSchedulerEvent>
		   LCD_Clear(0,LCD_COLOR_BLACK);
 8002278:	2100      	movs	r1, #0
 800227a:	2000      	movs	r0, #0
 800227c:	f7fe fc1e 	bl	8000abc <LCD_Clear>
		   LCD_SetTextColor(LCD_COLOR_WHITE);
 8002280:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002284:	f7fe fc3c 	bl	8000b00 <LCD_SetTextColor>
		   LCD_SetFont(&Font12x12);
 8002288:	4818      	ldr	r0, [pc, #96]	@ (80022ec <main+0x9c>)
 800228a:	f7fe fc49 	bl	8000b20 <LCD_SetFont>
		   TIMER5_Start();
 800228e:	f7ff fd0b 	bl	8001ca8 <TIMER5_Start>
		   Start_Tetris();
 8002292:	f7ff f873 	bl	800137c <Start_Tetris>
 8002296:	e7e5      	b.n	8002264 <main+0x14>

	   }
	  else if(getScheduledEvents() == COUNT)
 8002298:	f7ff f864 	bl	8001364 <getScheduledEvents>
 800229c:	4603      	mov	r3, r0
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d107      	bne.n	80022b2 <main+0x62>
	  {
		  removeSchedulerEvent(COUNT);
 80022a2:	2008      	movs	r0, #8
 80022a4:	f7ff f84a 	bl	800133c <removeSchedulerEvent>
		  Move_Down();
 80022a8:	f7ff fb08 	bl	80018bc <Move_Down>
		  Check_Endgame();
 80022ac:	f7ff fb34 	bl	8001918 <Check_Endgame>
 80022b0:	e7d8      	b.n	8002264 <main+0x14>
	  }
	  else if(getScheduledEvents() == ROTATE_CC)
 80022b2:	f7ff f857 	bl	8001364 <getScheduledEvents>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d105      	bne.n	80022c8 <main+0x78>
	  {
		  removeSchedulerEvent(ROTATE_CC);
 80022bc:	2004      	movs	r0, #4
 80022be:	f7ff f83d 	bl	800133c <removeSchedulerEvent>
		  Rotate_CC();
 80022c2:	f7ff f97d 	bl	80015c0 <Rotate_CC>
 80022c6:	e7cd      	b.n	8002264 <main+0x14>
	  }
	  else if(getScheduledEvents() == SHIFT_L)
 80022c8:	f7ff f84c 	bl	8001364 <getScheduledEvents>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d103      	bne.n	80022da <main+0x8a>
	  {
		  removeSchedulerEvent(SHIFT_L);
 80022d2:	2002      	movs	r0, #2
 80022d4:	f7ff f832 	bl	800133c <removeSchedulerEvent>
 80022d8:	e7c4      	b.n	8002264 <main+0x14>
		  //Move_Left();

	  }
	  else if(getScheduledEvents() == SHIFT_R)
 80022da:	f7ff f843 	bl	8001364 <getScheduledEvents>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d1bf      	bne.n	8002264 <main+0x14>
	  {
		  removeSchedulerEvent(SHIFT_R);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7ff f829 	bl	800133c <removeSchedulerEvent>
	  ApplicationGame();
 80022ea:	e7bb      	b.n	8002264 <main+0x14>
 80022ec:	2000013c 	.word	0x2000013c

080022f0 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b092      	sub	sp, #72	@ 0x48
 80022f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <SystemClockOverride+0x7c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	4a1b      	ldr	r2, [pc, #108]	@ (800236c <SystemClockOverride+0x7c>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	@ 0x40
 8002306:	4b19      	ldr	r3, [pc, #100]	@ (800236c <SystemClockOverride+0x7c>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002312:	2301      	movs	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800231a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231c:	2302      	movs	r3, #2
 800231e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002320:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002324:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002326:	2308      	movs	r3, #8
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800232a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002330:	2302      	movs	r3, #2
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002334:	2307      	movs	r3, #7
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fd4e 	bl	8004ddc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002340:	230f      	movs	r3, #15
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002344:	2302      	movs	r3, #2
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002350:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002356:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002358:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800235c:	2105      	movs	r1, #5
 800235e:	4618      	mov	r0, r3
 8002360:	f002 ffb4 	bl	80052cc <HAL_RCC_ClockConfig>
}
 8002364:	bf00      	nop
 8002366:	3748      	adds	r7, #72	@ 0x48
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */



  __disable_irq();
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <Error_Handler+0x8>

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <HAL_MspInit+0x4c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	4a0f      	ldr	r2, [pc, #60]	@ (80023c8 <HAL_MspInit+0x4c>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002390:	6453      	str	r3, [r2, #68]	@ 0x44
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <HAL_MspInit+0x4c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <HAL_MspInit+0x4c>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	4a08      	ldr	r2, [pc, #32]	@ (80023c8 <HAL_MspInit+0x4c>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_MspInit+0x4c>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023ba:	2007      	movs	r0, #7
 80023bc:	f000 ff3e 	bl	800323c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a29      	ldr	r2, [pc, #164]	@ (8002490 <HAL_I2C_MspInit+0xc4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d14b      	bne.n	8002486 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b28      	ldr	r3, [pc, #160]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	4a27      	ldr	r2, [pc, #156]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fe:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b21      	ldr	r3, [pc, #132]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a20      	ldr	r2, [pc, #128]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242c:	2312      	movs	r3, #18
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002438:	2304      	movs	r3, #4
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4815      	ldr	r0, [pc, #84]	@ (8002498 <HAL_I2C_MspInit+0xcc>)
 8002444:	f000 ff2e 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244e:	2312      	movs	r3, #18
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800245a:	2304      	movs	r3, #4
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	480d      	ldr	r0, [pc, #52]	@ (800249c <HAL_I2C_MspInit+0xd0>)
 8002466:	f000 ff1d 	bl	80032a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	4a08      	ldr	r2, [pc, #32]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 8002474:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002478:	6413      	str	r3, [r2, #64]	@ 0x40
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_I2C_MspInit+0xc8>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	@ 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40005c00 	.word	0x40005c00
 8002494:	40023800 	.word	0x40023800
 8002498:	40020800 	.word	0x40020800
 800249c:	40020000 	.word	0x40020000

080024a0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b09a      	sub	sp, #104	@ 0x68
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024bc:	2230      	movs	r2, #48	@ 0x30
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 fbbb 	bl	8006c3c <memset>
  if(hltdc->Instance==LTDC)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a81      	ldr	r2, [pc, #516]	@ (80026d0 <HAL_LTDC_MspInit+0x230>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	f040 80fa 	bne.w	80026c6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024d2:	2308      	movs	r3, #8
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80024d6:	2332      	movs	r3, #50	@ 0x32
 80024d8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80024da:	2302      	movs	r3, #2
 80024dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80024de:	2300      	movs	r3, #0
 80024e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 f8fc 	bl	80056e4 <HAL_RCCEx_PeriphCLKConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80024f2:	f7ff ff3d 	bl	8002370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	4b76      	ldr	r3, [pc, #472]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	4a75      	ldr	r2, [pc, #468]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002500:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002504:	6453      	str	r3, [r2, #68]	@ 0x44
 8002506:	4b73      	ldr	r3, [pc, #460]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	4b6f      	ldr	r3, [pc, #444]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a6e      	ldr	r2, [pc, #440]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b6c      	ldr	r3, [pc, #432]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	4b68      	ldr	r3, [pc, #416]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	4a67      	ldr	r2, [pc, #412]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	@ 0x30
 800253e:	4b65      	ldr	r3, [pc, #404]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	4b61      	ldr	r3, [pc, #388]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a60      	ldr	r2, [pc, #384]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b5e      	ldr	r3, [pc, #376]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b5a      	ldr	r3, [pc, #360]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4a59      	ldr	r2, [pc, #356]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002574:	6313      	str	r3, [r2, #48]	@ 0x30
 8002576:	4b57      	ldr	r3, [pc, #348]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b53      	ldr	r3, [pc, #332]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6313      	str	r3, [r2, #48]	@ 0x30
 8002592:	4b50      	ldr	r3, [pc, #320]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b4c      	ldr	r3, [pc, #304]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4a4b      	ldr	r2, [pc, #300]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4b49      	ldr	r3, [pc, #292]	@ (80026d4 <HAL_LTDC_MspInit+0x234>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80025ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025be:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025cc:	230e      	movs	r3, #14
 80025ce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025d4:	4619      	mov	r1, r3
 80025d6:	4840      	ldr	r0, [pc, #256]	@ (80026d8 <HAL_LTDC_MspInit+0x238>)
 80025d8:	f000 fe64 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80025dc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80025e0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025ee:	230e      	movs	r3, #14
 80025f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025f6:	4619      	mov	r1, r3
 80025f8:	4838      	ldr	r0, [pc, #224]	@ (80026dc <HAL_LTDC_MspInit+0x23c>)
 80025fa:	f000 fe53 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80025fe:	2303      	movs	r3, #3
 8002600:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800260e:	2309      	movs	r3, #9
 8002610:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002616:	4619      	mov	r1, r3
 8002618:	4831      	ldr	r0, [pc, #196]	@ (80026e0 <HAL_LTDC_MspInit+0x240>)
 800261a:	f000 fe43 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800261e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002622:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002630:	230e      	movs	r3, #14
 8002632:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002638:	4619      	mov	r1, r3
 800263a:	4829      	ldr	r0, [pc, #164]	@ (80026e0 <HAL_LTDC_MspInit+0x240>)
 800263c:	f000 fe32 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002640:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002644:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002652:	230e      	movs	r3, #14
 8002654:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002656:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800265a:	4619      	mov	r1, r3
 800265c:	4821      	ldr	r0, [pc, #132]	@ (80026e4 <HAL_LTDC_MspInit+0x244>)
 800265e:	f000 fe21 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002662:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002666:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002674:	230e      	movs	r3, #14
 8002676:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800267c:	4619      	mov	r1, r3
 800267e:	481a      	ldr	r0, [pc, #104]	@ (80026e8 <HAL_LTDC_MspInit+0x248>)
 8002680:	f000 fe10 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002684:	2348      	movs	r3, #72	@ 0x48
 8002686:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002694:	230e      	movs	r3, #14
 8002696:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002698:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800269c:	4619      	mov	r1, r3
 800269e:	4813      	ldr	r0, [pc, #76]	@ (80026ec <HAL_LTDC_MspInit+0x24c>)
 80026a0:	f000 fe00 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80026a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026b6:	2309      	movs	r3, #9
 80026b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026be:	4619      	mov	r1, r3
 80026c0:	4808      	ldr	r0, [pc, #32]	@ (80026e4 <HAL_LTDC_MspInit+0x244>)
 80026c2:	f000 fdef 	bl	80032a4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80026c6:	bf00      	nop
 80026c8:	3768      	adds	r7, #104	@ 0x68
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40016800 	.word	0x40016800
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020c00 	.word	0x40020c00

080026f0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	@ (800272c <HAL_RNG_MspInit+0x3c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10d      	bne.n	800271e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_RNG_MspInit+0x40>)
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	4a09      	ldr	r2, [pc, #36]	@ (8002730 <HAL_RNG_MspInit+0x40>)
 800270c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002710:	6353      	str	r3, [r2, #52]	@ 0x34
 8002712:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <HAL_RNG_MspInit+0x40>)
 8002714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	50060800 	.word	0x50060800
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <HAL_SPI_MspInit+0x84>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d12c      	bne.n	80027b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <HAL_SPI_MspInit+0x88>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	4a17      	ldr	r2, [pc, #92]	@ (80027bc <HAL_SPI_MspInit+0x88>)
 8002760:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002764:	6453      	str	r3, [r2, #68]	@ 0x44
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <HAL_SPI_MspInit+0x88>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_SPI_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	4a10      	ldr	r2, [pc, #64]	@ (80027bc <HAL_SPI_MspInit+0x88>)
 800277c:	f043 0320 	orr.w	r3, r3, #32
 8002780:	6313      	str	r3, [r2, #48]	@ 0x30
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <HAL_SPI_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800278e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027a0:	2305      	movs	r3, #5
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4805      	ldr	r0, [pc, #20]	@ (80027c0 <HAL_SPI_MspInit+0x8c>)
 80027ac:	f000 fd7a 	bl	80032a4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	@ 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40015000 	.word	0x40015000
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40021400 	.word	0x40021400

080027c4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <HAL_SPI_MspDeInit+0x30>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10a      	bne.n	80027ec <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_SPI_MspDeInit+0x34>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	4a07      	ldr	r2, [pc, #28]	@ (80027f8 <HAL_SPI_MspDeInit+0x34>)
 80027dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027e0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80027e2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80027e6:	4805      	ldr	r0, [pc, #20]	@ (80027fc <HAL_SPI_MspDeInit+0x38>)
 80027e8:	f000 ff08 	bl	80035fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40015000 	.word	0x40015000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40021400 	.word	0x40021400

08002800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_TIM_Base_MspInit+0x3c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10d      	bne.n	800282e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_TIM_Base_MspInit+0x40>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <HAL_TIM_Base_MspInit+0x40>)
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <HAL_TIM_Base_MspInit+0x40>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40000c00 	.word	0x40000c00
 8002840:	40023800 	.word	0x40023800

08002844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <NMI_Handler+0x4>

0800284c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <HardFault_Handler+0x4>

08002854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <MemManage_Handler+0x4>

0800285c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <BusFault_Handler+0x4>

08002864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <UsageFault_Handler+0x4>

0800286c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800289a:	f000 fbd9 	bl	8003050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80028a8:	f000 f9ce 	bl	8002c48 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80028ac:	f000 f98e 	bl	8002bcc <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80028b0:	2202      	movs	r2, #2
 80028b2:	2103      	movs	r1, #3
 80028b4:	2082      	movs	r0, #130	@ 0x82
 80028b6:	f000 fa1b 	bl	8002cf0 <I2C3_Write>
    HAL_Delay(5);
 80028ba:	2005      	movs	r0, #5
 80028bc:	f000 fbe8 	bl	8003090 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2103      	movs	r1, #3
 80028c4:	2082      	movs	r0, #130	@ 0x82
 80028c6:	f000 fa13 	bl	8002cf0 <I2C3_Write>
    HAL_Delay(2);
 80028ca:	2002      	movs	r0, #2
 80028cc:	f000 fbe0 	bl	8003090 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80028d0:	1cba      	adds	r2, r7, #2
 80028d2:	2302      	movs	r3, #2
 80028d4:	2100      	movs	r1, #0
 80028d6:	2082      	movs	r0, #130	@ 0x82
 80028d8:	f000 fa5a 	bl	8002d90 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	f640 0211 	movw	r2, #2065	@ 0x811
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d001      	beq.n	80028fc <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e075      	b.n	80029e8 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80028fc:	2202      	movs	r2, #2
 80028fe:	2103      	movs	r1, #3
 8002900:	2082      	movs	r0, #130	@ 0x82
 8002902:	f000 f9f5 	bl	8002cf0 <I2C3_Write>
    HAL_Delay(5);
 8002906:	2005      	movs	r0, #5
 8002908:	f000 fbc2 	bl	8003090 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800290c:	2200      	movs	r2, #0
 800290e:	2103      	movs	r1, #3
 8002910:	2082      	movs	r0, #130	@ 0x82
 8002912:	f000 f9ed 	bl	8002cf0 <I2C3_Write>
    HAL_Delay(2);
 8002916:	2002      	movs	r0, #2
 8002918:	f000 fbba 	bl	8003090 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800291c:	2004      	movs	r0, #4
 800291e:	f000 f867 	bl	80029f0 <STMPE811_Read>
 8002922:	4603      	mov	r3, r0
 8002924:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002926:	797b      	ldrb	r3, [r7, #5]
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800292e:	797b      	ldrb	r3, [r7, #5]
 8002930:	461a      	mov	r2, r3
 8002932:	2104      	movs	r1, #4
 8002934:	2082      	movs	r0, #130	@ 0x82
 8002936:	f000 f9db 	bl	8002cf0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800293a:	2004      	movs	r0, #4
 800293c:	f000 f858 	bl	80029f0 <STMPE811_Read>
 8002940:	4603      	mov	r3, r0
 8002942:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002944:	797b      	ldrb	r3, [r7, #5]
 8002946:	f023 0302 	bic.w	r3, r3, #2
 800294a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800294c:	797b      	ldrb	r3, [r7, #5]
 800294e:	461a      	mov	r2, r3
 8002950:	2104      	movs	r1, #4
 8002952:	2082      	movs	r0, #130	@ 0x82
 8002954:	f000 f9cc 	bl	8002cf0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002958:	2249      	movs	r2, #73	@ 0x49
 800295a:	2120      	movs	r1, #32
 800295c:	2082      	movs	r0, #130	@ 0x82
 800295e:	f000 f9c7 	bl	8002cf0 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002962:	2002      	movs	r0, #2
 8002964:	f000 fb94 	bl	8003090 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002968:	2201      	movs	r2, #1
 800296a:	2121      	movs	r1, #33	@ 0x21
 800296c:	2082      	movs	r0, #130	@ 0x82
 800296e:	f000 f9bf 	bl	8002cf0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002972:	2017      	movs	r0, #23
 8002974:	f000 f83c 	bl	80029f0 <STMPE811_Read>
 8002978:	4603      	mov	r3, r0
 800297a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800297c:	797b      	ldrb	r3, [r7, #5]
 800297e:	f043 031e 	orr.w	r3, r3, #30
 8002982:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002984:	797b      	ldrb	r3, [r7, #5]
 8002986:	461a      	mov	r2, r3
 8002988:	2117      	movs	r1, #23
 800298a:	2082      	movs	r0, #130	@ 0x82
 800298c:	f000 f9b0 	bl	8002cf0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002990:	229a      	movs	r2, #154	@ 0x9a
 8002992:	2141      	movs	r1, #65	@ 0x41
 8002994:	2082      	movs	r0, #130	@ 0x82
 8002996:	f000 f9ab 	bl	8002cf0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800299a:	2201      	movs	r2, #1
 800299c:	214a      	movs	r1, #74	@ 0x4a
 800299e:	2082      	movs	r0, #130	@ 0x82
 80029a0:	f000 f9a6 	bl	8002cf0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80029a4:	2201      	movs	r2, #1
 80029a6:	214b      	movs	r1, #75	@ 0x4b
 80029a8:	2082      	movs	r0, #130	@ 0x82
 80029aa:	f000 f9a1 	bl	8002cf0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80029ae:	2200      	movs	r2, #0
 80029b0:	214b      	movs	r1, #75	@ 0x4b
 80029b2:	2082      	movs	r0, #130	@ 0x82
 80029b4:	f000 f99c 	bl	8002cf0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80029b8:	2201      	movs	r2, #1
 80029ba:	2156      	movs	r1, #86	@ 0x56
 80029bc:	2082      	movs	r0, #130	@ 0x82
 80029be:	f000 f997 	bl	8002cf0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80029c2:	2201      	movs	r2, #1
 80029c4:	2158      	movs	r1, #88	@ 0x58
 80029c6:	2082      	movs	r0, #130	@ 0x82
 80029c8:	f000 f992 	bl	8002cf0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80029cc:	2203      	movs	r2, #3
 80029ce:	2140      	movs	r1, #64	@ 0x40
 80029d0:	2082      	movs	r0, #130	@ 0x82
 80029d2:	f000 f98d 	bl	8002cf0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80029d6:	22ff      	movs	r2, #255	@ 0xff
 80029d8:	210b      	movs	r1, #11
 80029da:	2082      	movs	r0, #130	@ 0x82
 80029dc:	f000 f988 	bl	8002cf0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80029e0:	20c8      	movs	r0, #200	@ 0xc8
 80029e2:	f000 fb55 	bl	8003090 <HAL_Delay>

    return STMPE811_State_Ok;
 80029e6:	2302      	movs	r3, #2

}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80029fa:	f107 020f 	add.w	r2, r7, #15
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	4619      	mov	r1, r3
 8002a02:	2082      	movs	r0, #130	@ 0x82
 8002a04:	f000 f99e 	bl	8002d44 <I2C3_Read>

    return readData;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	791a      	ldrb	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002a22:	2040      	movs	r0, #64	@ 0x40
 8002a24:	f7ff ffe4 	bl	80029f0 <STMPE811_Read>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0e      	blt.n	8002a52 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	214b      	movs	r1, #75	@ 0x4b
 8002a3e:	2082      	movs	r0, #130	@ 0x82
 8002a40:	f000 f956 	bl	8002cf0 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a44:	2200      	movs	r2, #0
 8002a46:	214b      	movs	r1, #75	@ 0x4b
 8002a48:	2082      	movs	r0, #130	@ 0x82
 8002a4a:	f000 f951 	bl	8002cf0 <I2C3_Write>

        return STMPE811_State_Released;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0a7      	b.n	8002ba2 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	799b      	ldrb	r3, [r3, #6]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d117      	bne.n	8002a8a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f9b8 	bl	8002dd4 <TM_STMPE811_ReadX>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	885b      	ldrh	r3, [r3, #2]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fa0b 	bl	8002e90 <TM_STMPE811_ReadY>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002a80:	3301      	adds	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	805a      	strh	r2, [r3, #2]
 8002a88:	e048      	b.n	8002b1c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	799b      	ldrb	r3, [r3, #6]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d112      	bne.n	8002ab8 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f99c 	bl	8002dd4 <TM_STMPE811_ReadX>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	885b      	ldrh	r3, [r3, #2]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f9f1 	bl	8002e90 <TM_STMPE811_ReadY>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	805a      	strh	r2, [r3, #2]
 8002ab6:	e031      	b.n	8002b1c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	799b      	ldrb	r3, [r3, #6]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d115      	bne.n	8002aec <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	885b      	ldrh	r3, [r3, #2]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f985 	bl	8002dd4 <TM_STMPE811_ReadX>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f9da 	bl	8002e90 <TM_STMPE811_ReadY>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e017      	b.n	8002b1c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	799b      	ldrb	r3, [r3, #6]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d113      	bne.n	8002b1c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f96b 	bl	8002dd4 <TM_STMPE811_ReadX>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f9be 	bl	8002e90 <TM_STMPE811_ReadY>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	214b      	movs	r1, #75	@ 0x4b
 8002b20:	2082      	movs	r0, #130	@ 0x82
 8002b22:	f000 f8e5 	bl	8002cf0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002b26:	2200      	movs	r2, #0
 8002b28:	214b      	movs	r1, #75	@ 0x4b
 8002b2a:	2082      	movs	r0, #130	@ 0x82
 8002b2c:	f000 f8e0 	bl	8002cf0 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	799b      	ldrb	r3, [r3, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <STMPE811_ReadTouch+0x12e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	799b      	ldrb	r3, [r3, #6]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d115      	bne.n	8002b6c <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d027      	beq.n	8002b98 <STMPE811_ReadTouch+0x186>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	2bee      	cmp	r3, #238	@ 0xee
 8002b4e:	d823      	bhi.n	8002b98 <STMPE811_ReadTouch+0x186>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	885b      	ldrh	r3, [r3, #2]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01f      	beq.n	8002b98 <STMPE811_ReadTouch+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	885b      	ldrh	r3, [r3, #2]
 8002b5c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002b60:	d81a      	bhi.n	8002b98 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e01a      	b.n	8002ba2 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <STMPE811_ReadTouch+0x188>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002b7c:	d80d      	bhi.n	8002b9a <STMPE811_ReadTouch+0x188>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	885b      	ldrh	r3, [r3, #2]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <STMPE811_ReadTouch+0x188>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	885b      	ldrh	r3, [r3, #2]
 8002b8a:	2bee      	cmp	r3, #238	@ 0xee
 8002b8c:	d805      	bhi.n	8002b9a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e004      	b.n	8002ba2 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002b98:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20025c3c 	.word	0x20025c3c

08002bcc <I2C3_Init>:

static void I2C3_Init()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <I2C3_Init+0x6c>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a17      	ldr	r2, [pc, #92]	@ (8002c38 <I2C3_Init+0x6c>)
 8002bdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <I2C3_Init+0x6c>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002bee:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <I2C3_Init+0x70>)
 8002bf0:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <I2C3_Init+0x74>)
 8002bf2:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <I2C3_Init+0x70>)
 8002bf6:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <I2C3_Init+0x78>)
 8002bf8:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bfa:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <I2C3_Init+0x70>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002c00:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <I2C3_Init+0x70>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <I2C3_Init+0x70>)
 8002c08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c0c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <I2C3_Init+0x70>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c14:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <I2C3_Init+0x70>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002c1a:	4808      	ldr	r0, [pc, #32]	@ (8002c3c <I2C3_Init+0x70>)
 8002c1c:	f000 fe14 	bl	8003848 <HAL_I2C_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <I2C3_Init+0x5e>
    }
    return;
 8002c2e:	bf00      	nop
}
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	20025be8 	.word	0x20025be8
 8002c40:	40005c00 	.word	0x40005c00
 8002c44:	000186a0 	.word	0x000186a0

08002c48 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <I2C3_MspInit+0x9c>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce4 <I2C3_MspInit+0x9c>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <I2C3_MspInit+0x9c>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <I2C3_MspInit+0x9c>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a18      	ldr	r2, [pc, #96]	@ (8002ce4 <I2C3_MspInit+0x9c>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <I2C3_MspInit+0x9c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002c96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9c:	2312      	movs	r3, #18
 8002c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	480d      	ldr	r0, [pc, #52]	@ (8002ce8 <I2C3_MspInit+0xa0>)
 8002cb4:	f000 faf6 	bl	80032a4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbe:	2312      	movs	r3, #18
 8002cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cca:	2304      	movs	r3, #4
 8002ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	@ (8002cec <I2C3_MspInit+0xa4>)
 8002cd6:	f000 fae5 	bl	80032a4 <HAL_GPIO_Init>
    
}
 8002cda:	bf00      	nop
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020000 	.word	0x40020000

08002cf0 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	717b      	strb	r3, [r7, #5]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002d02:	793b      	ldrb	r3, [r7, #4]
 8002d04:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d06:	797b      	ldrb	r3, [r7, #5]
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	88f9      	ldrh	r1, [r7, #6]
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <I2C3_Write+0x48>)
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	2301      	movs	r3, #1
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	f107 030f 	add.w	r3, r7, #15
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4807      	ldr	r0, [pc, #28]	@ (8002d3c <I2C3_Write+0x4c>)
 8002d1e:	f000 fed7 	bl	8003ad0 <HAL_I2C_Mem_Write>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <I2C3_Write+0x50>)
 8002d28:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002d2a:	f7ff ff3f 	bl	8002bac <verifyHAL_I2C_IS_OKAY>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	0003d090 	.word	0x0003d090
 8002d3c:	20025be8 	.word	0x20025be8
 8002d40:	20025c3c 	.word	0x20025c3c

08002d44 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af04      	add	r7, sp, #16
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	603a      	str	r2, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	460b      	mov	r3, r1
 8002d52:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	b299      	uxth	r1, r3
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <I2C3_Read+0x40>)
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	2301      	movs	r3, #1
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	4807      	ldr	r0, [pc, #28]	@ (8002d88 <I2C3_Read+0x44>)
 8002d6c:	f000 ffaa 	bl	8003cc4 <HAL_I2C_Mem_Read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <I2C3_Read+0x48>)
 8002d76:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002d78:	f7ff ff18 	bl	8002bac <verifyHAL_I2C_IS_OKAY>
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	0003d090 	.word	0x0003d090
 8002d88:	20025be8 	.word	0x20025be8
 8002d8c:	20025c3c 	.word	0x20025c3c

08002d90 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af04      	add	r7, sp, #16
 8002d96:	603a      	str	r2, [r7, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	71bb      	strb	r3, [r7, #6]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	b299      	uxth	r1, r3
 8002daa:	79bb      	ldrb	r3, [r7, #6]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <I2C3_MulitByteRead+0x3c>)
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	88bb      	ldrh	r3, [r7, #4]
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4804      	ldr	r0, [pc, #16]	@ (8002dd0 <I2C3_MulitByteRead+0x40>)
 8002dbe:	f000 ff81 	bl	8003cc4 <HAL_I2C_Mem_Read>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	0003d090 	.word	0x0003d090
 8002dd0:	20025be8 	.word	0x20025be8

08002dd4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002dde:	204d      	movs	r0, #77	@ 0x4d
 8002de0:	f7ff fe06 	bl	80029f0 <STMPE811_Read>
 8002de4:	4603      	mov	r3, r0
 8002de6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002de8:	204e      	movs	r0, #78	@ 0x4e
 8002dea:	f7ff fe01 	bl	80029f0 <STMPE811_Read>
 8002dee:	4603      	mov	r3, r0
 8002df0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002df2:	7a7b      	ldrb	r3, [r7, #9]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	b21a      	sxth	r2, r3
 8002df8:	7a3b      	ldrb	r3, [r7, #8]
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002e00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e04:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	dc06      	bgt.n	8002e1a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
 8002e0e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002e12:	330c      	adds	r3, #12
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	81fb      	strh	r3, [r7, #14]
 8002e18:	e005      	b.n	8002e26 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002e20:	3308      	adds	r3, #8
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e2a:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <TM_STMPE811_ReadX+0xb8>)
 8002e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e30:	441a      	add	r2, r3
 8002e32:	10d2      	asrs	r2, r2, #3
 8002e34:	17db      	asrs	r3, r3, #31
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e3e:	2bef      	cmp	r3, #239	@ 0xef
 8002e40:	dd02      	ble.n	8002e48 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002e42:	23ef      	movs	r3, #239	@ 0xef
 8002e44:	81fb      	strh	r3, [r7, #14]
 8002e46:	e005      	b.n	8002e54 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002e48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da01      	bge.n	8002e54 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002e54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	dd05      	ble.n	8002e6a <TM_STMPE811_ReadX+0x96>
 8002e5e:	89fa      	ldrh	r2, [r7, #14]
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	e004      	b.n	8002e74 <TM_STMPE811_ReadX+0xa0>
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002e76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	dd01      	ble.n	8002e82 <TM_STMPE811_ReadX+0xae>
        return val;
 8002e7e:	89fb      	ldrh	r3, [r7, #14]
 8002e80:	e000      	b.n	8002e84 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002e82:	88fb      	ldrh	r3, [r7, #6]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	88888889 	.word	0x88888889

08002e90 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002e9a:	204f      	movs	r0, #79	@ 0x4f
 8002e9c:	f7ff fda8 	bl	80029f0 <STMPE811_Read>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002ea4:	2050      	movs	r0, #80	@ 0x50
 8002ea6:	f7ff fda3 	bl	80029f0 <STMPE811_Read>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002eae:	7a7b      	ldrb	r3, [r7, #9]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	b21a      	sxth	r2, r3
 8002eb4:	7a3b      	ldrb	r3, [r7, #8]
 8002eb6:	b21b      	sxth	r3, r3
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002ebc:	89fb      	ldrh	r3, [r7, #14]
 8002ebe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eca:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <TM_STMPE811_ReadY+0xa0>)
 8002ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed0:	1052      	asrs	r2, r2, #1
 8002ed2:	17db      	asrs	r3, r3, #31
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	dc02      	bgt.n	8002ee6 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	81fb      	strh	r3, [r7, #14]
 8002ee4:	e007      	b.n	8002ef6 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002eee:	db02      	blt.n	8002ef6 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002ef0:	f240 133f 	movw	r3, #319	@ 0x13f
 8002ef4:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002ef6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	dd05      	ble.n	8002f0c <TM_STMPE811_ReadY+0x7c>
 8002f00:	89fa      	ldrh	r2, [r7, #14]
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	e004      	b.n	8002f16 <TM_STMPE811_ReadY+0x86>
 8002f0c:	89fb      	ldrh	r3, [r7, #14]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002f18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	dd01      	ble.n	8002f24 <TM_STMPE811_ReadY+0x94>
        return val;
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	e000      	b.n	8002f26 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002f24:	88fb      	ldrh	r3, [r7, #6]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2e8ba2e9 	.word	0x2e8ba2e9

08002f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <SystemInit+0x20>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	4a05      	ldr	r2, [pc, #20]	@ (8002f54 <SystemInit+0x20>)
 8002f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f5c:	f7ff ffea 	bl	8002f34 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f60:	480c      	ldr	r0, [pc, #48]	@ (8002f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f62:	490d      	ldr	r1, [pc, #52]	@ (8002f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f64:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f68:	e002      	b.n	8002f70 <LoopCopyDataInit>

08002f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f6e:	3304      	adds	r3, #4

08002f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f74:	d3f9      	bcc.n	8002f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f78:	4c0a      	ldr	r4, [pc, #40]	@ (8002fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f7c:	e001      	b.n	8002f82 <LoopFillZerobss>

08002f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f80:	3204      	adds	r2, #4

08002f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f84:	d3fb      	bcc.n	8002f7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f86:	f003 fe67 	bl	8006c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f8a:	f7ff f961 	bl	8002250 <main>
  bx  lr    
 8002f8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f98:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002f9c:	08008b18 	.word	0x08008b18
  ldr r2, =_sbss
 8002fa0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002fa4:	20025e38 	.word	0x20025e38

08002fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa8:	e7fe      	b.n	8002fa8 <ADC_IRQHandler>
	...

08002fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <HAL_Init+0x40>)
 8002fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <HAL_Init+0x40>)
 8002fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc8:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <HAL_Init+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a07      	ldr	r2, [pc, #28]	@ (8002fec <HAL_Init+0x40>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f000 f931 	bl	800323c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 f808 	bl	8002ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe0:	f7ff f9cc 	bl	800237c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00

08002ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff8:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_InitTick+0x54>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_InitTick+0x58>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003006:	fbb3 f3f1 	udiv	r3, r3, r1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f93b 	bl	800328a <HAL_SYSTICK_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e00e      	b.n	800303c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d80a      	bhi.n	800303a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800302c:	f000 f911 	bl	8003252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003030:	4a06      	ldr	r2, [pc, #24]	@ (800304c <HAL_InitTick+0x5c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000148 	.word	0x20000148
 8003048:	20000150 	.word	0x20000150
 800304c:	2000014c 	.word	0x2000014c

08003050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_IncTick+0x20>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_IncTick+0x24>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a04      	ldr	r2, [pc, #16]	@ (8003074 <HAL_IncTick+0x24>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000150 	.word	0x20000150
 8003074:	20025c40 	.word	0x20025c40

08003078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return uwTick;
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <HAL_GetTick+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20025c40 	.word	0x20025c40

08003090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff ffee 	bl	8003078 <HAL_GetTick>
 800309c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030a8:	d005      	beq.n	80030b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030aa:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <HAL_Delay+0x44>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030b6:	bf00      	nop
 80030b8:	f7ff ffde 	bl	8003078 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d8f7      	bhi.n	80030b8 <HAL_Delay+0x28>
  {
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000150 	.word	0x20000150

080030d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <__NVIC_SetPriorityGrouping+0x44>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030f4:	4013      	ands	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310a:	4a04      	ldr	r2, [pc, #16]	@ (800311c <__NVIC_SetPriorityGrouping+0x44>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60d3      	str	r3, [r2, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003124:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <__NVIC_GetPriorityGrouping+0x18>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0307 	and.w	r3, r3, #7
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	2b00      	cmp	r3, #0
 800314e:	db0a      	blt.n	8003166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	490c      	ldr	r1, [pc, #48]	@ (8003188 <__NVIC_SetPriority+0x4c>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	0112      	lsls	r2, r2, #4
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	440b      	add	r3, r1
 8003160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003164:	e00a      	b.n	800317c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4908      	ldr	r1, [pc, #32]	@ (800318c <__NVIC_SetPriority+0x50>)
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3b04      	subs	r3, #4
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	440b      	add	r3, r1
 800317a:	761a      	strb	r2, [r3, #24]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f1c3 0307 	rsb	r3, r3, #7
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	bf28      	it	cs
 80031ae:	2304      	movcs	r3, #4
 80031b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d902      	bls.n	80031c0 <NVIC_EncodePriority+0x30>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3b03      	subs	r3, #3
 80031be:	e000      	b.n	80031c2 <NVIC_EncodePriority+0x32>
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	401a      	ands	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43d9      	mvns	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	4313      	orrs	r3, r2
         );
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3724      	adds	r7, #36	@ 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003208:	d301      	bcc.n	800320e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <SysTick_Config+0x40>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003216:	210f      	movs	r1, #15
 8003218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800321c:	f7ff ff8e 	bl	800313c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <SysTick_Config+0x40>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003226:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <SysTick_Config+0x40>)
 8003228:	2207      	movs	r2, #7
 800322a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	e000e010 	.word	0xe000e010

0800323c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff47 	bl	80030d8 <__NVIC_SetPriorityGrouping>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003264:	f7ff ff5c 	bl	8003120 <__NVIC_GetPriorityGrouping>
 8003268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	6978      	ldr	r0, [r7, #20]
 8003270:	f7ff ff8e 	bl	8003190 <NVIC_EncodePriority>
 8003274:	4602      	mov	r2, r0
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff5d 	bl	800313c <__NVIC_SetPriority>
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffb0 	bl	80031f8 <SysTick_Config>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	@ 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e177      	b.n	80035b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f040 8166 	bne.w	80035aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d005      	beq.n	80032f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d130      	bne.n	8003358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0201 	and.w	r2, r3, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b03      	cmp	r3, #3
 8003362:	d017      	beq.n	8003394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d123      	bne.n	80033e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c0 	beq.w	80035aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b66      	ldr	r3, [pc, #408]	@ (80035c8 <HAL_GPIO_Init+0x324>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_GPIO_Init+0x324>)
 8003434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003438:	6453      	str	r3, [r2, #68]	@ 0x44
 800343a:	4b63      	ldr	r3, [pc, #396]	@ (80035c8 <HAL_GPIO_Init+0x324>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003446:	4a61      	ldr	r2, [pc, #388]	@ (80035cc <HAL_GPIO_Init+0x328>)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a58      	ldr	r2, [pc, #352]	@ (80035d0 <HAL_GPIO_Init+0x32c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d037      	beq.n	80034e2 <HAL_GPIO_Init+0x23e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a57      	ldr	r2, [pc, #348]	@ (80035d4 <HAL_GPIO_Init+0x330>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_GPIO_Init+0x23a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a56      	ldr	r2, [pc, #344]	@ (80035d8 <HAL_GPIO_Init+0x334>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d02b      	beq.n	80034da <HAL_GPIO_Init+0x236>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a55      	ldr	r2, [pc, #340]	@ (80035dc <HAL_GPIO_Init+0x338>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d025      	beq.n	80034d6 <HAL_GPIO_Init+0x232>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a54      	ldr	r2, [pc, #336]	@ (80035e0 <HAL_GPIO_Init+0x33c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01f      	beq.n	80034d2 <HAL_GPIO_Init+0x22e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a53      	ldr	r2, [pc, #332]	@ (80035e4 <HAL_GPIO_Init+0x340>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d019      	beq.n	80034ce <HAL_GPIO_Init+0x22a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a52      	ldr	r2, [pc, #328]	@ (80035e8 <HAL_GPIO_Init+0x344>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_GPIO_Init+0x226>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a51      	ldr	r2, [pc, #324]	@ (80035ec <HAL_GPIO_Init+0x348>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00d      	beq.n	80034c6 <HAL_GPIO_Init+0x222>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a50      	ldr	r2, [pc, #320]	@ (80035f0 <HAL_GPIO_Init+0x34c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d007      	beq.n	80034c2 <HAL_GPIO_Init+0x21e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4f      	ldr	r2, [pc, #316]	@ (80035f4 <HAL_GPIO_Init+0x350>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_GPIO_Init+0x21a>
 80034ba:	2309      	movs	r3, #9
 80034bc:	e012      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034be:	230a      	movs	r3, #10
 80034c0:	e010      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034c2:	2308      	movs	r3, #8
 80034c4:	e00e      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034c6:	2307      	movs	r3, #7
 80034c8:	e00c      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034ca:	2306      	movs	r3, #6
 80034cc:	e00a      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034ce:	2305      	movs	r3, #5
 80034d0:	e008      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034d2:	2304      	movs	r3, #4
 80034d4:	e006      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034d6:	2303      	movs	r3, #3
 80034d8:	e004      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034da:	2302      	movs	r3, #2
 80034dc:	e002      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_GPIO_Init+0x240>
 80034e2:	2300      	movs	r3, #0
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	f002 0203 	and.w	r2, r2, #3
 80034ea:	0092      	lsls	r2, r2, #2
 80034ec:	4093      	lsls	r3, r2
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034f4:	4935      	ldr	r1, [pc, #212]	@ (80035cc <HAL_GPIO_Init+0x328>)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	3302      	adds	r3, #2
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003502:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003526:	4a34      	ldr	r2, [pc, #208]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800352c:	4b32      	ldr	r3, [pc, #200]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003550:	4a29      	ldr	r2, [pc, #164]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003556:	4b28      	ldr	r3, [pc, #160]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800357a:	4a1f      	ldr	r2, [pc, #124]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003580:	4b1d      	ldr	r3, [pc, #116]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a4:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <HAL_GPIO_Init+0x354>)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3301      	adds	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b0f      	cmp	r3, #15
 80035b4:	f67f ae84 	bls.w	80032c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	3724      	adds	r7, #36	@ 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40013800 	.word	0x40013800
 80035d0:	40020000 	.word	0x40020000
 80035d4:	40020400 	.word	0x40020400
 80035d8:	40020800 	.word	0x40020800
 80035dc:	40020c00 	.word	0x40020c00
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40021400 	.word	0x40021400
 80035e8:	40021800 	.word	0x40021800
 80035ec:	40021c00 	.word	0x40021c00
 80035f0:	40022000 	.word	0x40022000
 80035f4:	40022400 	.word	0x40022400
 80035f8:	40013c00 	.word	0x40013c00

080035fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e0d9      	b.n	80037cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003618:	2201      	movs	r2, #1
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	429a      	cmp	r2, r3
 8003630:	f040 80c9 	bne.w	80037c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003634:	4a6b      	ldr	r2, [pc, #428]	@ (80037e4 <HAL_GPIO_DeInit+0x1e8>)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003640:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	220f      	movs	r2, #15
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a63      	ldr	r2, [pc, #396]	@ (80037e8 <HAL_GPIO_DeInit+0x1ec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d037      	beq.n	80036ce <HAL_GPIO_DeInit+0xd2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a62      	ldr	r2, [pc, #392]	@ (80037ec <HAL_GPIO_DeInit+0x1f0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d031      	beq.n	80036ca <HAL_GPIO_DeInit+0xce>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a61      	ldr	r2, [pc, #388]	@ (80037f0 <HAL_GPIO_DeInit+0x1f4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d02b      	beq.n	80036c6 <HAL_GPIO_DeInit+0xca>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a60      	ldr	r2, [pc, #384]	@ (80037f4 <HAL_GPIO_DeInit+0x1f8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d025      	beq.n	80036c2 <HAL_GPIO_DeInit+0xc6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a5f      	ldr	r2, [pc, #380]	@ (80037f8 <HAL_GPIO_DeInit+0x1fc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01f      	beq.n	80036be <HAL_GPIO_DeInit+0xc2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a5e      	ldr	r2, [pc, #376]	@ (80037fc <HAL_GPIO_DeInit+0x200>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d019      	beq.n	80036ba <HAL_GPIO_DeInit+0xbe>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a5d      	ldr	r2, [pc, #372]	@ (8003800 <HAL_GPIO_DeInit+0x204>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_GPIO_DeInit+0xba>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a5c      	ldr	r2, [pc, #368]	@ (8003804 <HAL_GPIO_DeInit+0x208>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00d      	beq.n	80036b2 <HAL_GPIO_DeInit+0xb6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a5b      	ldr	r2, [pc, #364]	@ (8003808 <HAL_GPIO_DeInit+0x20c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <HAL_GPIO_DeInit+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a5a      	ldr	r2, [pc, #360]	@ (800380c <HAL_GPIO_DeInit+0x210>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_GPIO_DeInit+0xae>
 80036a6:	2309      	movs	r3, #9
 80036a8:	e012      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036aa:	230a      	movs	r3, #10
 80036ac:	e010      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036ae:	2308      	movs	r3, #8
 80036b0:	e00e      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036b2:	2307      	movs	r3, #7
 80036b4:	e00c      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036b6:	2306      	movs	r3, #6
 80036b8:	e00a      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036ba:	2305      	movs	r3, #5
 80036bc:	e008      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036be:	2304      	movs	r3, #4
 80036c0:	e006      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036c2:	2303      	movs	r3, #3
 80036c4:	e004      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e002      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_GPIO_DeInit+0xd4>
 80036ce:	2300      	movs	r3, #0
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	f002 0203 	and.w	r2, r2, #3
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	4093      	lsls	r3, r2
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d132      	bne.n	8003746 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	4949      	ldr	r1, [pc, #292]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80036ee:	4b48      	ldr	r3, [pc, #288]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	4946      	ldr	r1, [pc, #280]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80036fc:	4b44      	ldr	r3, [pc, #272]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43db      	mvns	r3, r3
 8003704:	4942      	ldr	r1, [pc, #264]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 8003706:	4013      	ands	r3, r2
 8003708:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800370a:	4b41      	ldr	r3, [pc, #260]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	493f      	ldr	r1, [pc, #252]	@ (8003810 <HAL_GPIO_DeInit+0x214>)
 8003714:	4013      	ands	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	220f      	movs	r2, #15
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003728:	4a2e      	ldr	r2, [pc, #184]	@ (80037e4 <HAL_GPIO_DeInit+0x1e8>)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	43da      	mvns	r2, r3
 8003738:	482a      	ldr	r0, [pc, #168]	@ (80037e4 <HAL_GPIO_DeInit+0x1e8>)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	400a      	ands	r2, r1
 8003740:	3302      	adds	r3, #2
 8003742:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2103      	movs	r1, #3
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	08d2      	lsrs	r2, r2, #3
 800377c:	4019      	ands	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2103      	movs	r1, #3
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	401a      	ands	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	2101      	movs	r1, #1
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2103      	movs	r1, #3
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	f67f af22 	bls.w	8003618 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40020800 	.word	0x40020800
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40021400 	.word	0x40021400
 8003800:	40021800 	.word	0x40021800
 8003804:	40021c00 	.word	0x40021c00
 8003808:	40022000 	.word	0x40022000
 800380c:	40022400 	.word	0x40022400
 8003810:	40013c00 	.word	0x40013c00

08003814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
 8003820:	4613      	mov	r3, r2
 8003822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003824:	787b      	ldrb	r3, [r7, #1]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003830:	e003      	b.n	800383a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003832:	887b      	ldrh	r3, [r7, #2]
 8003834:	041a      	lsls	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	619a      	str	r2, [r3, #24]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e12b      	b.n	8003ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fe fdac 	bl	80023cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038ac:	f001 ff06 	bl	80056bc <HAL_RCC_GetPCLK1Freq>
 80038b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4a81      	ldr	r2, [pc, #516]	@ (8003abc <HAL_I2C_Init+0x274>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d807      	bhi.n	80038cc <HAL_I2C_Init+0x84>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a80      	ldr	r2, [pc, #512]	@ (8003ac0 <HAL_I2C_Init+0x278>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	bf94      	ite	ls
 80038c4:	2301      	movls	r3, #1
 80038c6:	2300      	movhi	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e006      	b.n	80038da <HAL_I2C_Init+0x92>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac4 <HAL_I2C_Init+0x27c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bf94      	ite	ls
 80038d4:	2301      	movls	r3, #1
 80038d6:	2300      	movhi	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0e7      	b.n	8003ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a78      	ldr	r2, [pc, #480]	@ (8003ac8 <HAL_I2C_Init+0x280>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a6a      	ldr	r2, [pc, #424]	@ (8003abc <HAL_I2C_Init+0x274>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d802      	bhi.n	800391c <HAL_I2C_Init+0xd4>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3301      	adds	r3, #1
 800391a:	e009      	b.n	8003930 <HAL_I2C_Init+0xe8>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	4a69      	ldr	r2, [pc, #420]	@ (8003acc <HAL_I2C_Init+0x284>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	3301      	adds	r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	430b      	orrs	r3, r1
 8003936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003942:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	495c      	ldr	r1, [pc, #368]	@ (8003abc <HAL_I2C_Init+0x274>)
 800394c:	428b      	cmp	r3, r1
 800394e:	d819      	bhi.n	8003984 <HAL_I2C_Init+0x13c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e59      	subs	r1, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fbb1 f3f3 	udiv	r3, r1, r3
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003964:	400b      	ands	r3, r1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_I2C_Init+0x138>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1e59      	subs	r1, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fbb1 f3f3 	udiv	r3, r1, r3
 8003978:	3301      	adds	r3, #1
 800397a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397e:	e051      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003980:	2304      	movs	r3, #4
 8003982:	e04f      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d111      	bne.n	80039b0 <HAL_I2C_Init+0x168>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e012      	b.n	80039d6 <HAL_I2C_Init+0x18e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	0099      	lsls	r1, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c6:	3301      	adds	r3, #1
 80039c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Init+0x196>
 80039da:	2301      	movs	r3, #1
 80039dc:	e022      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <HAL_I2C_Init+0x1bc>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e58      	subs	r0, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	440b      	add	r3, r1
 80039f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a02:	e00f      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	0099      	lsls	r1, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	6809      	ldr	r1, [r1, #0]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6911      	ldr	r1, [r2, #16]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	000186a0 	.word	0x000186a0
 8003ac0:	001e847f 	.word	0x001e847f
 8003ac4:	003d08ff 	.word	0x003d08ff
 8003ac8:	431bde83 	.word	0x431bde83
 8003acc:	10624dd3 	.word	0x10624dd3

08003ad0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aea:	f7ff fac5 	bl	8003078 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	f040 80d9 	bne.w	8003cb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2319      	movs	r3, #25
 8003b04:	2201      	movs	r2, #1
 8003b06:	496d      	ldr	r1, [pc, #436]	@ (8003cbc <HAL_I2C_Mem_Write+0x1ec>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fc8b 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0cc      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_I2C_Mem_Write+0x56>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e0c5      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d007      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2221      	movs	r2, #33	@ 0x21
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2240      	movs	r2, #64	@ 0x40
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc0 <HAL_I2C_Mem_Write+0x1f0>)
 8003b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b8e:	88f8      	ldrh	r0, [r7, #6]
 8003b90:	893a      	ldrh	r2, [r7, #8]
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fac2 	bl	8004128 <I2C_RequestMemoryWrite>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d052      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e081      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fd50 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06b      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11b      	bne.n	8003c50 <HAL_I2C_Mem_Write+0x180>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d017      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1aa      	bne.n	8003bae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fd43 	bl	80046e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d107      	bne.n	8003c80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e016      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	00100002 	.word	0x00100002
 8003cc0:	ffff0000 	.word	0xffff0000

08003cc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	@ 0x30
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	813b      	strh	r3, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cde:	f7ff f9cb 	bl	8003078 <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	f040 8214 	bne.w	800411a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2319      	movs	r3, #25
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	497b      	ldr	r1, [pc, #492]	@ (8003ee8 <HAL_I2C_Mem_Read+0x224>)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fb91 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e207      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_Mem_Read+0x56>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e200      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d007      	beq.n	8003d40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2222      	movs	r2, #34	@ 0x22
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2240      	movs	r2, #64	@ 0x40
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003eec <HAL_I2C_Mem_Read+0x228>)
 8003d80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d82:	88f8      	ldrh	r0, [r7, #6]
 8003d84:	893a      	ldrh	r2, [r7, #8]
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	4603      	mov	r3, r0
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa5e 	bl	8004254 <I2C_RequestMemoryRead>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1bc      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d113      	bne.n	8003dd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e190      	b.n	80040f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d11b      	bne.n	8003e12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e170      	b.n	80040f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d11b      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	e150      	b.n	80040f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e68:	e144      	b.n	80040f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	f200 80f1 	bhi.w	8004056 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d123      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fc79 	bl	8004778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e145      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ec2:	e117      	b.n	80040f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d14e      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4906      	ldr	r1, [pc, #24]	@ (8003ef0 <HAL_I2C_Mem_Read+0x22c>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 faa4 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e11a      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
 8003ee6:	bf00      	nop
 8003ee8:	00100002 	.word	0x00100002
 8003eec:	ffff0000 	.word	0xffff0000
 8003ef0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f68:	e0c4      	b.n	80040f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f70:	2200      	movs	r2, #0
 8003f72:	496c      	ldr	r1, [pc, #432]	@ (8004124 <HAL_I2C_Mem_Read+0x460>)
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fa55 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0cb      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4955      	ldr	r1, [pc, #340]	@ (8004124 <HAL_I2C_Mem_Read+0x460>)
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fa27 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e09d      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004054:	e04e      	b.n	80040f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fb8c 	bl	8004778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e058      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d124      	bne.n	80040f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d107      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f aeb6 	bne.w	8003e6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3728      	adds	r7, #40	@ 0x28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	00010004 	.word	0x00010004

08004128 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	461a      	mov	r2, r3
 8004136:	4603      	mov	r3, r0
 8004138:	817b      	strh	r3, [r7, #10]
 800413a:	460b      	mov	r3, r1
 800413c:	813b      	strh	r3, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	2200      	movs	r2, #0
 800415a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f960 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004178:	d103      	bne.n	8004182 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e05f      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004194:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	492d      	ldr	r1, [pc, #180]	@ (8004250 <I2C_RequestMemoryWrite+0x128>)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f9bb 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e04c      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	6a39      	ldr	r1, [r7, #32]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa46 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d107      	bne.n	80041ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e02b      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f4:	893b      	ldrh	r3, [r7, #8]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	e021      	b.n	8004244 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004200:	893b      	ldrh	r3, [r7, #8]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	b29b      	uxth	r3, r3
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004210:	6a39      	ldr	r1, [r7, #32]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fa20 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	2b04      	cmp	r3, #4
 8004224:	d107      	bne.n	8004236 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004234:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e005      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800423a:	893b      	ldrh	r3, [r7, #8]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	00010002 	.word	0x00010002

08004254 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800427c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800428c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	2200      	movs	r2, #0
 8004296:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f8c2 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b4:	d103      	bne.n	80042be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0aa      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	4952      	ldr	r1, [pc, #328]	@ (8004420 <I2C_RequestMemoryRead+0x1cc>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f91d 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e097      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004300:	6a39      	ldr	r1, [r7, #32]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f9a8 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b04      	cmp	r3, #4
 8004314:	d107      	bne.n	8004326 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e076      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004330:	893b      	ldrh	r3, [r7, #8]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	e021      	b.n	8004380 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800433c:	893b      	ldrh	r3, [r7, #8]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	b29b      	uxth	r3, r3
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434c:	6a39      	ldr	r1, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f982 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2b04      	cmp	r3, #4
 8004360:	d107      	bne.n	8004372 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e050      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004376:	893b      	ldrh	r3, [r7, #8]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004382:	6a39      	ldr	r1, [r7, #32]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f967 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	2b04      	cmp	r3, #4
 8004396:	d107      	bne.n	80043a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e035      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f82b 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	d103      	bne.n	80043ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e013      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	4906      	ldr	r1, [pc, #24]	@ (8004420 <I2C_RequestMemoryRead+0x1cc>)
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f886 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	00010002 	.word	0x00010002

08004424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004434:	e048      	b.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800443c:	d044      	beq.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fe fe1b 	bl	8003078 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d139      	bne.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10d      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x56>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	43da      	mvns	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	e00c      	b.n	8004494 <I2C_WaitOnFlagUntilTimeout+0x70>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	43da      	mvns	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	429a      	cmp	r2, r3
 8004498:	d116      	bne.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e023      	b.n	8004510 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d10d      	bne.n	80044ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	43da      	mvns	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	e00c      	b.n	8004508 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	d093      	beq.n	8004436 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004526:	e071      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004536:	d123      	bne.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004546:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e067      	b.n	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004586:	d041      	beq.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fe fd76 	bl	8003078 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d136      	bne.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10c      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	e00b      	b.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	43da      	mvns	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e021      	b.n	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10c      	bne.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	43da      	mvns	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf14      	ite	ne
 8004628:	2301      	movne	r3, #1
 800462a:	2300      	moveq	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e00b      	b.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	43da      	mvns	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f af6d 	bne.w	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004664:	e034      	b.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8e3 	bl	8004832 <I2C_IsAcknowledgeFailed>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e034      	b.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800467c:	d028      	beq.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467e:	f7fe fcfb 	bl	8003078 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d11d      	bne.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	2b80      	cmp	r3, #128	@ 0x80
 80046a0:	d016      	beq.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e007      	b.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d1c3      	bne.n	8004666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f4:	e034      	b.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f89b 	bl	8004832 <I2C_IsAcknowledgeFailed>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e034      	b.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800470c:	d028      	beq.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fe fcb3 	bl	8003078 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11d      	bne.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d016      	beq.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e007      	b.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d1c3      	bne.n	80046f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004784:	e049      	b.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d119      	bne.n	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0210 	mvn.w	r2, #16
 800479c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e030      	b.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c8:	f7fe fc56 	bl	8003078 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d302      	bcc.n	80047de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11d      	bne.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d016      	beq.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e007      	b.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004824:	2b40      	cmp	r3, #64	@ 0x40
 8004826:	d1ae      	bne.n	8004786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004848:	d11b      	bne.n	8004882 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004852:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f043 0204 	orr.w	r2, r3, #4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e0bf      	b.n	8004a22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd fdf2 	bl	80024a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80048d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b4a      	ldr	r3, [pc, #296]	@ (8004a2c <HAL_LTDC_Init+0x19c>)
 8004904:	400b      	ands	r3, r1
 8004906:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6899      	ldr	r1, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68d9      	ldr	r1, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b3e      	ldr	r3, [pc, #248]	@ (8004a2c <HAL_LTDC_Init+0x19c>)
 8004932:	400b      	ands	r3, r1
 8004934:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	041b      	lsls	r3, r3, #16
 800493c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68d9      	ldr	r1, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6919      	ldr	r1, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b33      	ldr	r3, [pc, #204]	@ (8004a2c <HAL_LTDC_Init+0x19c>)
 8004960:	400b      	ands	r3, r1
 8004962:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6919      	ldr	r1, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6959      	ldr	r1, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b27      	ldr	r3, [pc, #156]	@ (8004a2c <HAL_LTDC_Init+0x19c>)
 800498e:	400b      	ands	r3, r1
 8004990:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6959      	ldr	r1, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0206 	orr.w	r2, r2, #6
 80049fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	f000f800 	.word	0xf000f800

08004a30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_LTDC_ConfigLayer+0x1a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e02c      	b.n	8004aa4 <HAL_LTDC_ConfigLayer+0x74>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2202      	movs	r2, #2
 8004a56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2134      	movs	r1, #52	@ 0x34
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	461d      	mov	r5, r3
 8004a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f811 	bl	8004aac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bdb0      	pop	{r4, r5, r7, pc}

08004aac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	@ 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac8:	4413      	add	r3, r2
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	01db      	lsls	r3, r3, #7
 8004ad8:	4413      	add	r3, r2
 8004ada:	3384      	adds	r3, #132	@ 0x84
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	01d2      	lsls	r2, r2, #7
 8004ae8:	440a      	add	r2, r1
 8004aea:	3284      	adds	r2, #132	@ 0x84
 8004aec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004af0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b02:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b04:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	01db      	lsls	r3, r3, #7
 8004b10:	440b      	add	r3, r1
 8004b12:	3384      	adds	r3, #132	@ 0x84
 8004b14:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b2a:	4413      	add	r3, r2
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	01db      	lsls	r3, r3, #7
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3384      	adds	r3, #132	@ 0x84
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	4611      	mov	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	01d2      	lsls	r2, r2, #7
 8004b4a:	440a      	add	r2, r1
 8004b4c:	3284      	adds	r2, #132	@ 0x84
 8004b4e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b62:	4413      	add	r3, r2
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	01db      	lsls	r3, r3, #7
 8004b70:	440b      	add	r3, r1
 8004b72:	3384      	adds	r3, #132	@ 0x84
 8004b74:	4619      	mov	r1, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	01db      	lsls	r3, r3, #7
 8004b86:	4413      	add	r3, r2
 8004b88:	3384      	adds	r3, #132	@ 0x84
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	4611      	mov	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	01d2      	lsls	r2, r2, #7
 8004b96:	440a      	add	r2, r1
 8004b98:	3284      	adds	r2, #132	@ 0x84
 8004b9a:	f023 0307 	bic.w	r3, r3, #7
 8004b9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	01db      	lsls	r3, r3, #7
 8004baa:	4413      	add	r3, r2
 8004bac:	3384      	adds	r3, #132	@ 0x84
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	01db      	lsls	r3, r3, #7
 8004bdc:	4413      	add	r3, r2
 8004bde:	3384      	adds	r3, #132	@ 0x84
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	01db      	lsls	r3, r3, #7
 8004bec:	4413      	add	r3, r2
 8004bee:	3384      	adds	r3, #132	@ 0x84
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	01db      	lsls	r3, r3, #7
 8004c10:	440b      	add	r3, r1
 8004c12:	3384      	adds	r3, #132	@ 0x84
 8004c14:	4619      	mov	r1, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	01db      	lsls	r3, r3, #7
 8004c26:	4413      	add	r3, r2
 8004c28:	3384      	adds	r3, #132	@ 0x84
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	4611      	mov	r1, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	01d2      	lsls	r2, r2, #7
 8004c36:	440a      	add	r2, r1
 8004c38:	3284      	adds	r2, #132	@ 0x84
 8004c3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c3e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	01db      	lsls	r3, r3, #7
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3384      	adds	r3, #132	@ 0x84
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	01db      	lsls	r3, r3, #7
 8004c60:	4413      	add	r3, r2
 8004c62:	3384      	adds	r3, #132	@ 0x84
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	01d2      	lsls	r2, r2, #7
 8004c70:	440a      	add	r2, r1
 8004c72:	3284      	adds	r2, #132	@ 0x84
 8004c74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c78:	f023 0307 	bic.w	r3, r3, #7
 8004c7c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	6809      	ldr	r1, [r1, #0]
 8004c8a:	4608      	mov	r0, r1
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	01c9      	lsls	r1, r1, #7
 8004c90:	4401      	add	r1, r0
 8004c92:	3184      	adds	r1, #132	@ 0x84
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	01db      	lsls	r3, r3, #7
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3384      	adds	r3, #132	@ 0x84
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	01db      	lsls	r3, r3, #7
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3384      	adds	r3, #132	@ 0x84
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	01db      	lsls	r3, r3, #7
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3384      	adds	r3, #132	@ 0x84
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004cda:	2304      	movs	r3, #4
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e01b      	b.n	8004d18 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d102      	bne.n	8004cee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e014      	b.n	8004d18 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d00b      	beq.n	8004d0e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d007      	beq.n	8004d0e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d003      	beq.n	8004d0e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d0a:	2b07      	cmp	r3, #7
 8004d0c:	d102      	bne.n	8004d14 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e001      	b.n	8004d18 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004d14:	2301      	movs	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	01db      	lsls	r3, r3, #7
 8004d22:	4413      	add	r3, r2
 8004d24:	3384      	adds	r3, #132	@ 0x84
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	01d2      	lsls	r2, r2, #7
 8004d32:	440a      	add	r2, r1
 8004d34:	3284      	adds	r2, #132	@ 0x84
 8004d36:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	1acb      	subs	r3, r1, r3
 8004d52:	69f9      	ldr	r1, [r7, #28]
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	6809      	ldr	r1, [r1, #0]
 8004d5e:	4608      	mov	r0, r1
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	01c9      	lsls	r1, r1, #7
 8004d64:	4401      	add	r1, r0
 8004d66:	3184      	adds	r1, #132	@ 0x84
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	01db      	lsls	r3, r3, #7
 8004d76:	4413      	add	r3, r2
 8004d78:	3384      	adds	r3, #132	@ 0x84
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	4611      	mov	r1, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	01d2      	lsls	r2, r2, #7
 8004d86:	440a      	add	r2, r1
 8004d88:	3284      	adds	r2, #132	@ 0x84
 8004d8a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d8e:	f023 0307 	bic.w	r3, r3, #7
 8004d92:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	01db      	lsls	r3, r3, #7
 8004d9e:	4413      	add	r3, r2
 8004da0:	3384      	adds	r3, #132	@ 0x84
 8004da2:	461a      	mov	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	01db      	lsls	r3, r3, #7
 8004db4:	4413      	add	r3, r2
 8004db6:	3384      	adds	r3, #132	@ 0x84
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	01d2      	lsls	r2, r2, #7
 8004dc4:	440a      	add	r2, r1
 8004dc6:	3284      	adds	r2, #132	@ 0x84
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6013      	str	r3, [r2, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	3724      	adds	r7, #36	@ 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e267      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d075      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dfa:	4b88      	ldr	r3, [pc, #544]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d00c      	beq.n	8004e20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e06:	4b85      	ldr	r3, [pc, #532]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d112      	bne.n	8004e38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e12:	4b82      	ldr	r3, [pc, #520]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e1e:	d10b      	bne.n	8004e38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e20:	4b7e      	ldr	r3, [pc, #504]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d05b      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x108>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d157      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e242      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e40:	d106      	bne.n	8004e50 <HAL_RCC_OscConfig+0x74>
 8004e42:	4b76      	ldr	r3, [pc, #472]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a75      	ldr	r2, [pc, #468]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e01d      	b.n	8004e8c <HAL_RCC_OscConfig+0xb0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCC_OscConfig+0x98>
 8004e5a:	4b70      	ldr	r3, [pc, #448]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6f      	ldr	r2, [pc, #444]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4b6d      	ldr	r3, [pc, #436]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e00b      	b.n	8004e8c <HAL_RCC_OscConfig+0xb0>
 8004e74:	4b69      	ldr	r3, [pc, #420]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a68      	ldr	r2, [pc, #416]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b66      	ldr	r3, [pc, #408]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a65      	ldr	r2, [pc, #404]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fe f8f0 	bl	8003078 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fe f8ec 	bl	8003078 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	@ 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e207      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b5b      	ldr	r3, [pc, #364]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0xc0>
 8004eba:	e014      	b.n	8004ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fe f8dc 	bl	8003078 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fe f8d8 	bl	8003078 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	@ 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1f3      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed6:	4b51      	ldr	r3, [pc, #324]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0xe8>
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d063      	beq.n	8004fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efe:	4b47      	ldr	r3, [pc, #284]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d11c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0a:	4b44      	ldr	r3, [pc, #272]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d116      	bne.n	8004f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f16:	4b41      	ldr	r3, [pc, #260]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_RCC_OscConfig+0x152>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e1c7      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4937      	ldr	r1, [pc, #220]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	e03a      	b.n	8004fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f4c:	4b34      	ldr	r3, [pc, #208]	@ (8005020 <HAL_RCC_OscConfig+0x244>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fe f891 	bl	8003078 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5a:	f7fe f88d 	bl	8003078 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1a8      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f78:	4b28      	ldr	r3, [pc, #160]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4925      	ldr	r1, [pc, #148]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	600b      	str	r3, [r1, #0]
 8004f8c:	e015      	b.n	8004fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <HAL_RCC_OscConfig+0x244>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fe f870 	bl	8003078 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f9c:	f7fe f86c 	bl	8003078 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e187      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	4b1b      	ldr	r3, [pc, #108]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d036      	beq.n	8005034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d016      	beq.n	8004ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fce:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <HAL_RCC_OscConfig+0x248>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fe f850 	bl	8003078 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7fe f84c 	bl	8003078 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e167      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <HAL_RCC_OscConfig+0x240>)
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x200>
 8004ffa:	e01b      	b.n	8005034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ffc:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <HAL_RCC_OscConfig+0x248>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005002:	f7fe f839 	bl	8003078 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005008:	e00e      	b.n	8005028 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500a:	f7fe f835 	bl	8003078 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d907      	bls.n	8005028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e150      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
 800501c:	40023800 	.word	0x40023800
 8005020:	42470000 	.word	0x42470000
 8005024:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005028:	4b88      	ldr	r3, [pc, #544]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 800502a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ea      	bne.n	800500a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8097 	beq.w	8005170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005046:	4b81      	ldr	r3, [pc, #516]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	4b7d      	ldr	r3, [pc, #500]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	4a7c      	ldr	r2, [pc, #496]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 800505c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005060:	6413      	str	r3, [r2, #64]	@ 0x40
 8005062:	4b7a      	ldr	r3, [pc, #488]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506e:	2301      	movs	r3, #1
 8005070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005072:	4b77      	ldr	r3, [pc, #476]	@ (8005250 <HAL_RCC_OscConfig+0x474>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d118      	bne.n	80050b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800507e:	4b74      	ldr	r3, [pc, #464]	@ (8005250 <HAL_RCC_OscConfig+0x474>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a73      	ldr	r2, [pc, #460]	@ (8005250 <HAL_RCC_OscConfig+0x474>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508a:	f7fd fff5 	bl	8003078 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fd fff1 	bl	8003078 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e10c      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005250 <HAL_RCC_OscConfig+0x474>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d106      	bne.n	80050c6 <HAL_RCC_OscConfig+0x2ea>
 80050b8:	4b64      	ldr	r3, [pc, #400]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050bc:	4a63      	ldr	r2, [pc, #396]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c4:	e01c      	b.n	8005100 <HAL_RCC_OscConfig+0x324>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b05      	cmp	r3, #5
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x30c>
 80050ce:	4b5f      	ldr	r3, [pc, #380]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d2:	4a5e      	ldr	r2, [pc, #376]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050da:	4b5c      	ldr	r3, [pc, #368]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050de:	4a5b      	ldr	r2, [pc, #364]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e6:	e00b      	b.n	8005100 <HAL_RCC_OscConfig+0x324>
 80050e8:	4b58      	ldr	r3, [pc, #352]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ec:	4a57      	ldr	r2, [pc, #348]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f4:	4b55      	ldr	r3, [pc, #340]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f8:	4a54      	ldr	r2, [pc, #336]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80050fa:	f023 0304 	bic.w	r3, r3, #4
 80050fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d015      	beq.n	8005134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fd ffb6 	bl	8003078 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510e:	e00a      	b.n	8005126 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005110:	f7fd ffb2 	bl	8003078 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e0cb      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005126:	4b49      	ldr	r3, [pc, #292]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0ee      	beq.n	8005110 <HAL_RCC_OscConfig+0x334>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005134:	f7fd ffa0 	bl	8003078 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800513a:	e00a      	b.n	8005152 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513c:	f7fd ff9c 	bl	8003078 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0b5      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005152:	4b3e      	ldr	r3, [pc, #248]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1ee      	bne.n	800513c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800515e:	7dfb      	ldrb	r3, [r7, #23]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d105      	bne.n	8005170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005164:	4b39      	ldr	r3, [pc, #228]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	4a38      	ldr	r2, [pc, #224]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 800516a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800516e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80a1 	beq.w	80052bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800517a:	4b34      	ldr	r3, [pc, #208]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b08      	cmp	r3, #8
 8005184:	d05c      	beq.n	8005240 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d141      	bne.n	8005212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518e:	4b31      	ldr	r3, [pc, #196]	@ (8005254 <HAL_RCC_OscConfig+0x478>)
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005194:	f7fd ff70 	bl	8003078 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519c:	f7fd ff6c 	bl	8003078 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e087      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ae:	4b27      	ldr	r3, [pc, #156]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	019b      	lsls	r3, r3, #6
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	3b01      	subs	r3, #1
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	491b      	ldr	r1, [pc, #108]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x478>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd ff45 	bl	8003078 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fd ff41 	bl	8003078 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e05c      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005204:	4b11      	ldr	r3, [pc, #68]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x416>
 8005210:	e054      	b.n	80052bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005212:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <HAL_RCC_OscConfig+0x478>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fd ff2e 	bl	8003078 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd ff2a 	bl	8003078 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e045      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005232:	4b06      	ldr	r3, [pc, #24]	@ (800524c <HAL_RCC_OscConfig+0x470>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x444>
 800523e:	e03d      	b.n	80052bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e038      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
 800524c:	40023800 	.word	0x40023800
 8005250:	40007000 	.word	0x40007000
 8005254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005258:	4b1b      	ldr	r3, [pc, #108]	@ (80052c8 <HAL_RCC_OscConfig+0x4ec>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d028      	beq.n	80052b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d121      	bne.n	80052b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d11a      	bne.n	80052b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005288:	4013      	ands	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800528e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005290:	4293      	cmp	r3, r2
 8005292:	d111      	bne.n	80052b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	3b01      	subs	r3, #1
 80052a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40023800 	.word	0x40023800

080052cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0cc      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e0:	4b68      	ldr	r3, [pc, #416]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d90c      	bls.n	8005308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b65      	ldr	r3, [pc, #404]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b63      	ldr	r3, [pc, #396]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0b8      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d020      	beq.n	8005356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005320:	4b59      	ldr	r3, [pc, #356]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4a58      	ldr	r2, [pc, #352]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800532a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005338:	4b53      	ldr	r3, [pc, #332]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4a52      	ldr	r2, [pc, #328]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005344:	4b50      	ldr	r3, [pc, #320]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	494d      	ldr	r1, [pc, #308]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d044      	beq.n	80053ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d107      	bne.n	800537a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b47      	ldr	r3, [pc, #284]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d119      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e07f      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d003      	beq.n	800538a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005386:	2b03      	cmp	r3, #3
 8005388:	d107      	bne.n	800539a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538a:	4b3f      	ldr	r3, [pc, #252]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e06f      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539a:	4b3b      	ldr	r3, [pc, #236]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e067      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053aa:	4b37      	ldr	r3, [pc, #220]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4934      	ldr	r1, [pc, #208]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053bc:	f7fd fe5c 	bl	8003078 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	e00a      	b.n	80053da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c4:	f7fd fe58 	bl	8003078 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e04f      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	4b2b      	ldr	r3, [pc, #172]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 020c 	and.w	r2, r3, #12
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d1eb      	bne.n	80053c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ec:	4b25      	ldr	r3, [pc, #148]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d20c      	bcs.n	8005414 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4b22      	ldr	r3, [pc, #136]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b20      	ldr	r3, [pc, #128]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e032      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005420:	4b19      	ldr	r3, [pc, #100]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4916      	ldr	r1, [pc, #88]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543e:	4b12      	ldr	r3, [pc, #72]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	490e      	ldr	r1, [pc, #56]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005452:	f000 f821 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8005456:	4602      	mov	r2, r0
 8005458:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	490a      	ldr	r1, [pc, #40]	@ (800548c <HAL_RCC_ClockConfig+0x1c0>)
 8005464:	5ccb      	ldrb	r3, [r1, r3]
 8005466:	fa22 f303 	lsr.w	r3, r2, r3
 800546a:	4a09      	ldr	r2, [pc, #36]	@ (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800546e:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <HAL_RCC_ClockConfig+0x1c8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd fdbc 	bl	8002ff0 <HAL_InitTick>

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023c00 	.word	0x40023c00
 8005488:	40023800 	.word	0x40023800
 800548c:	08008ab0 	.word	0x08008ab0
 8005490:	20000148 	.word	0x20000148
 8005494:	2000014c 	.word	0x2000014c

08005498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800549c:	b094      	sub	sp, #80	@ 0x50
 800549e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b0:	4b79      	ldr	r3, [pc, #484]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d00d      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x40>
 80054bc:	2b08      	cmp	r3, #8
 80054be:	f200 80e1 	bhi.w	8005684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x34>
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d003      	beq.n	80054d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054ca:	e0db      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054cc:	4b73      	ldr	r3, [pc, #460]	@ (800569c <HAL_RCC_GetSysClockFreq+0x204>)
 80054ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d0:	e0db      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d2:	4b73      	ldr	r3, [pc, #460]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80054d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d6:	e0d8      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d063      	beq.n	80055b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	2200      	movs	r2, #0
 80054f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005500:	633b      	str	r3, [r7, #48]	@ 0x30
 8005502:	2300      	movs	r3, #0
 8005504:	637b      	str	r3, [r7, #52]	@ 0x34
 8005506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800550a:	4622      	mov	r2, r4
 800550c:	462b      	mov	r3, r5
 800550e:	f04f 0000 	mov.w	r0, #0
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	0159      	lsls	r1, r3, #5
 8005518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800551c:	0150      	lsls	r0, r2, #5
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4621      	mov	r1, r4
 8005524:	1a51      	subs	r1, r2, r1
 8005526:	6139      	str	r1, [r7, #16]
 8005528:	4629      	mov	r1, r5
 800552a:	eb63 0301 	sbc.w	r3, r3, r1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800553c:	4659      	mov	r1, fp
 800553e:	018b      	lsls	r3, r1, #6
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005546:	4651      	mov	r1, sl
 8005548:	018a      	lsls	r2, r1, #6
 800554a:	4651      	mov	r1, sl
 800554c:	ebb2 0801 	subs.w	r8, r2, r1
 8005550:	4659      	mov	r1, fp
 8005552:	eb63 0901 	sbc.w	r9, r3, r1
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800556a:	4690      	mov	r8, r2
 800556c:	4699      	mov	r9, r3
 800556e:	4623      	mov	r3, r4
 8005570:	eb18 0303 	adds.w	r3, r8, r3
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	462b      	mov	r3, r5
 8005578:	eb49 0303 	adc.w	r3, r9, r3
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800558a:	4629      	mov	r1, r5
 800558c:	024b      	lsls	r3, r1, #9
 800558e:	4621      	mov	r1, r4
 8005590:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005594:	4621      	mov	r1, r4
 8005596:	024a      	lsls	r2, r1, #9
 8005598:	4610      	mov	r0, r2
 800559a:	4619      	mov	r1, r3
 800559c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800559e:	2200      	movs	r2, #0
 80055a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055a8:	f7fa fe28 	bl	80001fc <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b4:	e058      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b6:	4b38      	ldr	r3, [pc, #224]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	2200      	movs	r2, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	4611      	mov	r1, r2
 80055c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	2300      	movs	r3, #0
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80055cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	0159      	lsls	r1, r3, #5
 80055de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e2:	0150      	lsls	r0, r2, #5
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4641      	mov	r1, r8
 80055ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80055ee:	4649      	mov	r1, r9
 80055f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005608:	ebb2 040a 	subs.w	r4, r2, sl
 800560c:	eb63 050b 	sbc.w	r5, r3, fp
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	00eb      	lsls	r3, r5, #3
 800561a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561e:	00e2      	lsls	r2, r4, #3
 8005620:	4614      	mov	r4, r2
 8005622:	461d      	mov	r5, r3
 8005624:	4643      	mov	r3, r8
 8005626:	18e3      	adds	r3, r4, r3
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	464b      	mov	r3, r9
 800562c:	eb45 0303 	adc.w	r3, r5, r3
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800563e:	4629      	mov	r1, r5
 8005640:	028b      	lsls	r3, r1, #10
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005648:	4621      	mov	r1, r4
 800564a:	028a      	lsls	r2, r1, #10
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005652:	2200      	movs	r2, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	61fa      	str	r2, [r7, #28]
 8005658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800565c:	f7fa fdce 	bl	80001fc <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4613      	mov	r3, r2
 8005666:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005668:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	3301      	adds	r3, #1
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800567a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005682:	e002      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <HAL_RCC_GetSysClockFreq+0x204>)
 8005686:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800568a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800568c:	4618      	mov	r0, r3
 800568e:	3750      	adds	r7, #80	@ 0x50
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800
 800569c:	00f42400 	.word	0x00f42400
 80056a0:	007a1200 	.word	0x007a1200

080056a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a8:	4b03      	ldr	r3, [pc, #12]	@ (80056b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056aa:	681b      	ldr	r3, [r3, #0]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20000148 	.word	0x20000148

080056bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056c0:	f7ff fff0 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	0a9b      	lsrs	r3, r3, #10
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	4903      	ldr	r1, [pc, #12]	@ (80056e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40023800 	.word	0x40023800
 80056e0:	08008ac0 	.word	0x08008ac0

080056e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005714:	2b00      	cmp	r3, #0
 8005716:	d075      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005718:	4b91      	ldr	r3, [pc, #580]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571e:	f7fd fcab 	bl	8003078 <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005726:	f7fd fca7 	bl	8003078 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e189      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005738:	4b8a      	ldr	r3, [pc, #552]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	019a      	lsls	r2, r3, #6
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	071b      	lsls	r3, r3, #28
 800575c:	4981      	ldr	r1, [pc, #516]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01f      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005770:	4b7c      	ldr	r3, [pc, #496]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005776:	0f1b      	lsrs	r3, r3, #28
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	019a      	lsls	r2, r3, #6
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	431a      	orrs	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	071b      	lsls	r3, r3, #28
 8005790:	4974      	ldr	r1, [pc, #464]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005798:	4b72      	ldr	r3, [pc, #456]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800579a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800579e:	f023 021f 	bic.w	r2, r3, #31
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	496e      	ldr	r1, [pc, #440]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	019a      	lsls	r2, r3, #6
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	061b      	lsls	r3, r3, #24
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	071b      	lsls	r3, r3, #28
 80057d0:	4964      	ldr	r1, [pc, #400]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057d8:	4b61      	ldr	r3, [pc, #388]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057da:	2201      	movs	r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057de:	f7fd fc4b 	bl	8003078 <HAL_GetTick>
 80057e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057e4:	e008      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057e6:	f7fd fc47 	bl	8003078 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e129      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005818:	2b00      	cmp	r3, #0
 800581a:	d079      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800581c:	4b52      	ldr	r3, [pc, #328]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005822:	f7fd fc29 	bl	8003078 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800582a:	f7fd fc25 	bl	8003078 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e107      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800583c:	4b49      	ldr	r3, [pc, #292]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005848:	d0ef      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d020      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005856:	4b43      	ldr	r3, [pc, #268]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585c:	0f1b      	lsrs	r3, r3, #28
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	019a      	lsls	r2, r3, #6
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	431a      	orrs	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	493b      	ldr	r1, [pc, #236]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800587e:	4b39      	ldr	r3, [pc, #228]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005884:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	3b01      	subs	r3, #1
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	4934      	ldr	r1, [pc, #208]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01e      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	0e1b      	lsrs	r3, r3, #24
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	019a      	lsls	r2, r3, #6
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	071b      	lsls	r3, r3, #28
 80058c4:	4927      	ldr	r1, [pc, #156]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058cc:	4b25      	ldr	r3, [pc, #148]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	4922      	ldr	r1, [pc, #136]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058e2:	4b21      	ldr	r3, [pc, #132]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058e8:	f7fd fbc6 	bl	8003078 <HAL_GetTick>
 80058ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058f0:	f7fd fbc2 	bl	8003078 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0a4      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005902:	4b18      	ldr	r3, [pc, #96]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800590e:	d1ef      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 808b 	beq.w	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	4a0f      	ldr	r2, [pc, #60]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800592c:	6413      	str	r3, [r2, #64]	@ 0x40
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800593a:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a0b      	ldr	r2, [pc, #44]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005944:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005946:	f7fd fb97 	bl	8003078 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800594c:	e010      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800594e:	f7fd fb93 	bl	8003078 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d909      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e075      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005960:	42470068 	.word	0x42470068
 8005964:	40023800 	.word	0x40023800
 8005968:	42470070 	.word	0x42470070
 800596c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005970:	4b38      	ldr	r3, [pc, #224]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0e8      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800597c:	4b36      	ldr	r3, [pc, #216]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005984:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d02f      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x308>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d028      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800599a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059a4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059aa:	4b2c      	ldr	r3, [pc, #176]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059b0:	4a29      	ldr	r2, [pc, #164]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059b6:	4b28      	ldr	r3, [pc, #160]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d114      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fd fb59 	bl	8003078 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c8:	e00a      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fd fb55 	bl	8003078 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e035      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0ee      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f8:	d10d      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80059fa:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a0e:	4912      	ldr	r1, [pc, #72]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	608b      	str	r3, [r1, #8]
 8005a14:	e005      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005a16:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a20:	6093      	str	r3, [r2, #8]
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a2e:	490a      	ldr	r1, [pc, #40]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005a48:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40007000 	.word	0x40007000
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	42470e40 	.word	0x42470e40
 8005a60:	424711e0 	.word	0x424711e0

08005a64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e01c      	b.n	8005ab0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	795b      	ldrb	r3, [r3, #5]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc fe32 	bl	80026f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0204 	orr.w	r2, r2, #4
 8005aa0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	791b      	ldrb	r3, [r3, #4]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e044      	b.n	8005b5c <HAL_RNG_GenerateRandomNumber+0xa4>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	795b      	ldrb	r3, [r3, #5]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d133      	bne.n	8005b4a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae8:	f7fd fac6 	bl	8003078 <HAL_GetTick>
 8005aec:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005aee:	e018      	b.n	8005b22 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005af0:	f7fd fac2 	bl	8003078 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d911      	bls.n	8005b22 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d00a      	beq.n	8005b22 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e01c      	b.n	8005b5c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d1df      	bne.n	8005af0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	715a      	strb	r2, [r3, #5]
 8005b48:	e004      	b.n	8005b54 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	711a      	strb	r2, [r3, #4]

  return status;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e07b      	b.n	8005c6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d108      	bne.n	8005b90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b86:	d009      	beq.n	8005b9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	61da      	str	r2, [r3, #28]
 8005b8e:	e005      	b.n	8005b9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc fdbc 	bl	8002734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c20:	ea42 0103 	orr.w	r1, r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	f003 0104 	and.w	r1, r3, #4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	f003 0210 	and.w	r2, r3, #16
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e01a      	b.n	8005cbe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fc fd8f 	bl	80027c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b088      	sub	sp, #32
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cd6:	f7fd f9cf 	bl	8003078 <HAL_GetTick>
 8005cda:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d001      	beq.n	8005cf0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
 8005cee:	e12a      	b.n	8005f46 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_SPI_Transmit+0x36>
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e122      	b.n	8005f46 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_SPI_Transmit+0x48>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e11b      	b.n	8005f46 <HAL_SPI_Transmit+0x280>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	88fa      	ldrh	r2, [r7, #6]
 8005d2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d5c:	d10f      	bne.n	8005d7e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	2b40      	cmp	r3, #64	@ 0x40
 8005d8a:	d007      	beq.n	8005d9c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da4:	d152      	bne.n	8005e4c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_SPI_Transmit+0xee>
 8005dae:	8b7b      	ldrh	r3, [r7, #26]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d145      	bne.n	8005e40 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db8:	881a      	ldrh	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc4:	1c9a      	adds	r2, r3, #2
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dd8:	e032      	b.n	8005e40 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d112      	bne.n	8005e0e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dec:	881a      	ldrh	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	1c9a      	adds	r2, r3, #2
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e0c:	e018      	b.n	8005e40 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e0e:	f7fd f933 	bl	8003078 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d803      	bhi.n	8005e26 <HAL_SPI_Transmit+0x160>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e24:	d102      	bne.n	8005e2c <HAL_SPI_Transmit+0x166>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e082      	b.n	8005f46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1c7      	bne.n	8005dda <HAL_SPI_Transmit+0x114>
 8005e4a:	e053      	b.n	8005ef4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_SPI_Transmit+0x194>
 8005e54:	8b7b      	ldrh	r3, [r7, #26]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d147      	bne.n	8005eea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e80:	e033      	b.n	8005eea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d113      	bne.n	8005eb8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	7812      	ldrb	r2, [r2, #0]
 8005e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005eb6:	e018      	b.n	8005eea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb8:	f7fd f8de 	bl	8003078 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d803      	bhi.n	8005ed0 <HAL_SPI_Transmit+0x20a>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ece:	d102      	bne.n	8005ed6 <HAL_SPI_Transmit+0x210>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e02d      	b.n	8005f46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1c6      	bne.n	8005e82 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f8bf 	bl	800607c <SPI_EndRxTxTransaction>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f44:	2300      	movs	r3, #0
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f5c:	b2db      	uxtb	r3, r3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f7c:	f7fd f87c 	bl	8003078 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f8c:	f7fd f874 	bl	8003078 <HAL_GetTick>
 8005f90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f92:	4b39      	ldr	r3, [pc, #228]	@ (8006078 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	015b      	lsls	r3, r3, #5
 8005f98:	0d1b      	lsrs	r3, r3, #20
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa2:	e054      	b.n	800604e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005faa:	d050      	beq.n	800604e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fac:	f7fd f864 	bl	8003078 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d902      	bls.n	8005fc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d13d      	bne.n	800603e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fda:	d111      	bne.n	8006000 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe4:	d004      	beq.n	8005ff0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fee:	d107      	bne.n	8006000 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006008:	d10f      	bne.n	800602a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e017      	b.n	800606e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	3b01      	subs	r3, #1
 800604c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4013      	ands	r3, r2
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	429a      	cmp	r2, r3
 800606a:	d19b      	bne.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000148 	.word	0x20000148

0800607c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2201      	movs	r2, #1
 8006090:	2102      	movs	r1, #2
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff ff6a 	bl	8005f6c <SPI_WaitFlagStateUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e032      	b.n	8006114 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060ae:	4b1b      	ldr	r3, [pc, #108]	@ (800611c <SPI_EndRxTxTransaction+0xa0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006120 <SPI_EndRxTxTransaction+0xa4>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	0d5b      	lsrs	r3, r3, #21
 80060ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060cc:	d112      	bne.n	80060f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	2180      	movs	r1, #128	@ 0x80
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff ff47 	bl	8005f6c <SPI_WaitFlagStateUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d016      	beq.n	8006112 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e00f      	b.n	8006114 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610a:	2b80      	cmp	r3, #128	@ 0x80
 800610c:	d0f2      	beq.n	80060f4 <SPI_EndRxTxTransaction+0x78>
 800610e:	e000      	b.n	8006112 <SPI_EndRxTxTransaction+0x96>
        break;
 8006110:	bf00      	nop
  }

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000148 	.word	0x20000148
 8006120:	165e9f81 	.word	0x165e9f81

08006124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e041      	b.n	80061ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc fb58 	bl	8002800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 f936 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d001      	beq.n	80061dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e046      	b.n	800626a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a23      	ldr	r2, [pc, #140]	@ (8006278 <HAL_TIM_Base_Start+0xb4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_TIM_Base_Start+0x70>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d01d      	beq.n	8006234 <HAL_TIM_Base_Start+0x70>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1f      	ldr	r2, [pc, #124]	@ (800627c <HAL_TIM_Base_Start+0xb8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_TIM_Base_Start+0x70>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1e      	ldr	r2, [pc, #120]	@ (8006280 <HAL_TIM_Base_Start+0xbc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_TIM_Base_Start+0x70>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1c      	ldr	r2, [pc, #112]	@ (8006284 <HAL_TIM_Base_Start+0xc0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_TIM_Base_Start+0x70>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1b      	ldr	r2, [pc, #108]	@ (8006288 <HAL_TIM_Base_Start+0xc4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_TIM_Base_Start+0x70>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a19      	ldr	r2, [pc, #100]	@ (800628c <HAL_TIM_Base_Start+0xc8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_TIM_Base_Start+0x70>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a18      	ldr	r2, [pc, #96]	@ (8006290 <HAL_TIM_Base_Start+0xcc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d111      	bne.n	8006258 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b06      	cmp	r3, #6
 8006244:	d010      	beq.n	8006268 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0201 	orr.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006256:	e007      	b.n	8006268 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40010000 	.word	0x40010000
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40010400 	.word	0x40010400
 800628c:	40014000 	.word	0x40014000
 8006290:	40001800 	.word	0x40001800

08006294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d001      	beq.n	80062ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e04e      	b.n	800634a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a23      	ldr	r2, [pc, #140]	@ (8006358 <HAL_TIM_Base_Start_IT+0xc4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d022      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x80>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d6:	d01d      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x80>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1f      	ldr	r2, [pc, #124]	@ (800635c <HAL_TIM_Base_Start_IT+0xc8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d018      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x80>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006360 <HAL_TIM_Base_Start_IT+0xcc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x80>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006364 <HAL_TIM_Base_Start_IT+0xd0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x80>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006368 <HAL_TIM_Base_Start_IT+0xd4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x80>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_TIM_Base_Start_IT+0xd8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x80>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a18      	ldr	r2, [pc, #96]	@ (8006370 <HAL_TIM_Base_Start_IT+0xdc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d111      	bne.n	8006338 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b06      	cmp	r3, #6
 8006324:	d010      	beq.n	8006348 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006336:	e007      	b.n	8006348 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40014000 	.word	0x40014000
 8006370:	40001800 	.word	0x40001800

08006374 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10f      	bne.n	80063bc <HAL_TIM_Base_Stop_IT+0x48>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d107      	bne.n	80063bc <HAL_TIM_Base_Stop_IT+0x48>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a46      	ldr	r2, [pc, #280]	@ (8006500 <TIM_Base_SetConfig+0x12c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f2:	d00f      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a43      	ldr	r2, [pc, #268]	@ (8006504 <TIM_Base_SetConfig+0x130>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00b      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a42      	ldr	r2, [pc, #264]	@ (8006508 <TIM_Base_SetConfig+0x134>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a41      	ldr	r2, [pc, #260]	@ (800650c <TIM_Base_SetConfig+0x138>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a40      	ldr	r2, [pc, #256]	@ (8006510 <TIM_Base_SetConfig+0x13c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a35      	ldr	r2, [pc, #212]	@ (8006500 <TIM_Base_SetConfig+0x12c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006434:	d027      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a32      	ldr	r2, [pc, #200]	@ (8006504 <TIM_Base_SetConfig+0x130>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d023      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a31      	ldr	r2, [pc, #196]	@ (8006508 <TIM_Base_SetConfig+0x134>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01f      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a30      	ldr	r2, [pc, #192]	@ (800650c <TIM_Base_SetConfig+0x138>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2f      	ldr	r2, [pc, #188]	@ (8006510 <TIM_Base_SetConfig+0x13c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d017      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2e      	ldr	r2, [pc, #184]	@ (8006514 <TIM_Base_SetConfig+0x140>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2d      	ldr	r2, [pc, #180]	@ (8006518 <TIM_Base_SetConfig+0x144>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00f      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2c      	ldr	r2, [pc, #176]	@ (800651c <TIM_Base_SetConfig+0x148>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2b      	ldr	r2, [pc, #172]	@ (8006520 <TIM_Base_SetConfig+0x14c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <TIM_Base_SetConfig+0x150>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a29      	ldr	r2, [pc, #164]	@ (8006528 <TIM_Base_SetConfig+0x154>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d108      	bne.n	8006498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a10      	ldr	r2, [pc, #64]	@ (8006500 <TIM_Base_SetConfig+0x12c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_Base_SetConfig+0xf8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a12      	ldr	r2, [pc, #72]	@ (8006510 <TIM_Base_SetConfig+0x13c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d103      	bne.n	80064d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d105      	bne.n	80064f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	611a      	str	r2, [r3, #16]
  }
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40010400 	.word	0x40010400
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800
 8006520:	40001800 	.word	0x40001800
 8006524:	40001c00 	.word	0x40001c00
 8006528:	40002000 	.word	0x40002000

0800652c <findslot>:
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <findslot+0x2c>)
 800652e:	b510      	push	{r4, lr}
 8006530:	4604      	mov	r4, r0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	b118      	cbz	r0, 800653e <findslot+0x12>
 8006536:	6a03      	ldr	r3, [r0, #32]
 8006538:	b90b      	cbnz	r3, 800653e <findslot+0x12>
 800653a:	f000 fb07 	bl	8006b4c <__sinit>
 800653e:	2c13      	cmp	r4, #19
 8006540:	d807      	bhi.n	8006552 <findslot+0x26>
 8006542:	4806      	ldr	r0, [pc, #24]	@ (800655c <findslot+0x30>)
 8006544:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006548:	3201      	adds	r2, #1
 800654a:	d002      	beq.n	8006552 <findslot+0x26>
 800654c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006550:	bd10      	pop	{r4, pc}
 8006552:	2000      	movs	r0, #0
 8006554:	e7fc      	b.n	8006550 <findslot+0x24>
 8006556:	bf00      	nop
 8006558:	20000168 	.word	0x20000168
 800655c:	20025c50 	.word	0x20025c50

08006560 <error>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	4604      	mov	r4, r0
 8006564:	f000 fb72 	bl	8006c4c <__errno>
 8006568:	2613      	movs	r6, #19
 800656a:	4605      	mov	r5, r0
 800656c:	2700      	movs	r7, #0
 800656e:	4630      	mov	r0, r6
 8006570:	4639      	mov	r1, r7
 8006572:	beab      	bkpt	0x00ab
 8006574:	4606      	mov	r6, r0
 8006576:	602e      	str	r6, [r5, #0]
 8006578:	4620      	mov	r0, r4
 800657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800657c <checkerror>:
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d101      	bne.n	8006584 <checkerror+0x8>
 8006580:	f7ff bfee 	b.w	8006560 <error>
 8006584:	4770      	bx	lr

08006586 <_swiread>:
 8006586:	b530      	push	{r4, r5, lr}
 8006588:	b085      	sub	sp, #20
 800658a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800658e:	9203      	str	r2, [sp, #12]
 8006590:	2406      	movs	r4, #6
 8006592:	ad01      	add	r5, sp, #4
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	beab      	bkpt	0x00ab
 800659a:	4604      	mov	r4, r0
 800659c:	4620      	mov	r0, r4
 800659e:	f7ff ffed 	bl	800657c <checkerror>
 80065a2:	b005      	add	sp, #20
 80065a4:	bd30      	pop	{r4, r5, pc}

080065a6 <_read>:
 80065a6:	b570      	push	{r4, r5, r6, lr}
 80065a8:	460e      	mov	r6, r1
 80065aa:	4614      	mov	r4, r2
 80065ac:	f7ff ffbe 	bl	800652c <findslot>
 80065b0:	4605      	mov	r5, r0
 80065b2:	b930      	cbnz	r0, 80065c2 <_read+0x1c>
 80065b4:	f000 fb4a 	bl	8006c4c <__errno>
 80065b8:	2309      	movs	r3, #9
 80065ba:	6003      	str	r3, [r0, #0]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065c0:	bd70      	pop	{r4, r5, r6, pc}
 80065c2:	6800      	ldr	r0, [r0, #0]
 80065c4:	4622      	mov	r2, r4
 80065c6:	4631      	mov	r1, r6
 80065c8:	f7ff ffdd 	bl	8006586 <_swiread>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d0f5      	beq.n	80065bc <_read+0x16>
 80065d0:	686b      	ldr	r3, [r5, #4]
 80065d2:	1a20      	subs	r0, r4, r0
 80065d4:	4403      	add	r3, r0
 80065d6:	606b      	str	r3, [r5, #4]
 80065d8:	e7f2      	b.n	80065c0 <_read+0x1a>

080065da <_swilseek>:
 80065da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065dc:	460c      	mov	r4, r1
 80065de:	4616      	mov	r6, r2
 80065e0:	f7ff ffa4 	bl	800652c <findslot>
 80065e4:	4605      	mov	r5, r0
 80065e6:	b940      	cbnz	r0, 80065fa <_swilseek+0x20>
 80065e8:	f000 fb30 	bl	8006c4c <__errno>
 80065ec:	2309      	movs	r3, #9
 80065ee:	6003      	str	r3, [r0, #0]
 80065f0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80065f4:	4620      	mov	r0, r4
 80065f6:	b003      	add	sp, #12
 80065f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fa:	2e02      	cmp	r6, #2
 80065fc:	d903      	bls.n	8006606 <_swilseek+0x2c>
 80065fe:	f000 fb25 	bl	8006c4c <__errno>
 8006602:	2316      	movs	r3, #22
 8006604:	e7f3      	b.n	80065ee <_swilseek+0x14>
 8006606:	2e01      	cmp	r6, #1
 8006608:	d112      	bne.n	8006630 <_swilseek+0x56>
 800660a:	6843      	ldr	r3, [r0, #4]
 800660c:	18e4      	adds	r4, r4, r3
 800660e:	d4f6      	bmi.n	80065fe <_swilseek+0x24>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	260a      	movs	r6, #10
 8006614:	e9cd 3400 	strd	r3, r4, [sp]
 8006618:	466f      	mov	r7, sp
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	beab      	bkpt	0x00ab
 8006620:	4606      	mov	r6, r0
 8006622:	4630      	mov	r0, r6
 8006624:	f7ff ffaa 	bl	800657c <checkerror>
 8006628:	2800      	cmp	r0, #0
 800662a:	dbe1      	blt.n	80065f0 <_swilseek+0x16>
 800662c:	606c      	str	r4, [r5, #4]
 800662e:	e7e1      	b.n	80065f4 <_swilseek+0x1a>
 8006630:	2e02      	cmp	r6, #2
 8006632:	6803      	ldr	r3, [r0, #0]
 8006634:	d1ec      	bne.n	8006610 <_swilseek+0x36>
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	260c      	movs	r6, #12
 800663a:	466f      	mov	r7, sp
 800663c:	4630      	mov	r0, r6
 800663e:	4639      	mov	r1, r7
 8006640:	beab      	bkpt	0x00ab
 8006642:	4606      	mov	r6, r0
 8006644:	4630      	mov	r0, r6
 8006646:	f7ff ff99 	bl	800657c <checkerror>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d0d0      	beq.n	80065f0 <_swilseek+0x16>
 800664e:	4404      	add	r4, r0
 8006650:	e7de      	b.n	8006610 <_swilseek+0x36>

08006652 <_lseek>:
 8006652:	f7ff bfc2 	b.w	80065da <_swilseek>

08006656 <_swiwrite>:
 8006656:	b530      	push	{r4, r5, lr}
 8006658:	b085      	sub	sp, #20
 800665a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800665e:	9203      	str	r2, [sp, #12]
 8006660:	2405      	movs	r4, #5
 8006662:	ad01      	add	r5, sp, #4
 8006664:	4620      	mov	r0, r4
 8006666:	4629      	mov	r1, r5
 8006668:	beab      	bkpt	0x00ab
 800666a:	4604      	mov	r4, r0
 800666c:	4620      	mov	r0, r4
 800666e:	f7ff ff85 	bl	800657c <checkerror>
 8006672:	b005      	add	sp, #20
 8006674:	bd30      	pop	{r4, r5, pc}

08006676 <_write>:
 8006676:	b570      	push	{r4, r5, r6, lr}
 8006678:	460e      	mov	r6, r1
 800667a:	4615      	mov	r5, r2
 800667c:	f7ff ff56 	bl	800652c <findslot>
 8006680:	4604      	mov	r4, r0
 8006682:	b930      	cbnz	r0, 8006692 <_write+0x1c>
 8006684:	f000 fae2 	bl	8006c4c <__errno>
 8006688:	2309      	movs	r3, #9
 800668a:	6003      	str	r3, [r0, #0]
 800668c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	6800      	ldr	r0, [r0, #0]
 8006694:	462a      	mov	r2, r5
 8006696:	4631      	mov	r1, r6
 8006698:	f7ff ffdd 	bl	8006656 <_swiwrite>
 800669c:	1e03      	subs	r3, r0, #0
 800669e:	dbf5      	blt.n	800668c <_write+0x16>
 80066a0:	6862      	ldr	r2, [r4, #4]
 80066a2:	1ae8      	subs	r0, r5, r3
 80066a4:	4402      	add	r2, r0
 80066a6:	42ab      	cmp	r3, r5
 80066a8:	6062      	str	r2, [r4, #4]
 80066aa:	d1f1      	bne.n	8006690 <_write+0x1a>
 80066ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066b0:	2000      	movs	r0, #0
 80066b2:	f7ff bf55 	b.w	8006560 <error>

080066b6 <_swiclose>:
 80066b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066b8:	2402      	movs	r4, #2
 80066ba:	9001      	str	r0, [sp, #4]
 80066bc:	ad01      	add	r5, sp, #4
 80066be:	4620      	mov	r0, r4
 80066c0:	4629      	mov	r1, r5
 80066c2:	beab      	bkpt	0x00ab
 80066c4:	4604      	mov	r4, r0
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff ff58 	bl	800657c <checkerror>
 80066cc:	b003      	add	sp, #12
 80066ce:	bd30      	pop	{r4, r5, pc}

080066d0 <_close>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4605      	mov	r5, r0
 80066d4:	f7ff ff2a 	bl	800652c <findslot>
 80066d8:	4604      	mov	r4, r0
 80066da:	b930      	cbnz	r0, 80066ea <_close+0x1a>
 80066dc:	f000 fab6 	bl	8006c4c <__errno>
 80066e0:	2309      	movs	r3, #9
 80066e2:	6003      	str	r3, [r0, #0]
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066e8:	bd38      	pop	{r3, r4, r5, pc}
 80066ea:	3d01      	subs	r5, #1
 80066ec:	2d01      	cmp	r5, #1
 80066ee:	d809      	bhi.n	8006704 <_close+0x34>
 80066f0:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <_close+0x40>)
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d104      	bne.n	8006704 <_close+0x34>
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	2000      	movs	r0, #0
 8006702:	e7f1      	b.n	80066e8 <_close+0x18>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	f7ff ffd6 	bl	80066b6 <_swiclose>
 800670a:	2800      	cmp	r0, #0
 800670c:	d0f5      	beq.n	80066fa <_close+0x2a>
 800670e:	e7eb      	b.n	80066e8 <_close+0x18>
 8006710:	20025c50 	.word	0x20025c50

08006714 <_swistat>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	460c      	mov	r4, r1
 8006718:	f7ff ff08 	bl	800652c <findslot>
 800671c:	4605      	mov	r5, r0
 800671e:	b930      	cbnz	r0, 800672e <_swistat+0x1a>
 8006720:	f000 fa94 	bl	8006c4c <__errno>
 8006724:	2309      	movs	r3, #9
 8006726:	6003      	str	r3, [r0, #0]
 8006728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800673a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800673c:	260c      	movs	r6, #12
 800673e:	4630      	mov	r0, r6
 8006740:	4629      	mov	r1, r5
 8006742:	beab      	bkpt	0x00ab
 8006744:	4605      	mov	r5, r0
 8006746:	4628      	mov	r0, r5
 8006748:	f7ff ff18 	bl	800657c <checkerror>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d0eb      	beq.n	8006728 <_swistat+0x14>
 8006750:	6120      	str	r0, [r4, #16]
 8006752:	2000      	movs	r0, #0
 8006754:	e7ea      	b.n	800672c <_swistat+0x18>

08006756 <_stat>:
 8006756:	b538      	push	{r3, r4, r5, lr}
 8006758:	460d      	mov	r5, r1
 800675a:	4604      	mov	r4, r0
 800675c:	2258      	movs	r2, #88	@ 0x58
 800675e:	2100      	movs	r1, #0
 8006760:	4628      	mov	r0, r5
 8006762:	f000 fa6b 	bl	8006c3c <memset>
 8006766:	4620      	mov	r0, r4
 8006768:	2100      	movs	r1, #0
 800676a:	f000 f811 	bl	8006790 <_swiopen>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	4604      	mov	r4, r0
 8006772:	d00b      	beq.n	800678c <_stat+0x36>
 8006774:	686b      	ldr	r3, [r5, #4]
 8006776:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800677a:	606b      	str	r3, [r5, #4]
 800677c:	4629      	mov	r1, r5
 800677e:	f7ff ffc9 	bl	8006714 <_swistat>
 8006782:	4605      	mov	r5, r0
 8006784:	4620      	mov	r0, r4
 8006786:	f7ff ffa3 	bl	80066d0 <_close>
 800678a:	462c      	mov	r4, r5
 800678c:	4620      	mov	r0, r4
 800678e:	bd38      	pop	{r3, r4, r5, pc}

08006790 <_swiopen>:
 8006790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	4f29      	ldr	r7, [pc, #164]	@ (800683c <_swiopen+0xac>)
 8006796:	b096      	sub	sp, #88	@ 0x58
 8006798:	4682      	mov	sl, r0
 800679a:	460e      	mov	r6, r1
 800679c:	2400      	movs	r4, #0
 800679e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80067a2:	3301      	adds	r3, #1
 80067a4:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80067a8:	d00c      	beq.n	80067c4 <_swiopen+0x34>
 80067aa:	3401      	adds	r4, #1
 80067ac:	2c14      	cmp	r4, #20
 80067ae:	d1f6      	bne.n	800679e <_swiopen+0xe>
 80067b0:	f000 fa4c 	bl	8006c4c <__errno>
 80067b4:	2318      	movs	r3, #24
 80067b6:	6003      	str	r3, [r0, #0]
 80067b8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80067bc:	4620      	mov	r0, r4
 80067be:	b016      	add	sp, #88	@ 0x58
 80067c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c4:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80067c8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80067cc:	46e9      	mov	r9, sp
 80067ce:	d109      	bne.n	80067e4 <_swiopen+0x54>
 80067d0:	4649      	mov	r1, r9
 80067d2:	4650      	mov	r0, sl
 80067d4:	f7ff ffbf 	bl	8006756 <_stat>
 80067d8:	3001      	adds	r0, #1
 80067da:	d003      	beq.n	80067e4 <_swiopen+0x54>
 80067dc:	f000 fa36 	bl	8006c4c <__errno>
 80067e0:	2311      	movs	r3, #17
 80067e2:	e7e8      	b.n	80067b6 <_swiopen+0x26>
 80067e4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80067e8:	f240 6301 	movw	r3, #1537	@ 0x601
 80067ec:	07b2      	lsls	r2, r6, #30
 80067ee:	bf48      	it	mi
 80067f0:	f045 0502 	orrmi.w	r5, r5, #2
 80067f4:	421e      	tst	r6, r3
 80067f6:	bf18      	it	ne
 80067f8:	f045 0504 	orrne.w	r5, r5, #4
 80067fc:	0733      	lsls	r3, r6, #28
 80067fe:	bf48      	it	mi
 8006800:	f025 0504 	bicmi.w	r5, r5, #4
 8006804:	4650      	mov	r0, sl
 8006806:	bf48      	it	mi
 8006808:	f045 0508 	orrmi.w	r5, r5, #8
 800680c:	f8cd a000 	str.w	sl, [sp]
 8006810:	f7f9 fcec 	bl	80001ec <strlen>
 8006814:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006818:	2501      	movs	r5, #1
 800681a:	4628      	mov	r0, r5
 800681c:	4649      	mov	r1, r9
 800681e:	beab      	bkpt	0x00ab
 8006820:	4605      	mov	r5, r0
 8006822:	2d00      	cmp	r5, #0
 8006824:	db05      	blt.n	8006832 <_swiopen+0xa2>
 8006826:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800682a:	4447      	add	r7, r8
 800682c:	2300      	movs	r3, #0
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	e7c4      	b.n	80067bc <_swiopen+0x2c>
 8006832:	4628      	mov	r0, r5
 8006834:	f7ff fe94 	bl	8006560 <error>
 8006838:	4604      	mov	r4, r0
 800683a:	e7bf      	b.n	80067bc <_swiopen+0x2c>
 800683c:	20025c50 	.word	0x20025c50

08006840 <_get_semihosting_exts>:
 8006840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4606      	mov	r6, r0
 8006846:	460f      	mov	r7, r1
 8006848:	4829      	ldr	r0, [pc, #164]	@ (80068f0 <_get_semihosting_exts+0xb0>)
 800684a:	2100      	movs	r1, #0
 800684c:	4615      	mov	r5, r2
 800684e:	f7ff ff9f 	bl	8006790 <_swiopen>
 8006852:	462a      	mov	r2, r5
 8006854:	4604      	mov	r4, r0
 8006856:	2100      	movs	r1, #0
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f9ef 	bl	8006c3c <memset>
 800685e:	1c63      	adds	r3, r4, #1
 8006860:	d014      	beq.n	800688c <_get_semihosting_exts+0x4c>
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff fe62 	bl	800652c <findslot>
 8006868:	f04f 080c 	mov.w	r8, #12
 800686c:	4681      	mov	r9, r0
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	beab      	bkpt	0x00ab
 8006874:	4680      	mov	r8, r0
 8006876:	4640      	mov	r0, r8
 8006878:	f7ff fe80 	bl	800657c <checkerror>
 800687c:	2803      	cmp	r0, #3
 800687e:	dd02      	ble.n	8006886 <_get_semihosting_exts+0x46>
 8006880:	1ec3      	subs	r3, r0, #3
 8006882:	42ab      	cmp	r3, r5
 8006884:	dc07      	bgt.n	8006896 <_get_semihosting_exts+0x56>
 8006886:	4620      	mov	r0, r4
 8006888:	f7ff ff22 	bl	80066d0 <_close>
 800688c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006890:	b003      	add	sp, #12
 8006892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006896:	2204      	movs	r2, #4
 8006898:	eb0d 0102 	add.w	r1, sp, r2
 800689c:	4620      	mov	r0, r4
 800689e:	f7ff fe82 	bl	80065a6 <_read>
 80068a2:	2803      	cmp	r0, #3
 80068a4:	ddef      	ble.n	8006886 <_get_semihosting_exts+0x46>
 80068a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80068aa:	2b53      	cmp	r3, #83	@ 0x53
 80068ac:	d1eb      	bne.n	8006886 <_get_semihosting_exts+0x46>
 80068ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80068b2:	2b48      	cmp	r3, #72	@ 0x48
 80068b4:	d1e7      	bne.n	8006886 <_get_semihosting_exts+0x46>
 80068b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80068ba:	2b46      	cmp	r3, #70	@ 0x46
 80068bc:	d1e3      	bne.n	8006886 <_get_semihosting_exts+0x46>
 80068be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068c2:	2b42      	cmp	r3, #66	@ 0x42
 80068c4:	d1df      	bne.n	8006886 <_get_semihosting_exts+0x46>
 80068c6:	2201      	movs	r2, #1
 80068c8:	4639      	mov	r1, r7
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7ff fe85 	bl	80065da <_swilseek>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	dbd8      	blt.n	8006886 <_get_semihosting_exts+0x46>
 80068d4:	462a      	mov	r2, r5
 80068d6:	4631      	mov	r1, r6
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff fe64 	bl	80065a6 <_read>
 80068de:	4605      	mov	r5, r0
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7ff fef5 	bl	80066d0 <_close>
 80068e6:	4628      	mov	r0, r5
 80068e8:	f7ff fe48 	bl	800657c <checkerror>
 80068ec:	e7d0      	b.n	8006890 <_get_semihosting_exts+0x50>
 80068ee:	bf00      	nop
 80068f0:	08008ac8 	.word	0x08008ac8

080068f4 <initialise_semihosting_exts>:
 80068f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068f6:	4d0a      	ldr	r5, [pc, #40]	@ (8006920 <initialise_semihosting_exts+0x2c>)
 80068f8:	4c0a      	ldr	r4, [pc, #40]	@ (8006924 <initialise_semihosting_exts+0x30>)
 80068fa:	2100      	movs	r1, #0
 80068fc:	2201      	movs	r2, #1
 80068fe:	a801      	add	r0, sp, #4
 8006900:	6029      	str	r1, [r5, #0]
 8006902:	6022      	str	r2, [r4, #0]
 8006904:	f7ff ff9c 	bl	8006840 <_get_semihosting_exts>
 8006908:	2800      	cmp	r0, #0
 800690a:	dd07      	ble.n	800691c <initialise_semihosting_exts+0x28>
 800690c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006910:	f003 0201 	and.w	r2, r3, #1
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	602a      	str	r2, [r5, #0]
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	b003      	add	sp, #12
 800691e:	bd30      	pop	{r4, r5, pc}
 8006920:	20000158 	.word	0x20000158
 8006924:	20000154 	.word	0x20000154

08006928 <_has_ext_stdout_stderr>:
 8006928:	b510      	push	{r4, lr}
 800692a:	4c04      	ldr	r4, [pc, #16]	@ (800693c <_has_ext_stdout_stderr+0x14>)
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	da01      	bge.n	8006936 <_has_ext_stdout_stderr+0xe>
 8006932:	f7ff ffdf 	bl	80068f4 <initialise_semihosting_exts>
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	bd10      	pop	{r4, pc}
 800693a:	bf00      	nop
 800693c:	20000154 	.word	0x20000154

08006940 <initialise_monitor_handles>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	b085      	sub	sp, #20
 8006946:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80069f8 <initialise_monitor_handles+0xb8>
 800694a:	f8cd 9004 	str.w	r9, [sp, #4]
 800694e:	2303      	movs	r3, #3
 8006950:	2400      	movs	r4, #0
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	af01      	add	r7, sp, #4
 8006956:	9402      	str	r4, [sp, #8]
 8006958:	2501      	movs	r5, #1
 800695a:	4628      	mov	r0, r5
 800695c:	4639      	mov	r1, r7
 800695e:	beab      	bkpt	0x00ab
 8006960:	4605      	mov	r5, r0
 8006962:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80069fc <initialise_monitor_handles+0xbc>
 8006966:	4623      	mov	r3, r4
 8006968:	4c20      	ldr	r4, [pc, #128]	@ (80069ec <initialise_monitor_handles+0xac>)
 800696a:	f8c8 5000 	str.w	r5, [r8]
 800696e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006972:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006976:	3301      	adds	r3, #1
 8006978:	2b14      	cmp	r3, #20
 800697a:	d1fa      	bne.n	8006972 <initialise_monitor_handles+0x32>
 800697c:	f7ff ffd4 	bl	8006928 <_has_ext_stdout_stderr>
 8006980:	4d1b      	ldr	r5, [pc, #108]	@ (80069f0 <initialise_monitor_handles+0xb0>)
 8006982:	b1d0      	cbz	r0, 80069ba <initialise_monitor_handles+0x7a>
 8006984:	f04f 0a03 	mov.w	sl, #3
 8006988:	2304      	movs	r3, #4
 800698a:	f8cd 9004 	str.w	r9, [sp, #4]
 800698e:	2601      	movs	r6, #1
 8006990:	f8cd a00c 	str.w	sl, [sp, #12]
 8006994:	9302      	str	r3, [sp, #8]
 8006996:	4630      	mov	r0, r6
 8006998:	4639      	mov	r1, r7
 800699a:	beab      	bkpt	0x00ab
 800699c:	4683      	mov	fp, r0
 800699e:	4b15      	ldr	r3, [pc, #84]	@ (80069f4 <initialise_monitor_handles+0xb4>)
 80069a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80069a4:	f8c3 b000 	str.w	fp, [r3]
 80069a8:	2308      	movs	r3, #8
 80069aa:	f8cd a00c 	str.w	sl, [sp, #12]
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	beab      	bkpt	0x00ab
 80069b6:	4606      	mov	r6, r0
 80069b8:	602e      	str	r6, [r5, #0]
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	3301      	adds	r3, #1
 80069be:	bf02      	ittt	eq
 80069c0:	4b0c      	ldreq	r3, [pc, #48]	@ (80069f4 <initialise_monitor_handles+0xb4>)
 80069c2:	681b      	ldreq	r3, [r3, #0]
 80069c4:	602b      	streq	r3, [r5, #0]
 80069c6:	2600      	movs	r6, #0
 80069c8:	f8d8 3000 	ldr.w	r3, [r8]
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	6066      	str	r6, [r4, #4]
 80069d0:	f7ff ffaa 	bl	8006928 <_has_ext_stdout_stderr>
 80069d4:	b130      	cbz	r0, 80069e4 <initialise_monitor_handles+0xa4>
 80069d6:	4b07      	ldr	r3, [pc, #28]	@ (80069f4 <initialise_monitor_handles+0xb4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80069e4:	b005      	add	sp, #20
 80069e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ea:	bf00      	nop
 80069ec:	20025c50 	.word	0x20025c50
 80069f0:	20025c44 	.word	0x20025c44
 80069f4:	20025c48 	.word	0x20025c48
 80069f8:	08008ade 	.word	0x08008ade
 80069fc:	20025c4c 	.word	0x20025c4c

08006a00 <__itoa>:
 8006a00:	1e93      	subs	r3, r2, #2
 8006a02:	2b22      	cmp	r3, #34	@ 0x22
 8006a04:	b510      	push	{r4, lr}
 8006a06:	460c      	mov	r4, r1
 8006a08:	d904      	bls.n	8006a14 <__itoa+0x14>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	700b      	strb	r3, [r1, #0]
 8006a0e:	461c      	mov	r4, r3
 8006a10:	4620      	mov	r0, r4
 8006a12:	bd10      	pop	{r4, pc}
 8006a14:	2a0a      	cmp	r2, #10
 8006a16:	d109      	bne.n	8006a2c <__itoa+0x2c>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	da07      	bge.n	8006a2c <__itoa+0x2c>
 8006a1c:	232d      	movs	r3, #45	@ 0x2d
 8006a1e:	700b      	strb	r3, [r1, #0]
 8006a20:	4240      	negs	r0, r0
 8006a22:	2101      	movs	r1, #1
 8006a24:	4421      	add	r1, r4
 8006a26:	f000 f8a9 	bl	8006b7c <__utoa>
 8006a2a:	e7f1      	b.n	8006a10 <__itoa+0x10>
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	e7f9      	b.n	8006a24 <__itoa+0x24>

08006a30 <itoa>:
 8006a30:	f7ff bfe6 	b.w	8006a00 <__itoa>

08006a34 <std>:
 8006a34:	2300      	movs	r3, #0
 8006a36:	b510      	push	{r4, lr}
 8006a38:	4604      	mov	r4, r0
 8006a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a42:	6083      	str	r3, [r0, #8]
 8006a44:	8181      	strh	r1, [r0, #12]
 8006a46:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a48:	81c2      	strh	r2, [r0, #14]
 8006a4a:	6183      	str	r3, [r0, #24]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	2208      	movs	r2, #8
 8006a50:	305c      	adds	r0, #92	@ 0x5c
 8006a52:	f000 f8f3 	bl	8006c3c <memset>
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <std+0x58>)
 8006a58:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x5c>)
 8006a5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x60>)
 8006a60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <std+0x64>)
 8006a64:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <std+0x68>)
 8006a68:	6224      	str	r4, [r4, #32]
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d006      	beq.n	8006a7c <std+0x48>
 8006a6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a72:	4294      	cmp	r4, r2
 8006a74:	d002      	beq.n	8006a7c <std+0x48>
 8006a76:	33d0      	adds	r3, #208	@ 0xd0
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	d105      	bne.n	8006a88 <std+0x54>
 8006a7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a84:	f000 b90c 	b.w	8006ca0 <__retarget_lock_init_recursive>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08006e19 	.word	0x08006e19
 8006a90:	08006e3b 	.word	0x08006e3b
 8006a94:	08006e73 	.word	0x08006e73
 8006a98:	08006e97 	.word	0x08006e97
 8006a9c:	20025cf0 	.word	0x20025cf0

08006aa0 <stdio_exit_handler>:
 8006aa0:	4a02      	ldr	r2, [pc, #8]	@ (8006aac <stdio_exit_handler+0xc>)
 8006aa2:	4903      	ldr	r1, [pc, #12]	@ (8006ab0 <stdio_exit_handler+0x10>)
 8006aa4:	4803      	ldr	r0, [pc, #12]	@ (8006ab4 <stdio_exit_handler+0x14>)
 8006aa6:	f000 b8ab 	b.w	8006c00 <_fwalk_sglue>
 8006aaa:	bf00      	nop
 8006aac:	2000015c 	.word	0x2000015c
 8006ab0:	08006db1 	.word	0x08006db1
 8006ab4:	2000016c 	.word	0x2000016c

08006ab8 <cleanup_stdio>:
 8006ab8:	6841      	ldr	r1, [r0, #4]
 8006aba:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <cleanup_stdio+0x34>)
 8006abc:	4299      	cmp	r1, r3
 8006abe:	b510      	push	{r4, lr}
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	d001      	beq.n	8006ac8 <cleanup_stdio+0x10>
 8006ac4:	f000 f974 	bl	8006db0 <_fflush_r>
 8006ac8:	68a1      	ldr	r1, [r4, #8]
 8006aca:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <cleanup_stdio+0x38>)
 8006acc:	4299      	cmp	r1, r3
 8006ace:	d002      	beq.n	8006ad6 <cleanup_stdio+0x1e>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 f96d 	bl	8006db0 <_fflush_r>
 8006ad6:	68e1      	ldr	r1, [r4, #12]
 8006ad8:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <cleanup_stdio+0x3c>)
 8006ada:	4299      	cmp	r1, r3
 8006adc:	d004      	beq.n	8006ae8 <cleanup_stdio+0x30>
 8006ade:	4620      	mov	r0, r4
 8006ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae4:	f000 b964 	b.w	8006db0 <_fflush_r>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	bf00      	nop
 8006aec:	20025cf0 	.word	0x20025cf0
 8006af0:	20025d58 	.word	0x20025d58
 8006af4:	20025dc0 	.word	0x20025dc0

08006af8 <global_stdio_init.part.0>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <global_stdio_init.part.0+0x30>)
 8006afc:	4c0b      	ldr	r4, [pc, #44]	@ (8006b2c <global_stdio_init.part.0+0x34>)
 8006afe:	4a0c      	ldr	r2, [pc, #48]	@ (8006b30 <global_stdio_init.part.0+0x38>)
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	4620      	mov	r0, r4
 8006b04:	2200      	movs	r2, #0
 8006b06:	2104      	movs	r1, #4
 8006b08:	f7ff ff94 	bl	8006a34 <std>
 8006b0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b10:	2201      	movs	r2, #1
 8006b12:	2109      	movs	r1, #9
 8006b14:	f7ff ff8e 	bl	8006a34 <std>
 8006b18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b22:	2112      	movs	r1, #18
 8006b24:	f7ff bf86 	b.w	8006a34 <std>
 8006b28:	20025e28 	.word	0x20025e28
 8006b2c:	20025cf0 	.word	0x20025cf0
 8006b30:	08006aa1 	.word	0x08006aa1

08006b34 <__sfp_lock_acquire>:
 8006b34:	4801      	ldr	r0, [pc, #4]	@ (8006b3c <__sfp_lock_acquire+0x8>)
 8006b36:	f000 b8b4 	b.w	8006ca2 <__retarget_lock_acquire_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	20025e2d 	.word	0x20025e2d

08006b40 <__sfp_lock_release>:
 8006b40:	4801      	ldr	r0, [pc, #4]	@ (8006b48 <__sfp_lock_release+0x8>)
 8006b42:	f000 b8af 	b.w	8006ca4 <__retarget_lock_release_recursive>
 8006b46:	bf00      	nop
 8006b48:	20025e2d 	.word	0x20025e2d

08006b4c <__sinit>:
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	4604      	mov	r4, r0
 8006b50:	f7ff fff0 	bl	8006b34 <__sfp_lock_acquire>
 8006b54:	6a23      	ldr	r3, [r4, #32]
 8006b56:	b11b      	cbz	r3, 8006b60 <__sinit+0x14>
 8006b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b5c:	f7ff bff0 	b.w	8006b40 <__sfp_lock_release>
 8006b60:	4b04      	ldr	r3, [pc, #16]	@ (8006b74 <__sinit+0x28>)
 8006b62:	6223      	str	r3, [r4, #32]
 8006b64:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <__sinit+0x2c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1f5      	bne.n	8006b58 <__sinit+0xc>
 8006b6c:	f7ff ffc4 	bl	8006af8 <global_stdio_init.part.0>
 8006b70:	e7f2      	b.n	8006b58 <__sinit+0xc>
 8006b72:	bf00      	nop
 8006b74:	08006ab9 	.word	0x08006ab9
 8006b78:	20025e28 	.word	0x20025e28

08006b7c <__utoa>:
 8006b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7e:	4c1f      	ldr	r4, [pc, #124]	@ (8006bfc <__utoa+0x80>)
 8006b80:	b08b      	sub	sp, #44	@ 0x2c
 8006b82:	4605      	mov	r5, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	466e      	mov	r6, sp
 8006b88:	f104 0c20 	add.w	ip, r4, #32
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	6861      	ldr	r1, [r4, #4]
 8006b90:	4637      	mov	r7, r6
 8006b92:	c703      	stmia	r7!, {r0, r1}
 8006b94:	3408      	adds	r4, #8
 8006b96:	4564      	cmp	r4, ip
 8006b98:	463e      	mov	r6, r7
 8006b9a:	d1f7      	bne.n	8006b8c <__utoa+0x10>
 8006b9c:	7921      	ldrb	r1, [r4, #4]
 8006b9e:	7139      	strb	r1, [r7, #4]
 8006ba0:	1e91      	subs	r1, r2, #2
 8006ba2:	6820      	ldr	r0, [r4, #0]
 8006ba4:	6038      	str	r0, [r7, #0]
 8006ba6:	2922      	cmp	r1, #34	@ 0x22
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	d904      	bls.n	8006bb8 <__utoa+0x3c>
 8006bae:	7019      	strb	r1, [r3, #0]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	b00b      	add	sp, #44	@ 0x2c
 8006bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb8:	1e58      	subs	r0, r3, #1
 8006bba:	4684      	mov	ip, r0
 8006bbc:	fbb5 f7f2 	udiv	r7, r5, r2
 8006bc0:	fb02 5617 	mls	r6, r2, r7, r5
 8006bc4:	3628      	adds	r6, #40	@ 0x28
 8006bc6:	446e      	add	r6, sp
 8006bc8:	460c      	mov	r4, r1
 8006bca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006bce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006bd2:	462e      	mov	r6, r5
 8006bd4:	42b2      	cmp	r2, r6
 8006bd6:	f101 0101 	add.w	r1, r1, #1
 8006bda:	463d      	mov	r5, r7
 8006bdc:	d9ee      	bls.n	8006bbc <__utoa+0x40>
 8006bde:	2200      	movs	r2, #0
 8006be0:	545a      	strb	r2, [r3, r1]
 8006be2:	1919      	adds	r1, r3, r4
 8006be4:	1aa5      	subs	r5, r4, r2
 8006be6:	42aa      	cmp	r2, r5
 8006be8:	dae3      	bge.n	8006bb2 <__utoa+0x36>
 8006bea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006bee:	780e      	ldrb	r6, [r1, #0]
 8006bf0:	7006      	strb	r6, [r0, #0]
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	f801 5901 	strb.w	r5, [r1], #-1
 8006bf8:	e7f4      	b.n	8006be4 <__utoa+0x68>
 8006bfa:	bf00      	nop
 8006bfc:	08008ae2 	.word	0x08008ae2

08006c00 <_fwalk_sglue>:
 8006c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c04:	4607      	mov	r7, r0
 8006c06:	4688      	mov	r8, r1
 8006c08:	4614      	mov	r4, r2
 8006c0a:	2600      	movs	r6, #0
 8006c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c10:	f1b9 0901 	subs.w	r9, r9, #1
 8006c14:	d505      	bpl.n	8006c22 <_fwalk_sglue+0x22>
 8006c16:	6824      	ldr	r4, [r4, #0]
 8006c18:	2c00      	cmp	r4, #0
 8006c1a:	d1f7      	bne.n	8006c0c <_fwalk_sglue+0xc>
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d907      	bls.n	8006c38 <_fwalk_sglue+0x38>
 8006c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	d003      	beq.n	8006c38 <_fwalk_sglue+0x38>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c0      	blx	r8
 8006c36:	4306      	orrs	r6, r0
 8006c38:	3568      	adds	r5, #104	@ 0x68
 8006c3a:	e7e9      	b.n	8006c10 <_fwalk_sglue+0x10>

08006c3c <memset>:
 8006c3c:	4402      	add	r2, r0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d100      	bne.n	8006c46 <memset+0xa>
 8006c44:	4770      	bx	lr
 8006c46:	f803 1b01 	strb.w	r1, [r3], #1
 8006c4a:	e7f9      	b.n	8006c40 <memset+0x4>

08006c4c <__errno>:
 8006c4c:	4b01      	ldr	r3, [pc, #4]	@ (8006c54 <__errno+0x8>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000168 	.word	0x20000168

08006c58 <__libc_init_array>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c90 <__libc_init_array+0x38>)
 8006c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c94 <__libc_init_array+0x3c>)
 8006c5e:	1b64      	subs	r4, r4, r5
 8006c60:	10a4      	asrs	r4, r4, #2
 8006c62:	2600      	movs	r6, #0
 8006c64:	42a6      	cmp	r6, r4
 8006c66:	d109      	bne.n	8006c7c <__libc_init_array+0x24>
 8006c68:	4d0b      	ldr	r5, [pc, #44]	@ (8006c98 <__libc_init_array+0x40>)
 8006c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c9c <__libc_init_array+0x44>)
 8006c6c:	f000 f9a8 	bl	8006fc0 <_init>
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	2600      	movs	r6, #0
 8006c76:	42a6      	cmp	r6, r4
 8006c78:	d105      	bne.n	8006c86 <__libc_init_array+0x2e>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c80:	4798      	blx	r3
 8006c82:	3601      	adds	r6, #1
 8006c84:	e7ee      	b.n	8006c64 <__libc_init_array+0xc>
 8006c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8a:	4798      	blx	r3
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	e7f2      	b.n	8006c76 <__libc_init_array+0x1e>
 8006c90:	08008b10 	.word	0x08008b10
 8006c94:	08008b10 	.word	0x08008b10
 8006c98:	08008b10 	.word	0x08008b10
 8006c9c:	08008b14 	.word	0x08008b14

08006ca0 <__retarget_lock_init_recursive>:
 8006ca0:	4770      	bx	lr

08006ca2 <__retarget_lock_acquire_recursive>:
 8006ca2:	4770      	bx	lr

08006ca4 <__retarget_lock_release_recursive>:
 8006ca4:	4770      	bx	lr
	...

08006ca8 <__sflush_r>:
 8006ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb0:	0716      	lsls	r6, r2, #28
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	d454      	bmi.n	8006d62 <__sflush_r+0xba>
 8006cb8:	684b      	ldr	r3, [r1, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dc02      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dd48      	ble.n	8006d56 <__sflush_r+0xae>
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d045      	beq.n	8006d56 <__sflush_r+0xae>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cd0:	682f      	ldr	r7, [r5, #0]
 8006cd2:	6a21      	ldr	r1, [r4, #32]
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	d030      	beq.n	8006d3a <__sflush_r+0x92>
 8006cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	0759      	lsls	r1, r3, #29
 8006cde:	d505      	bpl.n	8006cec <__sflush_r+0x44>
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	1ad2      	subs	r2, r2, r3
 8006ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ce6:	b10b      	cbz	r3, 8006cec <__sflush_r+0x44>
 8006ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cf0:	6a21      	ldr	r1, [r4, #32]
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b0      	blx	r6
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	d106      	bne.n	8006d0a <__sflush_r+0x62>
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	291d      	cmp	r1, #29
 8006d00:	d82b      	bhi.n	8006d5a <__sflush_r+0xb2>
 8006d02:	4a2a      	ldr	r2, [pc, #168]	@ (8006dac <__sflush_r+0x104>)
 8006d04:	410a      	asrs	r2, r1
 8006d06:	07d6      	lsls	r6, r2, #31
 8006d08:	d427      	bmi.n	8006d5a <__sflush_r+0xb2>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	04d9      	lsls	r1, r3, #19
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	d504      	bpl.n	8006d20 <__sflush_r+0x78>
 8006d16:	1c42      	adds	r2, r0, #1
 8006d18:	d101      	bne.n	8006d1e <__sflush_r+0x76>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b903      	cbnz	r3, 8006d20 <__sflush_r+0x78>
 8006d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d22:	602f      	str	r7, [r5, #0]
 8006d24:	b1b9      	cbz	r1, 8006d56 <__sflush_r+0xae>
 8006d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d002      	beq.n	8006d34 <__sflush_r+0x8c>
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f8fc 	bl	8006f2c <_free_r>
 8006d34:	2300      	movs	r3, #0
 8006d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d38:	e00d      	b.n	8006d56 <__sflush_r+0xae>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b0      	blx	r6
 8006d40:	4602      	mov	r2, r0
 8006d42:	1c50      	adds	r0, r2, #1
 8006d44:	d1c9      	bne.n	8006cda <__sflush_r+0x32>
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0c6      	beq.n	8006cda <__sflush_r+0x32>
 8006d4c:	2b1d      	cmp	r3, #29
 8006d4e:	d001      	beq.n	8006d54 <__sflush_r+0xac>
 8006d50:	2b16      	cmp	r3, #22
 8006d52:	d11e      	bne.n	8006d92 <__sflush_r+0xea>
 8006d54:	602f      	str	r7, [r5, #0]
 8006d56:	2000      	movs	r0, #0
 8006d58:	e022      	b.n	8006da0 <__sflush_r+0xf8>
 8006d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d5e:	b21b      	sxth	r3, r3
 8006d60:	e01b      	b.n	8006d9a <__sflush_r+0xf2>
 8006d62:	690f      	ldr	r7, [r1, #16]
 8006d64:	2f00      	cmp	r7, #0
 8006d66:	d0f6      	beq.n	8006d56 <__sflush_r+0xae>
 8006d68:	0793      	lsls	r3, r2, #30
 8006d6a:	680e      	ldr	r6, [r1, #0]
 8006d6c:	bf08      	it	eq
 8006d6e:	694b      	ldreq	r3, [r1, #20]
 8006d70:	600f      	str	r7, [r1, #0]
 8006d72:	bf18      	it	ne
 8006d74:	2300      	movne	r3, #0
 8006d76:	eba6 0807 	sub.w	r8, r6, r7
 8006d7a:	608b      	str	r3, [r1, #8]
 8006d7c:	f1b8 0f00 	cmp.w	r8, #0
 8006d80:	dde9      	ble.n	8006d56 <__sflush_r+0xae>
 8006d82:	6a21      	ldr	r1, [r4, #32]
 8006d84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d86:	4643      	mov	r3, r8
 8006d88:	463a      	mov	r2, r7
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b0      	blx	r6
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	dc08      	bgt.n	8006da4 <__sflush_r+0xfc>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da4:	4407      	add	r7, r0
 8006da6:	eba8 0800 	sub.w	r8, r8, r0
 8006daa:	e7e7      	b.n	8006d7c <__sflush_r+0xd4>
 8006dac:	dfbffffe 	.word	0xdfbffffe

08006db0 <_fflush_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	690b      	ldr	r3, [r1, #16]
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	b913      	cbnz	r3, 8006dc0 <_fflush_r+0x10>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	b118      	cbz	r0, 8006dca <_fflush_r+0x1a>
 8006dc2:	6a03      	ldr	r3, [r0, #32]
 8006dc4:	b90b      	cbnz	r3, 8006dca <_fflush_r+0x1a>
 8006dc6:	f7ff fec1 	bl	8006b4c <__sinit>
 8006dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f3      	beq.n	8006dba <_fflush_r+0xa>
 8006dd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dd4:	07d0      	lsls	r0, r2, #31
 8006dd6:	d404      	bmi.n	8006de2 <_fflush_r+0x32>
 8006dd8:	0599      	lsls	r1, r3, #22
 8006dda:	d402      	bmi.n	8006de2 <_fflush_r+0x32>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dde:	f7ff ff60 	bl	8006ca2 <__retarget_lock_acquire_recursive>
 8006de2:	4628      	mov	r0, r5
 8006de4:	4621      	mov	r1, r4
 8006de6:	f7ff ff5f 	bl	8006ca8 <__sflush_r>
 8006dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dec:	07da      	lsls	r2, r3, #31
 8006dee:	4605      	mov	r5, r0
 8006df0:	d4e4      	bmi.n	8006dbc <_fflush_r+0xc>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	059b      	lsls	r3, r3, #22
 8006df6:	d4e1      	bmi.n	8006dbc <_fflush_r+0xc>
 8006df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dfa:	f7ff ff53 	bl	8006ca4 <__retarget_lock_release_recursive>
 8006dfe:	e7dd      	b.n	8006dbc <_fflush_r+0xc>

08006e00 <__malloc_lock>:
 8006e00:	4801      	ldr	r0, [pc, #4]	@ (8006e08 <__malloc_lock+0x8>)
 8006e02:	f7ff bf4e 	b.w	8006ca2 <__retarget_lock_acquire_recursive>
 8006e06:	bf00      	nop
 8006e08:	20025e2c 	.word	0x20025e2c

08006e0c <__malloc_unlock>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	@ (8006e14 <__malloc_unlock+0x8>)
 8006e0e:	f7ff bf49 	b.w	8006ca4 <__retarget_lock_release_recursive>
 8006e12:	bf00      	nop
 8006e14:	20025e2c 	.word	0x20025e2c

08006e18 <__sread>:
 8006e18:	b510      	push	{r4, lr}
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e20:	f000 f860 	bl	8006ee4 <_read_r>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	bfab      	itete	ge
 8006e28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e2c:	181b      	addge	r3, r3, r0
 8006e2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e32:	bfac      	ite	ge
 8006e34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e36:	81a3      	strhlt	r3, [r4, #12]
 8006e38:	bd10      	pop	{r4, pc}

08006e3a <__swrite>:
 8006e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3e:	461f      	mov	r7, r3
 8006e40:	898b      	ldrh	r3, [r1, #12]
 8006e42:	05db      	lsls	r3, r3, #23
 8006e44:	4605      	mov	r5, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	4616      	mov	r6, r2
 8006e4a:	d505      	bpl.n	8006e58 <__swrite+0x1e>
 8006e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e50:	2302      	movs	r3, #2
 8006e52:	2200      	movs	r2, #0
 8006e54:	f000 f834 	bl	8006ec0 <_lseek_r>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	4632      	mov	r2, r6
 8006e66:	463b      	mov	r3, r7
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6e:	f000 b84b 	b.w	8006f08 <_write_r>

08006e72 <__sseek>:
 8006e72:	b510      	push	{r4, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7a:	f000 f821 	bl	8006ec0 <_lseek_r>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	bf15      	itete	ne
 8006e84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e8e:	81a3      	strheq	r3, [r4, #12]
 8006e90:	bf18      	it	ne
 8006e92:	81a3      	strhne	r3, [r4, #12]
 8006e94:	bd10      	pop	{r4, pc}

08006e96 <__sclose>:
 8006e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9a:	f000 b801 	b.w	8006ea0 <_close_r>
	...

08006ea0 <_close_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d06      	ldr	r5, [pc, #24]	@ (8006ebc <_close_r+0x1c>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	f7ff fc10 	bl	80066d0 <_close>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_close_r+0x1a>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_close_r+0x1a>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20025e34 	.word	0x20025e34

08006ec0 <_lseek_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d07      	ldr	r5, [pc, #28]	@ (8006ee0 <_lseek_r+0x20>)
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4611      	mov	r1, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	602a      	str	r2, [r5, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f7ff fbbf 	bl	8006652 <_lseek>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_lseek_r+0x1e>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_lseek_r+0x1e>
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	20025e34 	.word	0x20025e34

08006ee4 <_read_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d07      	ldr	r5, [pc, #28]	@ (8006f04 <_read_r+0x20>)
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7ff fb57 	bl	80065a6 <_read>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_read_r+0x1e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_read_r+0x1e>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20025e34 	.word	0x20025e34

08006f08 <_write_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	@ (8006f28 <_write_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7ff fbad 	bl	8006676 <_write>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_write_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_write_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20025e34 	.word	0x20025e34

08006f2c <_free_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4605      	mov	r5, r0
 8006f30:	2900      	cmp	r1, #0
 8006f32:	d041      	beq.n	8006fb8 <_free_r+0x8c>
 8006f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f38:	1f0c      	subs	r4, r1, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bfb8      	it	lt
 8006f3e:	18e4      	addlt	r4, r4, r3
 8006f40:	f7ff ff5e 	bl	8006e00 <__malloc_lock>
 8006f44:	4a1d      	ldr	r2, [pc, #116]	@ (8006fbc <_free_r+0x90>)
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	b933      	cbnz	r3, 8006f58 <_free_r+0x2c>
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	6014      	str	r4, [r2, #0]
 8006f4e:	4628      	mov	r0, r5
 8006f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f54:	f7ff bf5a 	b.w	8006e0c <__malloc_unlock>
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	d908      	bls.n	8006f6e <_free_r+0x42>
 8006f5c:	6820      	ldr	r0, [r4, #0]
 8006f5e:	1821      	adds	r1, r4, r0
 8006f60:	428b      	cmp	r3, r1
 8006f62:	bf01      	itttt	eq
 8006f64:	6819      	ldreq	r1, [r3, #0]
 8006f66:	685b      	ldreq	r3, [r3, #4]
 8006f68:	1809      	addeq	r1, r1, r0
 8006f6a:	6021      	streq	r1, [r4, #0]
 8006f6c:	e7ed      	b.n	8006f4a <_free_r+0x1e>
 8006f6e:	461a      	mov	r2, r3
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	b10b      	cbz	r3, 8006f78 <_free_r+0x4c>
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d9fa      	bls.n	8006f6e <_free_r+0x42>
 8006f78:	6811      	ldr	r1, [r2, #0]
 8006f7a:	1850      	adds	r0, r2, r1
 8006f7c:	42a0      	cmp	r0, r4
 8006f7e:	d10b      	bne.n	8006f98 <_free_r+0x6c>
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	4401      	add	r1, r0
 8006f84:	1850      	adds	r0, r2, r1
 8006f86:	4283      	cmp	r3, r0
 8006f88:	6011      	str	r1, [r2, #0]
 8006f8a:	d1e0      	bne.n	8006f4e <_free_r+0x22>
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	6053      	str	r3, [r2, #4]
 8006f92:	4408      	add	r0, r1
 8006f94:	6010      	str	r0, [r2, #0]
 8006f96:	e7da      	b.n	8006f4e <_free_r+0x22>
 8006f98:	d902      	bls.n	8006fa0 <_free_r+0x74>
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	e7d6      	b.n	8006f4e <_free_r+0x22>
 8006fa0:	6820      	ldr	r0, [r4, #0]
 8006fa2:	1821      	adds	r1, r4, r0
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	bf04      	itt	eq
 8006fa8:	6819      	ldreq	r1, [r3, #0]
 8006faa:	685b      	ldreq	r3, [r3, #4]
 8006fac:	6063      	str	r3, [r4, #4]
 8006fae:	bf04      	itt	eq
 8006fb0:	1809      	addeq	r1, r1, r0
 8006fb2:	6021      	streq	r1, [r4, #0]
 8006fb4:	6054      	str	r4, [r2, #4]
 8006fb6:	e7ca      	b.n	8006f4e <_free_r+0x22>
 8006fb8:	bd38      	pop	{r3, r4, r5, pc}
 8006fba:	bf00      	nop
 8006fbc:	20025e30 	.word	0x20025e30

08006fc0 <_init>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	bf00      	nop
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr

08006fcc <_fini>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr
