
FContrerasAcostaFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000128c  08006580  08006580  00007580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800780c  0800780c  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  0800780c  0800780c  0000880c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007814  08007814  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007814  08007814  00008814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007818  08007818  00008818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800781c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          00025bc0  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c40  20025c40  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d97a  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026d8  00000000  00000000  00016a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00019108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a20  00000000  00000000  00019e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c3a  00000000  00000000  0001a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110bc  00000000  00000000  000404ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfc5f  00000000  00000000  00051576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001311d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004158  00000000  00000000  00131218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00135370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006568 	.word	0x08006568

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08006568 	.word	0x08006568

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f004 ffde 	bl	8005554 <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f000 f9d6 	bl	8000948 <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f993 	bl	80008c8 <LTCD_Layer_Init>
    //TODO: Comment/Delete the LCD_Clear function call!
    LCD_Clear(0,LCD_COLOR_BLACK);
 80005a2:	2100      	movs	r1, #0
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fa4b 	bl	8000a40 <LCD_Clear>


    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005aa:	f000 fb21 	bl	8000bf0 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ae:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <ApplicationInit+0x30>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005b4:	f000 f80c 	bl	80005d0 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS

	First_Screen();
 80005b8:	f000 f804 	bl	80005c4 <First_Screen>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000009c 	.word	0x2000009c

080005c4 <First_Screen>:
{
	visualDemo();
}

void First_Screen(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	Start_Screen();
 80005c8:	f000 fb48 	bl	8000c5c <Start_Screen>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e8:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ea:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005ee:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	@ 0x30
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4807      	ldr	r0, [pc, #28]	@ (8000638 <LCDTouchScreenInterruptGPIOInit+0x68>)
 800061a:	f001 fec3 	bl	80023a4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800061e:	2028      	movs	r0, #40	@ 0x28
 8000620:	f001 fe71 	bl	8002306 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000626:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000628:	601a      	str	r2, [r3, #0]

}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000
 800063c:	200000a4 	.word	0x200000a4
 8000640:	0600000f 	.word	0x0600000f

08000644 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800064a:	2028      	movs	r0, #40	@ 0x28
 800064c:	f001 fe69 	bl	8002322 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000650:	2300      	movs	r3, #0
 8000652:	71fb      	strb	r3, [r7, #7]
	//while(count == 0){
	//	count = STMPE811_Read(STMPE811_FIFO_SIZE);
	//}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fae1 	bl	8000c1c <ReadRegisterFromTouchModule>
 800065a:	4603      	mov	r3, r0
 800065c:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 800065e:	2100      	movs	r1, #0
 8000660:	200a      	movs	r0, #10
 8000662:	f000 fae9 	bl	8000c38 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000666:	200b      	movs	r0, #11
 8000668:	f000 fad8 	bl	8000c1c <ReadRegisterFromTouchModule>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <EXTI15_10_IRQHandler+0xdc>)
 8000672:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <EXTI15_10_IRQHandler+0xdc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	4619      	mov	r1, r3
 8000682:	200b      	movs	r0, #11
 8000684:	f000 fad8 	bl	8000c38 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000688:	2040      	movs	r0, #64	@ 0x40
 800068a:	f000 fac7 	bl	8000c1c <ReadRegisterFromTouchModule>
 800068e:	4603      	mov	r3, r0
 8000690:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000692:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	da01      	bge.n	800069e <EXTI15_10_IRQHandler+0x5a>
	{
		isTouchDetected = true;
 800069a:	2301      	movs	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d014      	beq.n	80006ce <EXTI15_10_IRQHandler+0x8a>
	{
		printf("\nPressed");
 80006a4:	481f      	ldr	r0, [pc, #124]	@ (8000724 <EXTI15_10_IRQHandler+0xe0>)
 80006a6:	f005 f895 	bl	80057d4 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 80006aa:	481f      	ldr	r0, [pc, #124]	@ (8000728 <EXTI15_10_IRQHandler+0xe4>)
 80006ac:	f000 faab 	bl	8000c06 <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <EXTI15_10_IRQHandler+0xe4>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <EXTI15_10_IRQHandler+0xe4>)
 80006b8:	885b      	ldrh	r3, [r3, #2]
 80006ba:	461a      	mov	r2, r3
 80006bc:	481b      	ldr	r0, [pc, #108]	@ (800072c <EXTI15_10_IRQHandler+0xe8>)
 80006be:	f005 f889 	bl	80057d4 <iprintf>
		LCD_Clear(0, LCD_COLOR_RED);
 80006c2:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f9ba 	bl	8000a40 <LCD_Clear>
 80006cc:	e007      	b.n	80006de <EXTI15_10_IRQHandler+0x9a>

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006ce:	4818      	ldr	r0, [pc, #96]	@ (8000730 <EXTI15_10_IRQHandler+0xec>)
 80006d0:	f005 f8e8 	bl	80058a4 <puts>
		LCD_Clear(0, LCD_COLOR_GREEN);
 80006d4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f9b1 	bl	8000a40 <LCD_Clear>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006de:	2101      	movs	r1, #1
 80006e0:	204b      	movs	r0, #75	@ 0x4b
 80006e2:	f001 f94d 	bl	8001980 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006e6:	2100      	movs	r1, #0
 80006e8:	204b      	movs	r0, #75	@ 0x4b
 80006ea:	f001 f949 	bl	8001980 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	4619      	mov	r1, r3
 80006f2:	200a      	movs	r0, #10
 80006f4:	f000 faa0 	bl	8000c38 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 80006f8:	2103      	movs	r1, #3
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <EXTI15_10_IRQHandler+0xf0>)
 80006fc:	f001 fe3a 	bl	8002374 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000700:	2028      	movs	r0, #40	@ 0x28
 8000702:	f001 fe28 	bl	8002356 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000706:	2028      	movs	r0, #40	@ 0x28
 8000708:	f001 fdfd 	bl	8002306 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800070c:	797b      	ldrb	r3, [r7, #5]
 800070e:	4619      	mov	r1, r3
 8000710:	200b      	movs	r0, #11
 8000712:	f000 fa91 	bl	8000c38 <WriteDataToTouchModule>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000ac 	.word	0x200000ac
 8000724:	080065a4 	.word	0x080065a4
 8000728:	2000009c 	.word	0x2000009c
 800072c:	080065b0 	.word	0x080065b0
 8000730:	080065c4 	.word	0x080065c4
 8000734:	200000a4 	.word	0x200000a4

08000738 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b5a      	ldr	r3, [pc, #360]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a59      	ldr	r2, [pc, #356]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b57      	ldr	r3, [pc, #348]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b53      	ldr	r3, [pc, #332]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a52      	ldr	r2, [pc, #328]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <LCD_GPIO_Init+0x174>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b4c      	ldr	r3, [pc, #304]	@ (80008ac <LCD_GPIO_Init+0x174>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a4b      	ldr	r2, [pc, #300]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b49      	ldr	r3, [pc, #292]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b45      	ldr	r3, [pc, #276]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a44      	ldr	r2, [pc, #272]	@ (80008ac <LCD_GPIO_Init+0x174>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b42      	ldr	r3, [pc, #264]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a3d      	ldr	r2, [pc, #244]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b3b      	ldr	r3, [pc, #236]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b37      	ldr	r3, [pc, #220]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a36      	ldr	r2, [pc, #216]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0320 	and.w	r3, r3, #32
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b30      	ldr	r3, [pc, #192]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a2f      	ldr	r2, [pc, #188]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b2d      	ldr	r3, [pc, #180]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000802:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000806:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000810:	2302      	movs	r3, #2
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000814:	230e      	movs	r3, #14
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4824      	ldr	r0, [pc, #144]	@ (80008b0 <LCD_GPIO_Init+0x178>)
 8000820:	f001 fdc0 	bl	80023a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000824:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000828:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4820      	ldr	r0, [pc, #128]	@ (80008b4 <LCD_GPIO_Init+0x17c>)
 8000832:	f001 fdb7 	bl	80023a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000836:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <LCD_GPIO_Init+0x180>)
 8000844:	f001 fdae 	bl	80023a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000848:	2348      	movs	r3, #72	@ 0x48
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	481a      	ldr	r0, [pc, #104]	@ (80008bc <LCD_GPIO_Init+0x184>)
 8000854:	f001 fda6 	bl	80023a4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <LCD_GPIO_Init+0x188>)
 8000866:	f001 fd9d 	bl	80023a4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800086a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800086e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4813      	ldr	r0, [pc, #76]	@ (80008c4 <LCD_GPIO_Init+0x18c>)
 8000878:	f001 fd94 	bl	80023a4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800087c:	2303      	movs	r3, #3
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000880:	2309      	movs	r3, #9
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	480a      	ldr	r0, [pc, #40]	@ (80008b4 <LCD_GPIO_Init+0x17c>)
 800088c:	f001 fd8a 	bl	80023a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000890:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <LCD_GPIO_Init+0x18c>)
 800089e:	f001 fd81 	bl	80023a4 <HAL_GPIO_Init>
}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	@ 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40021400 	.word	0x40021400
 80008c4:	40021800 	.word	0x40021800

080008c8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b090      	sub	sp, #64	@ 0x40
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008d6:	23f0      	movs	r3, #240	@ 0xf0
 80008d8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008de:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008e2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80008e8:	23ff      	movs	r3, #255	@ 0xff
 80008ea:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008f6:	2305      	movs	r3, #5
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <LTCD_Layer_Init+0x78>)
 8000902:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000904:	23f0      	movs	r3, #240	@ 0xf0
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000908:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800090c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000920:	79fa      	ldrb	r2, [r7, #7]
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <LTCD_Layer_Init+0x7c>)
 800092a:	f003 f901 	bl	8003b30 <HAL_LTDC_ConfigLayer>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000934:	f000 f956 	bl	8000be4 <LCD_Error_Handler>
	}
}
 8000938:	bf00      	nop
 800093a:	3740      	adds	r7, #64	@ 0x40
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000018c 	.word	0x2000018c
 8000944:	200000b0 	.word	0x200000b0

08000948 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800094c:	4b2a      	ldr	r3, [pc, #168]	@ (80009f8 <LTCD__Init+0xb0>)
 800094e:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <LTCD__Init+0xb4>)
 8000950:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000952:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <LTCD__Init+0xb0>)
 8000954:	2209      	movs	r2, #9
 8000956:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <LTCD__Init+0xb0>)
 800095a:	2201      	movs	r2, #1
 800095c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <LTCD__Init+0xb0>)
 8000960:	221d      	movs	r2, #29
 8000962:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000964:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <LTCD__Init+0xb0>)
 8000966:	2203      	movs	r2, #3
 8000968:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800096a:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <LTCD__Init+0xb0>)
 800096c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <LTCD__Init+0xb0>)
 8000974:	f240 1243 	movw	r2, #323	@ 0x143
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <LTCD__Init+0xb0>)
 800097c:	f240 1217 	movw	r2, #279	@ 0x117
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <LTCD__Init+0xb0>)
 8000984:	f240 1247 	movw	r2, #327	@ 0x147
 8000988:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <LTCD__Init+0xb0>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <LTCD__Init+0xb0>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <LTCD__Init+0xb0>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <LTCD__Init+0xb8>)
 80009a4:	2208      	movs	r2, #8
 80009a6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <LTCD__Init+0xb8>)
 80009aa:	22c0      	movs	r2, #192	@ 0xc0
 80009ac:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <LTCD__Init+0xb8>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <LTCD__Init+0xb8>)
 80009b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009bc:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <LTCD__Init+0xb8>)
 80009be:	f003 ff11 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <LTCD__Init+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <LTCD__Init+0xb0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <LTCD__Init+0xb0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <LTCD__Init+0xb0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009da:	f7ff fead 	bl	8000738 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <LTCD__Init+0xb0>)
 80009e0:	f002 ffd6 	bl	8003990 <HAL_LTDC_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80009ea:	f000 f8fb 	bl	8000be4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80009ee:	f000 f961 	bl	8000cb4 <ili9341_Init>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000b0 	.word	0x200000b0
 80009fc:	40016800 	.word	0x40016800
 8000a00:	20000158 	.word	0x20000158

08000a04 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	80bb      	strh	r3, [r7, #4]
 8000a12:	4613      	mov	r3, r2
 8000a14:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a16:	88ba      	ldrh	r2, [r7, #4]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	011b      	lsls	r3, r3, #4
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	461a      	mov	r2, r3
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	4413      	add	r3, r2
 8000a26:	4905      	ldr	r1, [pc, #20]	@ (8000a3c <LCD_Draw_Pixel+0x38>)
 8000a28:	887a      	ldrh	r2, [r7, #2]
 8000a2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000018c 	.word	0x2000018c

08000a40 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10e      	bne.n	8000a74 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e007      	b.n	8000a6c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a5c:	4908      	ldr	r1, [pc, #32]	@ (8000a80 <LCD_Clear+0x40>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	88ba      	ldrh	r2, [r7, #4]
 8000a62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a72:	d3f3      	bcc.n	8000a5c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	2000018c 	.word	0x2000018c

08000a84 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <LCD_SetTextColor+0x1c>)
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	8013      	strh	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <LCD_SetFont+0x1c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000188 	.word	0x20000188

08000ac4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	603a      	str	r2, [r7, #0]
 8000ace:	80fb      	strh	r3, [r7, #6]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e04c      	b.n	8000b7c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	e03f      	b.n	8000b68 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <LCD_Draw_Char+0xd0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	889b      	ldrh	r3, [r3, #4]
 8000afa:	4a27      	ldr	r2, [pc, #156]	@ (8000b98 <LCD_Draw_Char+0xd4>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	2280      	movs	r2, #128	@ 0x80
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	fa42 f303 	asr.w	r3, r2, r3
 8000b10:	400b      	ands	r3, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d104      	bne.n	8000b20 <LCD_Draw_Char+0x5c>
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <LCD_Draw_Char+0xd0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	889b      	ldrh	r3, [r3, #4]
 8000b1c:	2b0c      	cmp	r3, #12
 8000b1e:	d920      	bls.n	8000b62 <LCD_Draw_Char+0x9e>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	fa42 f303 	asr.w	r3, r2, r3
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d104      	bne.n	8000b44 <LCD_Draw_Char+0x80>
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <LCD_Draw_Char+0xd0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d80e      	bhi.n	8000b62 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b298      	uxth	r0, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <LCD_Draw_Char+0xd8>)
 8000b5a:	8812      	ldrh	r2, [r2, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f7ff ff51 	bl	8000a04 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <LCD_Draw_Char+0xd0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	889b      	ldrh	r3, [r3, #4]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d3b8      	bcc.n	8000ae8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <LCD_Draw_Char+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	88db      	ldrh	r3, [r3, #6]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d3ab      	bcc.n	8000ae2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000188 	.word	0x20000188
 8000b98:	aaaaaaab 	.word	0xaaaaaaab
 8000b9c:	20000000 	.word	0x20000000

08000ba0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	460b      	mov	r3, r1
 8000bac:	80bb      	strh	r3, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	3b20      	subs	r3, #32
 8000bb6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <LCD_DisplayChar+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	4907      	ldr	r1, [pc, #28]	@ (8000be0 <LCD_DisplayChar+0x40>)
 8000bc2:	6809      	ldr	r1, [r1, #0]
 8000bc4:	88c9      	ldrh	r1, [r1, #6]
 8000bc6:	fb01 f303 	mul.w	r3, r1, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	441a      	add	r2, r3
 8000bce:	88b9      	ldrh	r1, [r7, #4]
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff76 	bl	8000ac4 <LCD_Draw_Char>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000188 	.word	0x20000188

08000be4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <LCD_Error_Handler+0x8>

08000bf0 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000bf4:	f000 fdec 	bl	80017d0 <STMPE811_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d001      	beq.n	8000c02 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000bfe:	bf00      	nop
 8000c00:	e7fd      	b.n	8000bfe <InitializeLCDTouch+0xe>
  }
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fec8 	bl	80019a4 <STMPE811_DetermineTouchPosition>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fe98 	bl	800195e <STMPE811_Read>
 8000c2e:	4603      	mov	r3, r0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000c48:	79ba      	ldrb	r2, [r7, #6]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fe96 	bl	8001980 <STMPE811_Write>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <Start_Screen>:

void Start_Screen()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c60:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c64:	f7ff ff0e 	bl	8000a84 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000c68:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <Start_Screen+0x54>)
 8000c6a:	f7ff ff1b 	bl	8000aa4 <LCD_SetFont>
	LCD_DisplayChar(20,10,'T');
 8000c6e:	2254      	movs	r2, #84	@ 0x54
 8000c70:	210a      	movs	r1, #10
 8000c72:	2014      	movs	r0, #20
 8000c74:	f7ff ff94 	bl	8000ba0 <LCD_DisplayChar>
	LCD_DisplayChar(50,10,'E');
 8000c78:	2245      	movs	r2, #69	@ 0x45
 8000c7a:	210a      	movs	r1, #10
 8000c7c:	2032      	movs	r0, #50	@ 0x32
 8000c7e:	f7ff ff8f 	bl	8000ba0 <LCD_DisplayChar>
	LCD_DisplayChar(80,10,'T');
 8000c82:	2254      	movs	r2, #84	@ 0x54
 8000c84:	210a      	movs	r1, #10
 8000c86:	2050      	movs	r0, #80	@ 0x50
 8000c88:	f7ff ff8a 	bl	8000ba0 <LCD_DisplayChar>
	LCD_DisplayChar(110,10,'R');
 8000c8c:	2252      	movs	r2, #82	@ 0x52
 8000c8e:	210a      	movs	r1, #10
 8000c90:	206e      	movs	r0, #110	@ 0x6e
 8000c92:	f7ff ff85 	bl	8000ba0 <LCD_DisplayChar>
	LCD_DisplayChar(140,10,'I');
 8000c96:	2249      	movs	r2, #73	@ 0x49
 8000c98:	210a      	movs	r1, #10
 8000c9a:	208c      	movs	r0, #140	@ 0x8c
 8000c9c:	f7ff ff80 	bl	8000ba0 <LCD_DisplayChar>
	LCD_DisplayChar(170,10,'S');
 8000ca0:	2253      	movs	r2, #83	@ 0x53
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	20aa      	movs	r0, #170	@ 0xaa
 8000ca6:	f7ff ff7b 	bl	8000ba0 <LCD_DisplayChar>

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000cb8:	f000 f9fe 	bl	80010b8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000cbc:	20ca      	movs	r0, #202	@ 0xca
 8000cbe:	f000 f943 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000cc2:	20c3      	movs	r0, #195	@ 0xc3
 8000cc4:	f000 f94d 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000cc8:	2008      	movs	r0, #8
 8000cca:	f000 f94a 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000cce:	2050      	movs	r0, #80	@ 0x50
 8000cd0:	f000 f947 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000cd4:	20cf      	movs	r0, #207	@ 0xcf
 8000cd6:	f000 f937 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f941 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000ce0:	20c1      	movs	r0, #193	@ 0xc1
 8000ce2:	f000 f93e 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000ce6:	2030      	movs	r0, #48	@ 0x30
 8000ce8:	f000 f93b 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000cec:	20ed      	movs	r0, #237	@ 0xed
 8000cee:	f000 f92b 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000cf2:	2064      	movs	r0, #100	@ 0x64
 8000cf4:	f000 f935 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f932 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000cfe:	2012      	movs	r0, #18
 8000d00:	f000 f92f 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000d04:	2081      	movs	r0, #129	@ 0x81
 8000d06:	f000 f92c 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000d0a:	20e8      	movs	r0, #232	@ 0xe8
 8000d0c:	f000 f91c 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000d10:	2085      	movs	r0, #133	@ 0x85
 8000d12:	f000 f926 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f923 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000d1c:	2078      	movs	r0, #120	@ 0x78
 8000d1e:	f000 f920 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000d22:	20cb      	movs	r0, #203	@ 0xcb
 8000d24:	f000 f910 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000d28:	2039      	movs	r0, #57	@ 0x39
 8000d2a:	f000 f91a 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000d2e:	202c      	movs	r0, #44	@ 0x2c
 8000d30:	f000 f917 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f914 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000d3a:	2034      	movs	r0, #52	@ 0x34
 8000d3c:	f000 f911 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 f90e 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000d46:	20f7      	movs	r0, #247	@ 0xf7
 8000d48:	f000 f8fe 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000d4c:	2020      	movs	r0, #32
 8000d4e:	f000 f908 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000d52:	20ea      	movs	r0, #234	@ 0xea
 8000d54:	f000 f8f8 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 f902 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f8ff 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000d64:	20b1      	movs	r0, #177	@ 0xb1
 8000d66:	f000 f8ef 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f8f9 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000d70:	201b      	movs	r0, #27
 8000d72:	f000 f8f6 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d76:	20b6      	movs	r0, #182	@ 0xb6
 8000d78:	f000 f8e6 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f000 f8f0 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000d82:	20a2      	movs	r0, #162	@ 0xa2
 8000d84:	f000 f8ed 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000d88:	20c0      	movs	r0, #192	@ 0xc0
 8000d8a:	f000 f8dd 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d8e:	2010      	movs	r0, #16
 8000d90:	f000 f8e7 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000d94:	20c1      	movs	r0, #193	@ 0xc1
 8000d96:	f000 f8d7 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d9a:	2010      	movs	r0, #16
 8000d9c:	f000 f8e1 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000da0:	20c5      	movs	r0, #197	@ 0xc5
 8000da2:	f000 f8d1 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000da6:	2045      	movs	r0, #69	@ 0x45
 8000da8:	f000 f8db 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000dac:	2015      	movs	r0, #21
 8000dae:	f000 f8d8 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000db2:	20c7      	movs	r0, #199	@ 0xc7
 8000db4:	f000 f8c8 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000db8:	2090      	movs	r0, #144	@ 0x90
 8000dba:	f000 f8d2 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000dbe:	2036      	movs	r0, #54	@ 0x36
 8000dc0:	f000 f8c2 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000dc4:	20c8      	movs	r0, #200	@ 0xc8
 8000dc6:	f000 f8cc 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000dca:	20f2      	movs	r0, #242	@ 0xf2
 8000dcc:	f000 f8bc 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 f8c6 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000dd6:	20b0      	movs	r0, #176	@ 0xb0
 8000dd8:	f000 f8b6 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000ddc:	20c2      	movs	r0, #194	@ 0xc2
 8000dde:	f000 f8c0 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000de2:	20b6      	movs	r0, #182	@ 0xb6
 8000de4:	f000 f8b0 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000de8:	200a      	movs	r0, #10
 8000dea:	f000 f8ba 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000dee:	20a7      	movs	r0, #167	@ 0xa7
 8000df0:	f000 f8b7 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000df4:	2027      	movs	r0, #39	@ 0x27
 8000df6:	f000 f8b4 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f000 f8b1 	bl	8000f62 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000e00:	202a      	movs	r0, #42	@ 0x2a
 8000e02:	f000 f8a1 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f8ab 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f8a8 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f8a5 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000e18:	20ef      	movs	r0, #239	@ 0xef
 8000e1a:	f000 f8a2 	bl	8000f62 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000e1e:	202b      	movs	r0, #43	@ 0x2b
 8000e20:	f000 f892 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 f89c 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f899 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 f896 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000e36:	203f      	movs	r0, #63	@ 0x3f
 8000e38:	f000 f893 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000e3c:	20f6      	movs	r0, #246	@ 0xf6
 8000e3e:	f000 f883 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 f88d 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 f88a 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000e4e:	2006      	movs	r0, #6
 8000e50:	f000 f887 	bl	8000f62 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000e54:	202c      	movs	r0, #44	@ 0x2c
 8000e56:	f000 f877 	bl	8000f48 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000e5a:	20c8      	movs	r0, #200	@ 0xc8
 8000e5c:	f000 f9e8 	bl	8001230 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000e60:	2026      	movs	r0, #38	@ 0x26
 8000e62:	f000 f871 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 f87b 	bl	8000f62 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000e6c:	20e0      	movs	r0, #224	@ 0xe0
 8000e6e:	f000 f86b 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f875 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000e78:	2029      	movs	r0, #41	@ 0x29
 8000e7a:	f000 f872 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000e7e:	2024      	movs	r0, #36	@ 0x24
 8000e80:	f000 f86f 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e84:	200c      	movs	r0, #12
 8000e86:	f000 f86c 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000e8a:	200e      	movs	r0, #14
 8000e8c:	f000 f869 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e90:	2009      	movs	r0, #9
 8000e92:	f000 f866 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000e96:	204e      	movs	r0, #78	@ 0x4e
 8000e98:	f000 f863 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e9c:	2078      	movs	r0, #120	@ 0x78
 8000e9e:	f000 f860 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000ea2:	203c      	movs	r0, #60	@ 0x3c
 8000ea4:	f000 f85d 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000ea8:	2009      	movs	r0, #9
 8000eaa:	f000 f85a 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000eae:	2013      	movs	r0, #19
 8000eb0:	f000 f857 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f000 f854 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000eba:	2017      	movs	r0, #23
 8000ebc:	f000 f851 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000ec0:	2011      	movs	r0, #17
 8000ec2:	f000 f84e 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f84b 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000ecc:	20e1      	movs	r0, #225	@ 0xe1
 8000ece:	f000 f83b 	bl	8000f48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f845 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000ed8:	2016      	movs	r0, #22
 8000eda:	f000 f842 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000ede:	201b      	movs	r0, #27
 8000ee0:	f000 f83f 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	f000 f83c 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000eea:	2011      	movs	r0, #17
 8000eec:	f000 f839 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000ef0:	2007      	movs	r0, #7
 8000ef2:	f000 f836 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000ef6:	2031      	movs	r0, #49	@ 0x31
 8000ef8:	f000 f833 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000efc:	2033      	movs	r0, #51	@ 0x33
 8000efe:	f000 f830 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000f02:	2042      	movs	r0, #66	@ 0x42
 8000f04:	f000 f82d 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f000 f82a 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f000 f827 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000f14:	200a      	movs	r0, #10
 8000f16:	f000 f824 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000f1a:	2028      	movs	r0, #40	@ 0x28
 8000f1c:	f000 f821 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000f20:	202f      	movs	r0, #47	@ 0x2f
 8000f22:	f000 f81e 	bl	8000f62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 f81b 	bl	8000f62 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000f2c:	2011      	movs	r0, #17
 8000f2e:	f000 f80b 	bl	8000f48 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000f32:	20c8      	movs	r0, #200	@ 0xc8
 8000f34:	f000 f97c 	bl	8001230 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000f38:	2029      	movs	r0, #41	@ 0x29
 8000f3a:	f000 f805 	bl	8000f48 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000f3e:	202c      	movs	r0, #44	@ 0x2c
 8000f40:	f000 f802 	bl	8000f48 <ili9341_Write_Reg>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f949 	bl	80011ec <LCD_IO_WriteReg>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f91a 	bl	80011a8 <LCD_IO_WriteData>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000f80:	4819      	ldr	r0, [pc, #100]	@ (8000fe8 <SPI_Init+0x6c>)
 8000f82:	f003 ffe4 	bl	8004f4e <HAL_SPI_GetState>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d12b      	bne.n	8000fe4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <SPI_Init+0x6c>)
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <SPI_Init+0x70>)
 8000f90:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <SPI_Init+0x6c>)
 8000f94:	2218      	movs	r2, #24
 8000f96:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <SPI_Init+0x6c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fd2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fd6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000fd8:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fda:	f000 f833 	bl	8001044 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000fde:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <SPI_Init+0x6c>)
 8000fe0:	f003 fdc0 	bl	8004b64 <HAL_SPI_Init>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2002598c 	.word	0x2002598c
 8000fec:	40015000 	.word	0x40015000

08000ff0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <SPI_Write+0x34>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1db9      	adds	r1, r7, #6
 8001004:	2201      	movs	r2, #1
 8001006:	4808      	ldr	r0, [pc, #32]	@ (8001028 <SPI_Write+0x38>)
 8001008:	f003 fe5d 	bl	8004cc6 <HAL_SPI_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001016:	f000 f809 	bl	800102c <SPI_Error>
  }
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c
 8001028:	2002598c 	.word	0x2002598c

0800102c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <SPI_Error+0x14>)
 8001032:	f003 fe20 	bl	8004c76 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001036:	f7ff ffa1 	bl	8000f7c <SPI_Init>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2002598c 	.word	0x2002598c

08001044 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <SPI_MspInit+0x6c>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001054:	4a16      	ldr	r2, [pc, #88]	@ (80010b0 <SPI_MspInit+0x6c>)
 8001056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800105a:	6453      	str	r3, [r2, #68]	@ 0x44
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <SPI_MspInit+0x6c>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <SPI_MspInit+0x6c>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	4a0f      	ldr	r2, [pc, #60]	@ (80010b0 <SPI_MspInit+0x6c>)
 8001072:	f043 0320 	orr.w	r3, r3, #32
 8001076:	6313      	str	r3, [r2, #48]	@ 0x30
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <SPI_MspInit+0x6c>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	f003 0320 	and.w	r3, r3, #32
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001084:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800108e:	2302      	movs	r3, #2
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001096:	2305      	movs	r3, #5
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <SPI_MspInit+0x70>)
 80010a2:	f001 f97f 	bl	80023a4 <HAL_GPIO_Init>
}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	@ 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40021400 	.word	0x40021400

080010b8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80010be:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <LCD_IO_Init+0xe0>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d164      	bne.n	8001190 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80010c6:	4b34      	ldr	r3, [pc, #208]	@ (8001198 <LCD_IO_Init+0xe0>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b32      	ldr	r3, [pc, #200]	@ (800119c <LCD_IO_Init+0xe4>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d4:	4a31      	ldr	r2, [pc, #196]	@ (800119c <LCD_IO_Init+0xe4>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6313      	str	r3, [r2, #48]	@ 0x30
 80010dc:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <LCD_IO_Init+0xe4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80010e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	4827      	ldr	r0, [pc, #156]	@ (80011a0 <LCD_IO_Init+0xe8>)
 8001102:	f001 f94f 	bl	80023a4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <LCD_IO_Init+0xe4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a23      	ldr	r2, [pc, #140]	@ (800119c <LCD_IO_Init+0xe4>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <LCD_IO_Init+0xe4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <LCD_IO_Init+0xe8>)
 800113c:	f001 f932 	bl	80023a4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <LCD_IO_Init+0xe4>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a14      	ldr	r2, [pc, #80]	@ (800119c <LCD_IO_Init+0xe4>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <LCD_IO_Init+0xe4>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800115c:	2304      	movs	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LCD_IO_Init+0xec>)
 8001174:	f001 f916 	bl	80023a4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001178:	2200      	movs	r2, #0
 800117a:	2104      	movs	r1, #4
 800117c:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <LCD_IO_Init+0xec>)
 800117e:	f001 fbc9 	bl	8002914 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001182:	2201      	movs	r2, #1
 8001184:	2104      	movs	r1, #4
 8001186:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <LCD_IO_Init+0xec>)
 8001188:	f001 fbc4 	bl	8002914 <HAL_GPIO_WritePin>

    SPI_Init();
 800118c:	f7ff fef6 	bl	8000f7c <SPI_Init>
  }
}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200259e4 	.word	0x200259e4
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40020800 	.word	0x40020800

080011a8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b8:	480a      	ldr	r0, [pc, #40]	@ (80011e4 <LCD_IO_WriteData+0x3c>)
 80011ba:	f001 fbab 	bl	8002914 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80011be:	2200      	movs	r2, #0
 80011c0:	2104      	movs	r1, #4
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <LCD_IO_WriteData+0x40>)
 80011c4:	f001 fba6 	bl	8002914 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff10 	bl	8000ff0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011d0:	2201      	movs	r2, #1
 80011d2:	2104      	movs	r1, #4
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <LCD_IO_WriteData+0x40>)
 80011d6:	f001 fb9d 	bl	8002914 <HAL_GPIO_WritePin>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40020800 	.word	0x40020800

080011ec <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011fc:	480a      	ldr	r0, [pc, #40]	@ (8001228 <LCD_IO_WriteReg+0x3c>)
 80011fe:	f001 fb89 	bl	8002914 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001202:	2200      	movs	r2, #0
 8001204:	2104      	movs	r1, #4
 8001206:	4809      	ldr	r0, [pc, #36]	@ (800122c <LCD_IO_WriteReg+0x40>)
 8001208:	f001 fb84 	bl	8002914 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff feed 	bl	8000ff0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001216:	2201      	movs	r2, #1
 8001218:	2104      	movs	r1, #4
 800121a:	4804      	ldr	r0, [pc, #16]	@ (800122c <LCD_IO_WriteReg+0x40>)
 800121c:	f001 fb7a 	bl	8002914 <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020800 	.word	0x40020800

08001230 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 ff07 	bl	800204c <HAL_Delay>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 800124a:	f004 f983 	bl	8005554 <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fe8b 	bl	8001f68 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // TODO:Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 8001252:	f000 f809 	bl	8001268 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001256:	f7ff f99b 	bl	8000590 <ApplicationInit>

  //LCD_Visual_Demo();



  HAL_Delay(5000);
 800125a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800125e:	f000 fef5 	bl	800204c <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8001262:	bf00      	nop
 8001264:	e7fd      	b.n	8001262 <main+0x1c>
	...

08001268 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b092      	sub	sp, #72	@ 0x48
 800126c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <SystemClockOverride+0x7c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <SystemClockOverride+0x7c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <SystemClockOverride+0x7c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128a:	2301      	movs	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001292:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800129e:	2308      	movs	r3, #8
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ac:	2307      	movs	r3, #7
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fe12 	bl	8003edc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80012b8:	230f      	movs	r3, #15
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80012d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012d4:	2105      	movs	r1, #5
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 f878 	bl	80043cc <HAL_RCC_ClockConfig>
}
 80012dc:	bf00      	nop
 80012de:	3748      	adds	r7, #72	@ 0x48
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <Error_Handler+0x8>

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001332:	2007      	movs	r0, #7
 8001334:	f000 ffc0 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a29      	ldr	r2, [pc, #164]	@ (8001408 <HAL_I2C_MspInit+0xc4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d14b      	bne.n	80013fe <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a27      	ldr	r2, [pc, #156]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b25      	ldr	r3, [pc, #148]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a20      	ldr	r2, [pc, #128]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800139e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	2312      	movs	r3, #18
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013b0:	2304      	movs	r3, #4
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4815      	ldr	r0, [pc, #84]	@ (8001410 <HAL_I2C_MspInit+0xcc>)
 80013bc:	f000 fff2 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80013c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c6:	2312      	movs	r3, #18
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013d2:	2304      	movs	r3, #4
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	480d      	ldr	r0, [pc, #52]	@ (8001414 <HAL_I2C_MspInit+0xd0>)
 80013de:	f000 ffe1 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 80013ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_I2C_MspInit+0xc8>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	@ 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40005c00 	.word	0x40005c00
 800140c:	40023800 	.word	0x40023800
 8001410:	40020800 	.word	0x40020800
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b09a      	sub	sp, #104	@ 0x68
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001434:	2230      	movs	r2, #48	@ 0x30
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fa3b 	bl	80058b4 <memset>
  if(hltdc->Instance==LTDC)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a81      	ldr	r2, [pc, #516]	@ (8001648 <HAL_LTDC_MspInit+0x230>)
 8001444:	4293      	cmp	r3, r2
 8001446:	f040 80fa 	bne.w	800163e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800144a:	2308      	movs	r3, #8
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800144e:	2332      	movs	r3, #50	@ 0x32
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001452:	2302      	movs	r3, #2
 8001454:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001456:	2300      	movs	r3, #0
 8001458:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f9c0 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800146a:	f7ff ff3d 	bl	80012e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	4b76      	ldr	r3, [pc, #472]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a75      	ldr	r2, [pc, #468]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001478:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b73      	ldr	r3, [pc, #460]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	4b6f      	ldr	r3, [pc, #444]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b6c      	ldr	r3, [pc, #432]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	4b68      	ldr	r3, [pc, #416]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a67      	ldr	r2, [pc, #412]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b65      	ldr	r3, [pc, #404]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b61      	ldr	r3, [pc, #388]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a60      	ldr	r2, [pc, #384]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b5e      	ldr	r3, [pc, #376]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b5a      	ldr	r3, [pc, #360]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a59      	ldr	r2, [pc, #356]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b57      	ldr	r3, [pc, #348]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b53      	ldr	r3, [pc, #332]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a52      	ldr	r2, [pc, #328]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b50      	ldr	r3, [pc, #320]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a4b      	ldr	r2, [pc, #300]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b49      	ldr	r3, [pc, #292]	@ (800164c <HAL_LTDC_MspInit+0x234>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001536:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001544:	230e      	movs	r3, #14
 8001546:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800154c:	4619      	mov	r1, r3
 800154e:	4840      	ldr	r0, [pc, #256]	@ (8001650 <HAL_LTDC_MspInit+0x238>)
 8001550:	f000 ff28 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001554:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001558:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001566:	230e      	movs	r3, #14
 8001568:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800156e:	4619      	mov	r1, r3
 8001570:	4838      	ldr	r0, [pc, #224]	@ (8001654 <HAL_LTDC_MspInit+0x23c>)
 8001572:	f000 ff17 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001576:	2303      	movs	r3, #3
 8001578:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001586:	2309      	movs	r3, #9
 8001588:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800158e:	4619      	mov	r1, r3
 8001590:	4831      	ldr	r0, [pc, #196]	@ (8001658 <HAL_LTDC_MspInit+0x240>)
 8001592:	f000 ff07 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001596:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800159a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015a8:	230e      	movs	r3, #14
 80015aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015b0:	4619      	mov	r1, r3
 80015b2:	4829      	ldr	r0, [pc, #164]	@ (8001658 <HAL_LTDC_MspInit+0x240>)
 80015b4:	f000 fef6 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80015b8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80015bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ca:	230e      	movs	r3, #14
 80015cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015d2:	4619      	mov	r1, r3
 80015d4:	4821      	ldr	r0, [pc, #132]	@ (800165c <HAL_LTDC_MspInit+0x244>)
 80015d6:	f000 fee5 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80015da:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80015de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ec:	230e      	movs	r3, #14
 80015ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015f4:	4619      	mov	r1, r3
 80015f6:	481a      	ldr	r0, [pc, #104]	@ (8001660 <HAL_LTDC_MspInit+0x248>)
 80015f8:	f000 fed4 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80015fc:	2348      	movs	r3, #72	@ 0x48
 80015fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800160c:	230e      	movs	r3, #14
 800160e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001614:	4619      	mov	r1, r3
 8001616:	4813      	ldr	r0, [pc, #76]	@ (8001664 <HAL_LTDC_MspInit+0x24c>)
 8001618:	f000 fec4 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800161c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001620:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800162e:	2309      	movs	r3, #9
 8001630:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001632:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001636:	4619      	mov	r1, r3
 8001638:	4808      	ldr	r0, [pc, #32]	@ (800165c <HAL_LTDC_MspInit+0x244>)
 800163a:	f000 feb3 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800163e:	bf00      	nop
 8001640:	3768      	adds	r7, #104	@ 0x68
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40016800 	.word	0x40016800
 800164c:	40023800 	.word	0x40023800
 8001650:	40021400 	.word	0x40021400
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40021800 	.word	0x40021800
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00

08001668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	@ (80016ec <HAL_SPI_MspInit+0x84>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12c      	bne.n	80016e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 8001694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80016c2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016d4:	2305      	movs	r3, #5
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <HAL_SPI_MspInit+0x8c>)
 80016e0:	f000 fe60 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	@ 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40015000 	.word	0x40015000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40021400 	.word	0x40021400

080016f8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_SPI_MspDeInit+0x30>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10a      	bne.n	8001720 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <HAL_SPI_MspDeInit+0x34>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	4a07      	ldr	r2, [pc, #28]	@ (800172c <HAL_SPI_MspDeInit+0x34>)
 8001710:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001714:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001716:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <HAL_SPI_MspDeInit+0x38>)
 800171c:	f000 ffee 	bl	80026fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40015000 	.word	0x40015000
 800172c:	40023800 	.word	0x40023800
 8001730:	40021400 	.word	0x40021400

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <NMI_Handler+0x4>

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <MemManage_Handler+0x4>

0800174c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <UsageFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 fc3f 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	@ (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80017d6:	f000 f9df 	bl	8001b98 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80017da:	f000 f99f 	bl	8001b1c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80017de:	2202      	movs	r2, #2
 80017e0:	2103      	movs	r1, #3
 80017e2:	2082      	movs	r0, #130	@ 0x82
 80017e4:	f000 fa2c 	bl	8001c40 <I2C3_Write>
    HAL_Delay(5);
 80017e8:	2005      	movs	r0, #5
 80017ea:	f000 fc2f 	bl	800204c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2103      	movs	r1, #3
 80017f2:	2082      	movs	r0, #130	@ 0x82
 80017f4:	f000 fa24 	bl	8001c40 <I2C3_Write>
    HAL_Delay(2);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f000 fc27 	bl	800204c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80017fe:	1cba      	adds	r2, r7, #2
 8001800:	2302      	movs	r3, #2
 8001802:	2100      	movs	r1, #0
 8001804:	2082      	movs	r0, #130	@ 0x82
 8001806:	f000 fa6b 	bl	8001ce0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	b29a      	uxth	r2, r3
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	4313      	orrs	r3, r2
 800181a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f640 0211 	movw	r2, #2065	@ 0x811
 8001822:	4293      	cmp	r3, r2
 8001824:	d001      	beq.n	800182a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001826:	2303      	movs	r3, #3
 8001828:	e095      	b.n	8001956 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800182a:	2202      	movs	r2, #2
 800182c:	2103      	movs	r1, #3
 800182e:	2082      	movs	r0, #130	@ 0x82
 8001830:	f000 fa06 	bl	8001c40 <I2C3_Write>
    HAL_Delay(5);
 8001834:	2005      	movs	r0, #5
 8001836:	f000 fc09 	bl	800204c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800183a:	2200      	movs	r2, #0
 800183c:	2103      	movs	r1, #3
 800183e:	2082      	movs	r0, #130	@ 0x82
 8001840:	f000 f9fe 	bl	8001c40 <I2C3_Write>
    HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f000 fc01 	bl	800204c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800184a:	2004      	movs	r0, #4
 800184c:	f000 f887 	bl	800195e <STMPE811_Read>
 8001850:	4603      	mov	r3, r0
 8001852:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	461a      	mov	r2, r3
 8001860:	2104      	movs	r1, #4
 8001862:	2082      	movs	r0, #130	@ 0x82
 8001864:	f000 f9ec 	bl	8001c40 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001868:	2004      	movs	r0, #4
 800186a:	f000 f878 	bl	800195e <STMPE811_Read>
 800186e:	4603      	mov	r3, r0
 8001870:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001872:	797b      	ldrb	r3, [r7, #5]
 8001874:	f023 0302 	bic.w	r3, r3, #2
 8001878:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800187a:	797b      	ldrb	r3, [r7, #5]
 800187c:	461a      	mov	r2, r3
 800187e:	2104      	movs	r1, #4
 8001880:	2082      	movs	r0, #130	@ 0x82
 8001882:	f000 f9dd 	bl	8001c40 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001886:	2249      	movs	r2, #73	@ 0x49
 8001888:	2120      	movs	r1, #32
 800188a:	2082      	movs	r0, #130	@ 0x82
 800188c:	f000 f9d8 	bl	8001c40 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001890:	2002      	movs	r0, #2
 8001892:	f000 fbdb 	bl	800204c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001896:	2201      	movs	r2, #1
 8001898:	2121      	movs	r1, #33	@ 0x21
 800189a:	2082      	movs	r0, #130	@ 0x82
 800189c:	f000 f9d0 	bl	8001c40 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80018a0:	2017      	movs	r0, #23
 80018a2:	f000 f85c 	bl	800195e <STMPE811_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80018aa:	797b      	ldrb	r3, [r7, #5]
 80018ac:	f043 031e 	orr.w	r3, r3, #30
 80018b0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80018b2:	797b      	ldrb	r3, [r7, #5]
 80018b4:	461a      	mov	r2, r3
 80018b6:	2117      	movs	r1, #23
 80018b8:	2082      	movs	r0, #130	@ 0x82
 80018ba:	f000 f9c1 	bl	8001c40 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80018be:	229a      	movs	r2, #154	@ 0x9a
 80018c0:	2141      	movs	r1, #65	@ 0x41
 80018c2:	2082      	movs	r0, #130	@ 0x82
 80018c4:	f000 f9bc 	bl	8001c40 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80018c8:	2201      	movs	r2, #1
 80018ca:	214a      	movs	r1, #74	@ 0x4a
 80018cc:	2082      	movs	r0, #130	@ 0x82
 80018ce:	f000 f9b7 	bl	8001c40 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80018d2:	2201      	movs	r2, #1
 80018d4:	214b      	movs	r1, #75	@ 0x4b
 80018d6:	2082      	movs	r0, #130	@ 0x82
 80018d8:	f000 f9b2 	bl	8001c40 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80018dc:	2200      	movs	r2, #0
 80018de:	214b      	movs	r1, #75	@ 0x4b
 80018e0:	2082      	movs	r0, #130	@ 0x82
 80018e2:	f000 f9ad 	bl	8001c40 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2156      	movs	r1, #86	@ 0x56
 80018ea:	2082      	movs	r0, #130	@ 0x82
 80018ec:	f000 f9a8 	bl	8001c40 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2158      	movs	r1, #88	@ 0x58
 80018f4:	2082      	movs	r0, #130	@ 0x82
 80018f6:	f000 f9a3 	bl	8001c40 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80018fa:	2203      	movs	r2, #3
 80018fc:	2140      	movs	r1, #64	@ 0x40
 80018fe:	2082      	movs	r0, #130	@ 0x82
 8001900:	f000 f99e 	bl	8001c40 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001904:	22ff      	movs	r2, #255	@ 0xff
 8001906:	210b      	movs	r1, #11
 8001908:	2082      	movs	r0, #130	@ 0x82
 800190a:	f000 f999 	bl	8001c40 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800190e:	f000 f8c3 	bl	8001a98 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8001912:	2009      	movs	r0, #9
 8001914:	f000 f823 	bl	800195e <STMPE811_Read>
 8001918:	4603      	mov	r3, r0
 800191a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800191c:	797b      	ldrb	r3, [r7, #5]
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	461a      	mov	r2, r3
 8001928:	2109      	movs	r1, #9
 800192a:	2082      	movs	r0, #130	@ 0x82
 800192c:	f000 f988 	bl	8001c40 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8001930:	200a      	movs	r0, #10
 8001932:	f000 f814 	bl	800195e <STMPE811_Read>
 8001936:	4603      	mov	r3, r0
 8001938:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800193a:	797b      	ldrb	r3, [r7, #5]
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8001942:	797b      	ldrb	r3, [r7, #5]
 8001944:	461a      	mov	r2, r3
 8001946:	210a      	movs	r1, #10
 8001948:	2082      	movs	r0, #130	@ 0x82
 800194a:	f000 f979 	bl	8001c40 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800194e:	20c8      	movs	r0, #200	@ 0xc8
 8001950:	f000 fb7c 	bl	800204c <HAL_Delay>

    return STMPE811_State_Ok;
 8001954:	2302      	movs	r3, #2

}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001968:	f107 020f 	add.w	r2, r7, #15
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4619      	mov	r1, r3
 8001970:	2082      	movs	r0, #130	@ 0x82
 8001972:	f000 f98f 	bl	8001c94 <I2C3_Read>

    return readData;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	460a      	mov	r2, r1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8001990:	79ba      	ldrb	r2, [r7, #6]
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4619      	mov	r1, r3
 8001996:	2082      	movs	r0, #130	@ 0x82
 8001998:	f000 f952 	bl	8001c40 <I2C3_Write>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	799b      	ldrb	r3, [r3, #6]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d117      	bne.n	80019e4 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f9b3 	bl	8001d24 <TM_STMPE811_ReadX>
 80019be:	4603      	mov	r3, r0
 80019c0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	885b      	ldrh	r3, [r3, #2]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fa06 	bl	8001de0 <TM_STMPE811_ReadY>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80019da:	3301      	adds	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	805a      	strh	r2, [r3, #2]
 80019e2:	e04b      	b.n	8001a7c <STMPE811_DetermineTouchPosition+0xd8>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	799b      	ldrb	r3, [r3, #6]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d115      	bne.n	8001a18 <STMPE811_DetermineTouchPosition+0x74>
        data->x = TM_STMPE811_ReadX(data->x);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f997 	bl	8001d24 <TM_STMPE811_ReadX>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	885b      	ldrh	r3, [r3, #2]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f9ec 	bl	8001de0 <TM_STMPE811_ReadY>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	805a      	strh	r2, [r3, #2]
 8001a16:	e031      	b.n	8001a7c <STMPE811_DetermineTouchPosition+0xd8>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	799b      	ldrb	r3, [r3, #6]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d115      	bne.n	8001a4c <STMPE811_DetermineTouchPosition+0xa8>
        data->y = TM_STMPE811_ReadX(data->y);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	885b      	ldrh	r3, [r3, #2]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f97d 	bl	8001d24 <TM_STMPE811_ReadX>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f9d2 	bl	8001de0 <TM_STMPE811_ReadY>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001a42:	3301      	adds	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	801a      	strh	r2, [r3, #0]
 8001a4a:	e017      	b.n	8001a7c <STMPE811_DetermineTouchPosition+0xd8>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	799b      	ldrb	r3, [r3, #6]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d113      	bne.n	8001a7c <STMPE811_DetermineTouchPosition+0xd8>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f963 	bl	8001d24 <TM_STMPE811_ReadX>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f9b6 	bl	8001de0 <TM_STMPE811_ReadY>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	214b      	movs	r1, #75	@ 0x4b
 8001a80:	2082      	movs	r0, #130	@ 0x82
 8001a82:	f000 f8dd 	bl	8001c40 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001a86:	2200      	movs	r2, #0
 8001a88:	214b      	movs	r1, #75	@ 0x4b
 8001a8a:	2082      	movs	r0, #130	@ 0x82
 8001a8c:	f000 f8d8 	bl	8001c40 <I2C3_Write>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <enableInterruptSupportForTouch+0x5c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <enableInterruptSupportForTouch+0x5c>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <enableInterruptSupportForTouch+0x5c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001acc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ace:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001ad2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <enableInterruptSupportForTouch+0x60>)
 8001ae2:	f000 fc5f 	bl	80023a4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ae6:	2028      	movs	r0, #40	@ 0x28
 8001ae8:	f7ff fe54 	bl	8001794 <__NVIC_EnableIRQ>

}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000

08001afc <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20025a3c 	.word	0x20025a3c

08001b1c <I2C3_Init>:

static void I2C3_Init()
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <I2C3_Init+0x6c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <I2C3_Init+0x6c>)
 8001b2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <I2C3_Init+0x6c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <I2C3_Init+0x70>)
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <I2C3_Init+0x74>)
 8001b42:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <I2C3_Init+0x70>)
 8001b46:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <I2C3_Init+0x78>)
 8001b48:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <I2C3_Init+0x70>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <I2C3_Init+0x70>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <I2C3_Init+0x70>)
 8001b58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <I2C3_Init+0x70>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <I2C3_Init+0x70>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8001b6a:	4808      	ldr	r0, [pc, #32]	@ (8001b8c <I2C3_Init+0x70>)
 8001b6c:	f000 feec 	bl	8002948 <HAL_I2C_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8001b7a:	bf00      	nop
 8001b7c:	e7fd      	b.n	8001b7a <I2C3_Init+0x5e>
    }
    return;
 8001b7e:	bf00      	nop
}
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	200259e8 	.word	0x200259e8
 8001b90:	40005c00 	.word	0x40005c00
 8001b94:	000186a0 	.word	0x000186a0

08001b98 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <I2C3_MspInit+0x9c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c34 <I2C3_MspInit+0x9c>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <I2C3_MspInit+0x9c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <I2C3_MspInit+0x9c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <I2C3_MspInit+0x9c>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <I2C3_MspInit+0x9c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4619      	mov	r1, r3
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <I2C3_MspInit+0xa0>)
 8001c04:	f000 fbce 	bl	80023a4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0e:	2312      	movs	r3, #18
 8001c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <I2C3_MspInit+0xa4>)
 8001c26:	f000 fbbd 	bl	80023a4 <HAL_GPIO_Init>
    
}
 8001c2a:	bf00      	nop
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020000 	.word	0x40020000

08001c40 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	717b      	strb	r3, [r7, #5]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8001c52:	793b      	ldrb	r3, [r7, #4]
 8001c54:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001c56:	797b      	ldrb	r3, [r7, #5]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	88f9      	ldrh	r1, [r7, #6]
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <I2C3_Write+0x48>)
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2301      	movs	r3, #1
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	f107 030f 	add.w	r3, r7, #15
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <I2C3_Write+0x4c>)
 8001c6e:	f000 ffaf 	bl	8002bd0 <HAL_I2C_Mem_Write>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <I2C3_Write+0x50>)
 8001c78:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8001c7a:	f7ff ff3f 	bl	8001afc <verifyHAL_I2C_IS_OKAY>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	0003d090 	.word	0x0003d090
 8001c8c:	200259e8 	.word	0x200259e8
 8001c90:	20025a3c 	.word	0x20025a3c

08001c94 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	603a      	str	r2, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	b299      	uxth	r1, r3
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <I2C3_Read+0x40>)
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <I2C3_Read+0x44>)
 8001cbc:	f001 f882 	bl	8002dc4 <HAL_I2C_Mem_Read>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <I2C3_Read+0x48>)
 8001cc6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8001cc8:	f7ff ff18 	bl	8001afc <verifyHAL_I2C_IS_OKAY>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	0003d090 	.word	0x0003d090
 8001cd8:	200259e8 	.word	0x200259e8
 8001cdc:	20025a3c 	.word	0x20025a3c

08001ce0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	603a      	str	r2, [r7, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	71bb      	strb	r3, [r7, #6]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <I2C3_MulitByteRead+0x3c>)
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <I2C3_MulitByteRead+0x40>)
 8001d0e:	f001 f859 	bl	8002dc4 <HAL_I2C_Mem_Read>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0003d090 	.word	0x0003d090
 8001d20:	200259e8 	.word	0x200259e8

08001d24 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8001d2e:	204d      	movs	r0, #77	@ 0x4d
 8001d30:	f7ff fe15 	bl	800195e <STMPE811_Read>
 8001d34:	4603      	mov	r3, r0
 8001d36:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8001d38:	204e      	movs	r0, #78	@ 0x4e
 8001d3a:	f7ff fe10 	bl	800195e <STMPE811_Read>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8001d42:	7a7b      	ldrb	r3, [r7, #9]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	7a3b      	ldrb	r3, [r7, #8]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8001d50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d54:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	dc06      	bgt.n	8001d6a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8001d62:	330c      	adds	r3, #12
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	e005      	b.n	8001d76 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
 8001d6c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8001d70:	3308      	adds	r3, #8
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8001d76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <TM_STMPE811_ReadX+0xb8>)
 8001d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d80:	441a      	add	r2, r3
 8001d82:	10d2      	asrs	r2, r2, #3
 8001d84:	17db      	asrs	r3, r3, #31
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8001d8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d8e:	2bef      	cmp	r3, #239	@ 0xef
 8001d90:	dd02      	ble.n	8001d98 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8001d92:	23ef      	movs	r3, #239	@ 0xef
 8001d94:	81fb      	strh	r3, [r7, #14]
 8001d96:	e005      	b.n	8001da4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8001d98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da01      	bge.n	8001da4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8001da4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dd05      	ble.n	8001dba <TM_STMPE811_ReadX+0x96>
 8001dae:	89fa      	ldrh	r2, [r7, #14]
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	e004      	b.n	8001dc4 <TM_STMPE811_ReadX+0xa0>
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	88fa      	ldrh	r2, [r7, #6]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8001dc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	dd01      	ble.n	8001dd2 <TM_STMPE811_ReadX+0xae>
        return val;
 8001dce:	89fb      	ldrh	r3, [r7, #14]
 8001dd0:	e000      	b.n	8001dd4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	88888889 	.word	0x88888889

08001de0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8001dea:	204f      	movs	r0, #79	@ 0x4f
 8001dec:	f7ff fdb7 	bl	800195e <STMPE811_Read>
 8001df0:	4603      	mov	r3, r0
 8001df2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8001df4:	2050      	movs	r0, #80	@ 0x50
 8001df6:	f7ff fdb2 	bl	800195e <STMPE811_Read>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8001dfe:	7a7b      	ldrb	r3, [r7, #9]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	7a3b      	ldrb	r3, [r7, #8]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8001e0c:	89fb      	ldrh	r3, [r7, #14]
 8001e0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8001e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e1a:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <TM_STMPE811_ReadY+0xa0>)
 8001e1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e20:	1052      	asrs	r2, r2, #1
 8001e22:	17db      	asrs	r3, r3, #31
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8001e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	dc02      	bgt.n	8001e36 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	81fb      	strh	r3, [r7, #14]
 8001e34:	e007      	b.n	8001e46 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8001e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e3a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e3e:	db02      	blt.n	8001e46 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8001e40:	f240 133f 	movw	r3, #319	@ 0x13f
 8001e44:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8001e46:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dd05      	ble.n	8001e5c <TM_STMPE811_ReadY+0x7c>
 8001e50:	89fa      	ldrh	r2, [r7, #14]
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	e004      	b.n	8001e66 <TM_STMPE811_ReadY+0x86>
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	88fa      	ldrh	r2, [r7, #6]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8001e68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	dd01      	ble.n	8001e74 <TM_STMPE811_ReadY+0x94>
        return val;
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	e000      	b.n	8001e76 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8001e74:	88fb      	ldrh	r3, [r7, #6]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2e8ba2e9 	.word	0x2e8ba2e9

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <_sbrk+0x5c>)
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <_sbrk+0x60>)
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb4:	f003 fd06 	bl	80058c4 <__errno>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20030000 	.word	0x20030000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	20025a40 	.word	0x20025a40
 8001eec:	20025c40 	.word	0x20025c40

08001ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <SystemInit+0x20>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <SystemInit+0x20>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f18:	f7ff ffea 	bl	8001ef0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1e:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f34:	4c0a      	ldr	r4, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f42:	f003 fcc5 	bl	80058d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7ff f97e 	bl	8001246 <main>
  bx  lr    
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f58:	0800781c 	.word	0x0800781c
  ldr r2, =_sbss
 8001f5c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f60:	20025c40 	.word	0x20025c40

08001f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <HAL_Init+0x40>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_Init+0x40>)
 8001f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <HAL_Init+0x40>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 f991 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff f9aa 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f9b7 	bl	800233e <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fe8:	f000 f971 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	@ (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000010 	.word	0x20000010
 8002004:	20000018 	.word	0x20000018
 8002008:	20000014 	.word	0x20000014

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000018 	.word	0x20000018
 8002030:	20025a44 	.word	0x20025a44

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20025a44 	.word	0x20025a44

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000018 	.word	0x20000018

08002094 <__NVIC_SetPriorityGrouping>:
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	@ (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db12      	blt.n	800216c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	490a      	ldr	r1, [pc, #40]	@ (8002178 <__NVIC_DisableIRQ+0x44>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	3320      	adds	r3, #32
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002160:	f3bf 8f4f 	dsb	sy
}
 8002164:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002166:	f3bf 8f6f 	isb	sy
}
 800216a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0c      	blt.n	80021a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	@ (80021b4 <__NVIC_ClearPendingIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	3360      	adds	r3, #96	@ 0x60
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fee7 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff fefc 	bl	80020dc <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff feef 	bl	80020f8 <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff feff 	bl	8002134 <__NVIC_DisableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff94 	bl	8002274 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff09 	bl	800217c <__NVIC_ClearPendingIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2201      	movs	r2, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800238e:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_EXTI_ClearPending+0x2c>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6153      	str	r3, [r2, #20]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e177      	b.n	80026b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8166 	bne.w	80026aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d130      	bne.n	8002458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0201 	and.w	r2, r3, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b03      	cmp	r3, #3
 8002462:	d017      	beq.n	8002494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80c0 	beq.w	80026aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b66      	ldr	r3, [pc, #408]	@ (80026c8 <HAL_GPIO_Init+0x324>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4a65      	ldr	r2, [pc, #404]	@ (80026c8 <HAL_GPIO_Init+0x324>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44
 800253a:	4b63      	ldr	r3, [pc, #396]	@ (80026c8 <HAL_GPIO_Init+0x324>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a61      	ldr	r2, [pc, #388]	@ (80026cc <HAL_GPIO_Init+0x328>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	@ (80026d0 <HAL_GPIO_Init+0x32c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d037      	beq.n	80025e2 <HAL_GPIO_Init+0x23e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a57      	ldr	r2, [pc, #348]	@ (80026d4 <HAL_GPIO_Init+0x330>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d031      	beq.n	80025de <HAL_GPIO_Init+0x23a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a56      	ldr	r2, [pc, #344]	@ (80026d8 <HAL_GPIO_Init+0x334>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02b      	beq.n	80025da <HAL_GPIO_Init+0x236>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a55      	ldr	r2, [pc, #340]	@ (80026dc <HAL_GPIO_Init+0x338>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d025      	beq.n	80025d6 <HAL_GPIO_Init+0x232>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a54      	ldr	r2, [pc, #336]	@ (80026e0 <HAL_GPIO_Init+0x33c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <HAL_GPIO_Init+0x22e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a53      	ldr	r2, [pc, #332]	@ (80026e4 <HAL_GPIO_Init+0x340>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x22a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a52      	ldr	r2, [pc, #328]	@ (80026e8 <HAL_GPIO_Init+0x344>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x226>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a51      	ldr	r2, [pc, #324]	@ (80026ec <HAL_GPIO_Init+0x348>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x222>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a50      	ldr	r2, [pc, #320]	@ (80026f0 <HAL_GPIO_Init+0x34c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x21e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4f      	ldr	r2, [pc, #316]	@ (80026f4 <HAL_GPIO_Init+0x350>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x21a>
 80025ba:	2309      	movs	r3, #9
 80025bc:	e012      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025be:	230a      	movs	r3, #10
 80025c0:	e010      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025c2:	2308      	movs	r3, #8
 80025c4:	e00e      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e00c      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025ca:	2306      	movs	r3, #6
 80025cc:	e00a      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025ce:	2305      	movs	r3, #5
 80025d0:	e008      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025d2:	2304      	movs	r3, #4
 80025d4:	e006      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025d6:	2303      	movs	r3, #3
 80025d8:	e004      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025da:	2302      	movs	r3, #2
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025e2:	2300      	movs	r3, #0
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f002 0203 	and.w	r2, r2, #3
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	4093      	lsls	r3, r2
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f4:	4935      	ldr	r1, [pc, #212]	@ (80026cc <HAL_GPIO_Init+0x328>)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002602:	4b3d      	ldr	r3, [pc, #244]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002626:	4a34      	ldr	r2, [pc, #208]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800262c:	4b32      	ldr	r3, [pc, #200]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002650:	4a29      	ldr	r2, [pc, #164]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002656:	4b28      	ldr	r3, [pc, #160]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267a:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <HAL_GPIO_Init+0x354>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	f67f ae84 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3724      	adds	r7, #36	@ 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40013800 	.word	0x40013800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020c00 	.word	0x40020c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40021400 	.word	0x40021400
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40021c00 	.word	0x40021c00
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40022400 	.word	0x40022400
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e0d9      	b.n	80028cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002718:	2201      	movs	r2, #1
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	429a      	cmp	r2, r3
 8002730:	f040 80c9 	bne.w	80028c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002734:	4a6b      	ldr	r2, [pc, #428]	@ (80028e4 <HAL_GPIO_DeInit+0x1e8>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a63      	ldr	r2, [pc, #396]	@ (80028e8 <HAL_GPIO_DeInit+0x1ec>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d037      	beq.n	80027ce <HAL_GPIO_DeInit+0xd2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a62      	ldr	r2, [pc, #392]	@ (80028ec <HAL_GPIO_DeInit+0x1f0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d031      	beq.n	80027ca <HAL_GPIO_DeInit+0xce>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a61      	ldr	r2, [pc, #388]	@ (80028f0 <HAL_GPIO_DeInit+0x1f4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d02b      	beq.n	80027c6 <HAL_GPIO_DeInit+0xca>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a60      	ldr	r2, [pc, #384]	@ (80028f4 <HAL_GPIO_DeInit+0x1f8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d025      	beq.n	80027c2 <HAL_GPIO_DeInit+0xc6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a5f      	ldr	r2, [pc, #380]	@ (80028f8 <HAL_GPIO_DeInit+0x1fc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <HAL_GPIO_DeInit+0xc2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a5e      	ldr	r2, [pc, #376]	@ (80028fc <HAL_GPIO_DeInit+0x200>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_DeInit+0xbe>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a5d      	ldr	r2, [pc, #372]	@ (8002900 <HAL_GPIO_DeInit+0x204>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_DeInit+0xba>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a5c      	ldr	r2, [pc, #368]	@ (8002904 <HAL_GPIO_DeInit+0x208>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_DeInit+0xb6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a5b      	ldr	r2, [pc, #364]	@ (8002908 <HAL_GPIO_DeInit+0x20c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_DeInit+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a5a      	ldr	r2, [pc, #360]	@ (800290c <HAL_GPIO_DeInit+0x210>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_DeInit+0xae>
 80027a6:	2309      	movs	r3, #9
 80027a8:	e012      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027aa:	230a      	movs	r3, #10
 80027ac:	e010      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027ae:	2308      	movs	r3, #8
 80027b0:	e00e      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027b2:	2307      	movs	r3, #7
 80027b4:	e00c      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027b6:	2306      	movs	r3, #6
 80027b8:	e00a      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027ba:	2305      	movs	r3, #5
 80027bc:	e008      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027be:	2304      	movs	r3, #4
 80027c0:	e006      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027c2:	2303      	movs	r3, #3
 80027c4:	e004      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_GPIO_DeInit+0xd4>
 80027ce:	2300      	movs	r3, #0
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	f002 0203 	and.w	r2, r2, #3
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	4093      	lsls	r3, r2
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d132      	bne.n	8002846 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80027e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4949      	ldr	r1, [pc, #292]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80027ee:	4b48      	ldr	r3, [pc, #288]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4946      	ldr	r1, [pc, #280]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80027fc:	4b44      	ldr	r3, [pc, #272]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	4942      	ldr	r1, [pc, #264]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 8002806:	4013      	ands	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800280a:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	493f      	ldr	r1, [pc, #252]	@ (8002910 <HAL_GPIO_DeInit+0x214>)
 8002814:	4013      	ands	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002828:	4a2e      	ldr	r2, [pc, #184]	@ (80028e4 <HAL_GPIO_DeInit+0x1e8>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	43da      	mvns	r2, r3
 8002838:	482a      	ldr	r0, [pc, #168]	@ (80028e4 <HAL_GPIO_DeInit+0x1e8>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	400a      	ands	r2, r1
 8002840:	3302      	adds	r3, #2
 8002842:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2103      	movs	r1, #3
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	401a      	ands	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	08d2      	lsrs	r2, r2, #3
 800287c:	4019      	ands	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2103      	movs	r1, #3
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	401a      	ands	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	2101      	movs	r1, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	401a      	ands	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2103      	movs	r1, #3
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	401a      	ands	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3301      	adds	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f af22 	bls.w	8002718 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40022000 	.word	0x40022000
 800290c:	40022400 	.word	0x40022400
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e12b      	b.n	8002bb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fce8 	bl	8001344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	@ 0x24
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800299a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ac:	f001 ff06 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 80029b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a81      	ldr	r2, [pc, #516]	@ (8002bbc <HAL_I2C_Init+0x274>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d807      	bhi.n	80029cc <HAL_I2C_Init+0x84>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a80      	ldr	r2, [pc, #512]	@ (8002bc0 <HAL_I2C_Init+0x278>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bf94      	ite	ls
 80029c4:	2301      	movls	r3, #1
 80029c6:	2300      	movhi	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e006      	b.n	80029da <HAL_I2C_Init+0x92>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a7d      	ldr	r2, [pc, #500]	@ (8002bc4 <HAL_I2C_Init+0x27c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0e7      	b.n	8002bb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a78      	ldr	r2, [pc, #480]	@ (8002bc8 <HAL_I2C_Init+0x280>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9b      	lsrs	r3, r3, #18
 80029ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a6a      	ldr	r2, [pc, #424]	@ (8002bbc <HAL_I2C_Init+0x274>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d802      	bhi.n	8002a1c <HAL_I2C_Init+0xd4>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	e009      	b.n	8002a30 <HAL_I2C_Init+0xe8>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	4a69      	ldr	r2, [pc, #420]	@ (8002bcc <HAL_I2C_Init+0x284>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	495c      	ldr	r1, [pc, #368]	@ (8002bbc <HAL_I2C_Init+0x274>)
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	d819      	bhi.n	8002a84 <HAL_I2C_Init+0x13c>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e59      	subs	r1, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a64:	400b      	ands	r3, r1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_I2C_Init+0x138>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e59      	subs	r1, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7e:	e051      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002a80:	2304      	movs	r3, #4
 8002a82:	e04f      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d111      	bne.n	8002ab0 <HAL_I2C_Init+0x168>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e012      	b.n	8002ad6 <HAL_I2C_Init+0x18e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e58      	subs	r0, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	0099      	lsls	r1, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Init+0x196>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e022      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10e      	bne.n	8002b04 <HAL_I2C_Init+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e58      	subs	r0, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b02:	e00f      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	6809      	ldr	r1, [r1, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6911      	ldr	r1, [r2, #16]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	000186a0 	.word	0x000186a0
 8002bc0:	001e847f 	.word	0x001e847f
 8002bc4:	003d08ff 	.word	0x003d08ff
 8002bc8:	431bde83 	.word	0x431bde83
 8002bcc:	10624dd3 	.word	0x10624dd3

08002bd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	460b      	mov	r3, r1
 8002be4:	813b      	strh	r3, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bea:	f7ff fa23 	bl	8002034 <HAL_GetTick>
 8002bee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	f040 80d9 	bne.w	8002db0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2319      	movs	r3, #25
 8002c04:	2201      	movs	r2, #1
 8002c06:	496d      	ldr	r1, [pc, #436]	@ (8002dbc <HAL_I2C_Mem_Write+0x1ec>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fc8b 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	e0cc      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Mem_Write+0x56>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0c5      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d007      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2221      	movs	r2, #33	@ 0x21
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2240      	movs	r2, #64	@ 0x40
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8e:	88f8      	ldrh	r0, [r7, #6]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fac2 	bl	8003228 <I2C_RequestMemoryWrite>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d052      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e081      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fd50 	bl	8003758 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06b      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d11b      	bne.n	8002d50 <HAL_I2C_Mem_Write+0x180>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d017      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1aa      	bne.n	8002cae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fd43 	bl	80037e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d107      	bne.n	8002d80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e016      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	00100002 	.word	0x00100002
 8002dc0:	ffff0000 	.word	0xffff0000

08002dc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	@ 0x30
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	817b      	strh	r3, [r7, #10]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dde:	f7ff f929 	bl	8002034 <HAL_GetTick>
 8002de2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	f040 8214 	bne.w	800321a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2319      	movs	r3, #25
 8002df8:	2201      	movs	r2, #1
 8002dfa:	497b      	ldr	r1, [pc, #492]	@ (8002fe8 <HAL_I2C_Mem_Read+0x224>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fb91 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e207      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_I2C_Mem_Read+0x56>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e200      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d007      	beq.n	8002e40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2222      	movs	r2, #34	@ 0x22
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2240      	movs	r2, #64	@ 0x40
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fec <HAL_I2C_Mem_Read+0x228>)
 8002e80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e82:	88f8      	ldrh	r0, [r7, #6]
 8002e84:	893a      	ldrh	r2, [r7, #8]
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4603      	mov	r3, r0
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa5e 	bl	8003354 <I2C_RequestMemoryRead>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1bc      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e190      	b.n	80031f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d11b      	bne.n	8002f12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e170      	b.n	80031f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d11b      	bne.n	8002f52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	e150      	b.n	80031f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f68:	e144      	b.n	80031f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	f200 80f1 	bhi.w	8003156 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d123      	bne.n	8002fc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fc79 	bl	8003878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e145      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fc2:	e117      	b.n	80031f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d14e      	bne.n	800306a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	4906      	ldr	r1, [pc, #24]	@ (8002ff0 <HAL_I2C_Mem_Read+0x22c>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 faa4 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e11a      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
 8002fe6:	bf00      	nop
 8002fe8:	00100002 	.word	0x00100002
 8002fec:	ffff0000 	.word	0xffff0000
 8002ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003068:	e0c4      	b.n	80031f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003070:	2200      	movs	r2, #0
 8003072:	496c      	ldr	r1, [pc, #432]	@ (8003224 <HAL_I2C_Mem_Read+0x460>)
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fa55 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cb      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030cc:	2200      	movs	r2, #0
 80030ce:	4955      	ldr	r1, [pc, #340]	@ (8003224 <HAL_I2C_Mem_Read+0x460>)
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fa27 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e09d      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003154:	e04e      	b.n	80031f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003158:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fb8c 	bl	8003878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e058      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d124      	bne.n	80031f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d107      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f aeb6 	bne.w	8002f6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3728      	adds	r7, #40	@ 0x28
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	00010004 	.word	0x00010004

08003228 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003250:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2200      	movs	r2, #0
 800325a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f960 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003278:	d103      	bne.n	8003282 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e05f      	b.n	8003346 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003294:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	6a3a      	ldr	r2, [r7, #32]
 800329a:	492d      	ldr	r1, [pc, #180]	@ (8003350 <I2C_RequestMemoryWrite+0x128>)
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f9bb 	bl	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e04c      	b.n	8003346 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c4:	6a39      	ldr	r1, [r7, #32]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa46 	bl	8003758 <I2C_WaitOnTXEFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d107      	bne.n	80032ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e02b      	b.n	8003346 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f4:	893b      	ldrh	r3, [r7, #8]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]
 80032fe:	e021      	b.n	8003344 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003300:	893b      	ldrh	r3, [r7, #8]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003310:	6a39      	ldr	r1, [r7, #32]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fa20 	bl	8003758 <I2C_WaitOnTXEFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00d      	beq.n	800333a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b04      	cmp	r3, #4
 8003324:	d107      	bne.n	8003336 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003334:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e005      	b.n	8003346 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800333a:	893b      	ldrh	r3, [r7, #8]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	00010002 	.word	0x00010002

08003354 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800337c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	2200      	movs	r2, #0
 8003396:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f8c2 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033b4:	d103      	bne.n	80033be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0aa      	b.n	8003518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	4952      	ldr	r1, [pc, #328]	@ (8003520 <I2C_RequestMemoryRead+0x1cc>)
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f91d 	bl	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e097      	b.n	8003518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f9a8 	bl	8003758 <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003424:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e076      	b.n	8003518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	e021      	b.n	8003480 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	b29b      	uxth	r3, r3
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344c:	6a39      	ldr	r1, [r7, #32]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f982 	bl	8003758 <I2C_WaitOnTXEFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	2b04      	cmp	r3, #4
 8003460:	d107      	bne.n	8003472 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003470:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e050      	b.n	8003518 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003482:	6a39      	ldr	r1, [r7, #32]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f967 	bl	8003758 <I2C_WaitOnTXEFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00d      	beq.n	80034ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	2b04      	cmp	r3, #4
 8003496:	d107      	bne.n	80034a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e035      	b.n	8003518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f82b 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e2:	d103      	bne.n	80034ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e013      	b.n	8003518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	6a3a      	ldr	r2, [r7, #32]
 8003504:	4906      	ldr	r1, [pc, #24]	@ (8003520 <I2C_RequestMemoryRead+0x1cc>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f886 	bl	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	00010002 	.word	0x00010002

08003524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	e048      	b.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800353c:	d044      	beq.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fe fd79 	bl	8002034 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d139      	bne.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d10d      	bne.n	800357a <I2C_WaitOnFlagUntilTimeout+0x56>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	e00c      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x70>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	d116      	bne.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e023      	b.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d10d      	bne.n	80035ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	43da      	mvns	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	e00c      	b.n	8003608 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4013      	ands	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	429a      	cmp	r2, r3
 800360c:	d093      	beq.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003626:	e071      	b.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003636:	d123      	bne.n	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003646:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	f043 0204 	orr.w	r2, r3, #4
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e067      	b.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003686:	d041      	beq.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fe fcd4 	bl	8002034 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d136      	bne.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10c      	bne.n	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4013      	ands	r3, r2
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e00b      	b.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e021      	b.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10c      	bne.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e00b      	b.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f af6d 	bne.w	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f8e3 	bl	8003932 <I2C_IsAcknowledgeFailed>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e034      	b.n	80037e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800377c:	d028      	beq.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe fc59 	bl	8002034 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11d      	bne.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379e:	2b80      	cmp	r3, #128	@ 0x80
 80037a0:	d016      	beq.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037da:	2b80      	cmp	r3, #128	@ 0x80
 80037dc:	d1c3      	bne.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f4:	e034      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f89b 	bl	8003932 <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e034      	b.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800380c:	d028      	beq.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fc11 	bl	8002034 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d016      	beq.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b04      	cmp	r3, #4
 800386c:	d1c3      	bne.n	80037f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003884:	e049      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b10      	cmp	r3, #16
 8003892:	d119      	bne.n	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0210 	mvn.w	r2, #16
 800389c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e030      	b.n	800392a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c8:	f7fe fbb4 	bl	8002034 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d302      	bcc.n	80038de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11d      	bne.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d016      	beq.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e007      	b.n	800392a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003924:	2b40      	cmp	r3, #64	@ 0x40
 8003926:	d1ae      	bne.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003948:	d11b      	bne.n	8003982 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003952:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0bf      	b.n	8003b22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fd2e 	bl	8001418 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80039d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6999      	ldr	r1, [r3, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b4a      	ldr	r3, [pc, #296]	@ (8003b2c <HAL_LTDC_Init+0x19c>)
 8003a04:	400b      	ands	r3, r1
 8003a06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68d9      	ldr	r1, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b3e      	ldr	r3, [pc, #248]	@ (8003b2c <HAL_LTDC_Init+0x19c>)
 8003a32:	400b      	ands	r3, r1
 8003a34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68d9      	ldr	r1, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6919      	ldr	r1, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b33      	ldr	r3, [pc, #204]	@ (8003b2c <HAL_LTDC_Init+0x19c>)
 8003a60:	400b      	ands	r3, r1
 8003a62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6919      	ldr	r1, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6959      	ldr	r1, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <HAL_LTDC_Init+0x19c>)
 8003a8e:	400b      	ands	r3, r1
 8003a90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6959      	ldr	r1, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0206 	orr.w	r2, r2, #6
 8003afe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	f000f800 	.word	0xf000f800

08003b30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b30:	b5b0      	push	{r4, r5, r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_LTDC_ConfigLayer+0x1a>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e02c      	b.n	8003ba4 <HAL_LTDC_ConfigLayer+0x74>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2134      	movs	r1, #52	@ 0x34
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f811 	bl	8003bac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bdb0      	pop	{r4, r5, r7, pc}

08003bac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	4413      	add	r3, r2
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	01db      	lsls	r3, r3, #7
 8003bd8:	4413      	add	r3, r2
 8003bda:	3384      	adds	r3, #132	@ 0x84
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	4611      	mov	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	01d2      	lsls	r2, r2, #7
 8003be8:	440a      	add	r2, r1
 8003bea:	3284      	adds	r2, #132	@ 0x84
 8003bec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003bf0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c02:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c04:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	01db      	lsls	r3, r3, #7
 8003c10:	440b      	add	r3, r1
 8003c12:	3384      	adds	r3, #132	@ 0x84
 8003c14:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c2a:	4413      	add	r3, r2
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	01db      	lsls	r3, r3, #7
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3384      	adds	r3, #132	@ 0x84
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	4611      	mov	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	01d2      	lsls	r2, r2, #7
 8003c4a:	440a      	add	r2, r1
 8003c4c:	3284      	adds	r2, #132	@ 0x84
 8003c4e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003c52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c62:	4413      	add	r3, r2
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	01db      	lsls	r3, r3, #7
 8003c70:	440b      	add	r3, r1
 8003c72:	3384      	adds	r3, #132	@ 0x84
 8003c74:	4619      	mov	r1, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	01db      	lsls	r3, r3, #7
 8003c86:	4413      	add	r3, r2
 8003c88:	3384      	adds	r3, #132	@ 0x84
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	4611      	mov	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	01d2      	lsls	r2, r2, #7
 8003c96:	440a      	add	r2, r1
 8003c98:	3284      	adds	r2, #132	@ 0x84
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	01db      	lsls	r3, r3, #7
 8003caa:	4413      	add	r3, r2
 8003cac:	3384      	adds	r3, #132	@ 0x84
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003cc6:	041b      	lsls	r3, r3, #16
 8003cc8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	01db      	lsls	r3, r3, #7
 8003cdc:	4413      	add	r3, r2
 8003cde:	3384      	adds	r3, #132	@ 0x84
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	01db      	lsls	r3, r3, #7
 8003cec:	4413      	add	r3, r2
 8003cee:	3384      	adds	r3, #132	@ 0x84
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	01db      	lsls	r3, r3, #7
 8003d10:	440b      	add	r3, r1
 8003d12:	3384      	adds	r3, #132	@ 0x84
 8003d14:	4619      	mov	r1, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	01db      	lsls	r3, r3, #7
 8003d26:	4413      	add	r3, r2
 8003d28:	3384      	adds	r3, #132	@ 0x84
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	4611      	mov	r1, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	01d2      	lsls	r2, r2, #7
 8003d36:	440a      	add	r2, r1
 8003d38:	3284      	adds	r2, #132	@ 0x84
 8003d3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d3e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	01db      	lsls	r3, r3, #7
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3384      	adds	r3, #132	@ 0x84
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	01db      	lsls	r3, r3, #7
 8003d60:	4413      	add	r3, r2
 8003d62:	3384      	adds	r3, #132	@ 0x84
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	01d2      	lsls	r2, r2, #7
 8003d70:	440a      	add	r2, r1
 8003d72:	3284      	adds	r2, #132	@ 0x84
 8003d74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003d78:	f023 0307 	bic.w	r3, r3, #7
 8003d7c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	6809      	ldr	r1, [r1, #0]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	01c9      	lsls	r1, r1, #7
 8003d90:	4401      	add	r1, r0
 8003d92:	3184      	adds	r1, #132	@ 0x84
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	01db      	lsls	r3, r3, #7
 8003da2:	4413      	add	r3, r2
 8003da4:	3384      	adds	r3, #132	@ 0x84
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	01db      	lsls	r3, r3, #7
 8003db2:	4413      	add	r3, r2
 8003db4:	3384      	adds	r3, #132	@ 0x84
 8003db6:	461a      	mov	r2, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	01db      	lsls	r3, r3, #7
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3384      	adds	r3, #132	@ 0x84
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	e01b      	b.n	8003e18 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003de8:	2303      	movs	r3, #3
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e014      	b.n	8003e18 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d00b      	beq.n	8003e0e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d007      	beq.n	8003e0e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d003      	beq.n	8003e0e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e0a:	2b07      	cmp	r3, #7
 8003e0c:	d102      	bne.n	8003e14 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e001      	b.n	8003e18 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003e14:	2301      	movs	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	01db      	lsls	r3, r3, #7
 8003e22:	4413      	add	r3, r2
 8003e24:	3384      	adds	r3, #132	@ 0x84
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	01d2      	lsls	r2, r2, #7
 8003e32:	440a      	add	r2, r1
 8003e34:	3284      	adds	r2, #132	@ 0x84
 8003e36:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	1acb      	subs	r3, r1, r3
 8003e52:	69f9      	ldr	r1, [r7, #28]
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	6809      	ldr	r1, [r1, #0]
 8003e5e:	4608      	mov	r0, r1
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	01c9      	lsls	r1, r1, #7
 8003e64:	4401      	add	r1, r0
 8003e66:	3184      	adds	r1, #132	@ 0x84
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	01db      	lsls	r3, r3, #7
 8003e76:	4413      	add	r3, r2
 8003e78:	3384      	adds	r3, #132	@ 0x84
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	4611      	mov	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	01d2      	lsls	r2, r2, #7
 8003e86:	440a      	add	r2, r1
 8003e88:	3284      	adds	r2, #132	@ 0x84
 8003e8a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e8e:	f023 0307 	bic.w	r3, r3, #7
 8003e92:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	01db      	lsls	r3, r3, #7
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3384      	adds	r3, #132	@ 0x84
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	01db      	lsls	r3, r3, #7
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3384      	adds	r3, #132	@ 0x84
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	01d2      	lsls	r2, r2, #7
 8003ec4:	440a      	add	r2, r1
 8003ec6:	3284      	adds	r2, #132	@ 0x84
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e267      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d075      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003efa:	4b88      	ldr	r3, [pc, #544]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d00c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f06:	4b85      	ldr	r3, [pc, #532]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d112      	bne.n	8003f38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f12:	4b82      	ldr	r3, [pc, #520]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f1e:	d10b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	4b7e      	ldr	r3, [pc, #504]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d05b      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x108>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d157      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e242      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f40:	d106      	bne.n	8003f50 <HAL_RCC_OscConfig+0x74>
 8003f42:	4b76      	ldr	r3, [pc, #472]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a75      	ldr	r2, [pc, #468]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e01d      	b.n	8003f8c <HAL_RCC_OscConfig+0xb0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x98>
 8003f5a:	4b70      	ldr	r3, [pc, #448]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b6d      	ldr	r3, [pc, #436]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0xb0>
 8003f74:	4b69      	ldr	r3, [pc, #420]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a68      	ldr	r2, [pc, #416]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b66      	ldr	r3, [pc, #408]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a65      	ldr	r2, [pc, #404]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe f84e 	bl	8002034 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fe f84a 	bl	8002034 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	@ 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e207      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b5b      	ldr	r3, [pc, #364]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0xc0>
 8003fba:	e014      	b.n	8003fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe f83a 	bl	8002034 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe f836 	bl	8002034 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	@ 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1f3      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	4b51      	ldr	r3, [pc, #324]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0xe8>
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d063      	beq.n	80040ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffe:	4b47      	ldr	r3, [pc, #284]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004006:	2b08      	cmp	r3, #8
 8004008:	d11c      	bne.n	8004044 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400a:	4b44      	ldr	r3, [pc, #272]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d116      	bne.n	8004044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	4b41      	ldr	r3, [pc, #260]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_RCC_OscConfig+0x152>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e1c7      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402e:	4b3b      	ldr	r3, [pc, #236]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4937      	ldr	r1, [pc, #220]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	e03a      	b.n	80040ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404c:	4b34      	ldr	r3, [pc, #208]	@ (8004120 <HAL_RCC_OscConfig+0x244>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fd ffef 	bl	8002034 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405a:	f7fd ffeb 	bl	8002034 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1a8      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b28      	ldr	r3, [pc, #160]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4925      	ldr	r1, [pc, #148]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	e015      	b.n	80040ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408e:	4b24      	ldr	r3, [pc, #144]	@ (8004120 <HAL_RCC_OscConfig+0x244>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd ffce 	bl	8002034 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409c:	f7fd ffca 	bl	8002034 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e187      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d036      	beq.n	8004134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ce:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <HAL_RCC_OscConfig+0x248>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fd ffae 	bl	8002034 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fd ffaa 	bl	8002034 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e167      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <HAL_RCC_OscConfig+0x240>)
 80040f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x200>
 80040fa:	e01b      	b.n	8004134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_OscConfig+0x248>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fd ff97 	bl	8002034 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004108:	e00e      	b.n	8004128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410a:	f7fd ff93 	bl	8002034 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d907      	bls.n	8004128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e150      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
 800411c:	40023800 	.word	0x40023800
 8004120:	42470000 	.word	0x42470000
 8004124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	4b88      	ldr	r3, [pc, #544]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 800412a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ea      	bne.n	800410a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8097 	beq.w	8004270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004146:	4b81      	ldr	r3, [pc, #516]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	4b7d      	ldr	r3, [pc, #500]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	4a7c      	ldr	r2, [pc, #496]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	@ 0x40
 8004162:	4b7a      	ldr	r3, [pc, #488]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	4b77      	ldr	r3, [pc, #476]	@ (8004350 <HAL_RCC_OscConfig+0x474>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417e:	4b74      	ldr	r3, [pc, #464]	@ (8004350 <HAL_RCC_OscConfig+0x474>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a73      	ldr	r2, [pc, #460]	@ (8004350 <HAL_RCC_OscConfig+0x474>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418a:	f7fd ff53 	bl	8002034 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7fd ff4f 	bl	8002034 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e10c      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <HAL_RCC_OscConfig+0x474>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2ea>
 80041b8:	4b64      	ldr	r3, [pc, #400]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041bc:	4a63      	ldr	r2, [pc, #396]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x324>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x30c>
 80041ce:	4b5f      	ldr	r3, [pc, #380]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	4a5e      	ldr	r2, [pc, #376]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041da:	4b5c      	ldr	r3, [pc, #368]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	4a5b      	ldr	r2, [pc, #364]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0x324>
 80041e8:	4b58      	ldr	r3, [pc, #352]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ec:	4a57      	ldr	r2, [pc, #348]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f4:	4b55      	ldr	r3, [pc, #340]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f8:	4a54      	ldr	r2, [pc, #336]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80041fa:	f023 0304 	bic.w	r3, r3, #4
 80041fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd ff14 	bl	8002034 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fd ff10 	bl	8002034 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0cb      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	4b49      	ldr	r3, [pc, #292]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ee      	beq.n	8004210 <HAL_RCC_OscConfig+0x334>
 8004232:	e014      	b.n	800425e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004234:	f7fd fefe 	bl	8002034 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fd fefa 	bl	8002034 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0b5      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004252:	4b3e      	ldr	r3, [pc, #248]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1ee      	bne.n	800423c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004264:	4b39      	ldr	r3, [pc, #228]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	4a38      	ldr	r2, [pc, #224]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 800426a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800426e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80a1 	beq.w	80043bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427a:	4b34      	ldr	r3, [pc, #208]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b08      	cmp	r3, #8
 8004284:	d05c      	beq.n	8004340 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d141      	bne.n	8004312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b31      	ldr	r3, [pc, #196]	@ (8004354 <HAL_RCC_OscConfig+0x478>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fd fece 	bl	8002034 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fd feca 	bl	8002034 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e087      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	4b27      	ldr	r3, [pc, #156]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	3b01      	subs	r3, #1
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	491b      	ldr	r1, [pc, #108]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004354 <HAL_RCC_OscConfig+0x478>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fd fea3 	bl	8002034 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f2:	f7fd fe9f 	bl	8002034 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e05c      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x416>
 8004310:	e054      	b.n	80043bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <HAL_RCC_OscConfig+0x478>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fd fe8c 	bl	8002034 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004320:	f7fd fe88 	bl	8002034 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e045      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	4b06      	ldr	r3, [pc, #24]	@ (800434c <HAL_RCC_OscConfig+0x470>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x444>
 800433e:	e03d      	b.n	80043bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d107      	bne.n	8004358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e038      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
 800434c:	40023800 	.word	0x40023800
 8004350:	40007000 	.word	0x40007000
 8004354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004358:	4b1b      	ldr	r3, [pc, #108]	@ (80043c8 <HAL_RCC_OscConfig+0x4ec>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d028      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d121      	bne.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d11a      	bne.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800438e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004390:	4293      	cmp	r3, r2
 8004392:	d111      	bne.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	3b01      	subs	r3, #1
 80043a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d107      	bne.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800

080043cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0cc      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e0:	4b68      	ldr	r3, [pc, #416]	@ (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d90c      	bls.n	8004408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b65      	ldr	r3, [pc, #404]	@ (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b63      	ldr	r3, [pc, #396]	@ (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0b8      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004420:	4b59      	ldr	r3, [pc, #356]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a58      	ldr	r2, [pc, #352]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800442a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004438:	4b53      	ldr	r3, [pc, #332]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4a52      	ldr	r2, [pc, #328]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b50      	ldr	r3, [pc, #320]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	494d      	ldr	r1, [pc, #308]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d044      	beq.n	80044ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b47      	ldr	r3, [pc, #284]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d119      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e07f      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d003      	beq.n	800448a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004486:	2b03      	cmp	r3, #3
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448a:	4b3f      	ldr	r3, [pc, #252]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e06f      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	4b3b      	ldr	r3, [pc, #236]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e067      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044aa:	4b37      	ldr	r3, [pc, #220]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 0203 	bic.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4934      	ldr	r1, [pc, #208]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044bc:	f7fd fdba 	bl	8002034 <HAL_GetTick>
 80044c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	e00a      	b.n	80044da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c4:	f7fd fdb6 	bl	8002034 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e04f      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	4b2b      	ldr	r3, [pc, #172]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 020c 	and.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d1eb      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ec:	4b25      	ldr	r3, [pc, #148]	@ (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d20c      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b22      	ldr	r3, [pc, #136]	@ (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b20      	ldr	r3, [pc, #128]	@ (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e032      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b19      	ldr	r3, [pc, #100]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4916      	ldr	r1, [pc, #88]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453e:	4b12      	ldr	r3, [pc, #72]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	490e      	ldr	r1, [pc, #56]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004552:	f000 f821 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004556:	4602      	mov	r2, r0
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	490a      	ldr	r1, [pc, #40]	@ (800458c <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	4a09      	ldr	r2, [pc, #36]	@ (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800456e:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fd1a 	bl	8001fac <HAL_InitTick>

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023c00 	.word	0x40023c00
 8004588:	40023800 	.word	0x40023800
 800458c:	080077a4 	.word	0x080077a4
 8004590:	20000010 	.word	0x20000010
 8004594:	20000014 	.word	0x20000014

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b094      	sub	sp, #80	@ 0x50
 800459e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b0:	4b79      	ldr	r3, [pc, #484]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d00d      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x40>
 80045bc:	2b08      	cmp	r3, #8
 80045be:	f200 80e1 	bhi.w	8004784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x34>
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d003      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ca:	e0db      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045cc:	4b73      	ldr	r3, [pc, #460]	@ (800479c <HAL_RCC_GetSysClockFreq+0x204>)
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045d0:	e0db      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d2:	4b73      	ldr	r3, [pc, #460]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80045d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045d6:	e0d8      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d063      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	099b      	lsrs	r3, r3, #6
 80045f4:	2200      	movs	r2, #0
 80045f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	633b      	str	r3, [r7, #48]	@ 0x30
 8004602:	2300      	movs	r3, #0
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
 8004606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800460a:	4622      	mov	r2, r4
 800460c:	462b      	mov	r3, r5
 800460e:	f04f 0000 	mov.w	r0, #0
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	0159      	lsls	r1, r3, #5
 8004618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800461c:	0150      	lsls	r0, r2, #5
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4621      	mov	r1, r4
 8004624:	1a51      	subs	r1, r2, r1
 8004626:	6139      	str	r1, [r7, #16]
 8004628:	4629      	mov	r1, r5
 800462a:	eb63 0301 	sbc.w	r3, r3, r1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800463c:	4659      	mov	r1, fp
 800463e:	018b      	lsls	r3, r1, #6
 8004640:	4651      	mov	r1, sl
 8004642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004646:	4651      	mov	r1, sl
 8004648:	018a      	lsls	r2, r1, #6
 800464a:	4651      	mov	r1, sl
 800464c:	ebb2 0801 	subs.w	r8, r2, r1
 8004650:	4659      	mov	r1, fp
 8004652:	eb63 0901 	sbc.w	r9, r3, r1
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800466a:	4690      	mov	r8, r2
 800466c:	4699      	mov	r9, r3
 800466e:	4623      	mov	r3, r4
 8004670:	eb18 0303 	adds.w	r3, r8, r3
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	462b      	mov	r3, r5
 8004678:	eb49 0303 	adc.w	r3, r9, r3
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800468a:	4629      	mov	r1, r5
 800468c:	024b      	lsls	r3, r1, #9
 800468e:	4621      	mov	r1, r4
 8004690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004694:	4621      	mov	r1, r4
 8004696:	024a      	lsls	r2, r1, #9
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800469e:	2200      	movs	r2, #0
 80046a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046a8:	f7fb fdfa 	bl	80002a0 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4613      	mov	r3, r2
 80046b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b4:	e058      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b6:	4b38      	ldr	r3, [pc, #224]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	2200      	movs	r2, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	4611      	mov	r1, r2
 80046c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	2300      	movs	r3, #0
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80046cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	0159      	lsls	r1, r3, #5
 80046de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e2:	0150      	lsls	r0, r2, #5
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4641      	mov	r1, r8
 80046ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ee:	4649      	mov	r1, r9
 80046f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004708:	ebb2 040a 	subs.w	r4, r2, sl
 800470c:	eb63 050b 	sbc.w	r5, r3, fp
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	00eb      	lsls	r3, r5, #3
 800471a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800471e:	00e2      	lsls	r2, r4, #3
 8004720:	4614      	mov	r4, r2
 8004722:	461d      	mov	r5, r3
 8004724:	4643      	mov	r3, r8
 8004726:	18e3      	adds	r3, r4, r3
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	464b      	mov	r3, r9
 800472c:	eb45 0303 	adc.w	r3, r5, r3
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800473e:	4629      	mov	r1, r5
 8004740:	028b      	lsls	r3, r1, #10
 8004742:	4621      	mov	r1, r4
 8004744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004748:	4621      	mov	r1, r4
 800474a:	028a      	lsls	r2, r1, #10
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004752:	2200      	movs	r2, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	61fa      	str	r2, [r7, #28]
 8004758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800475c:	f7fb fda0 	bl	80002a0 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4613      	mov	r3, r2
 8004766:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004768:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800477a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004782:	e002      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <HAL_RCC_GetSysClockFreq+0x204>)
 8004786:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800478a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800478c:	4618      	mov	r0, r3
 800478e:	3750      	adds	r7, #80	@ 0x50
 8004790:	46bd      	mov	sp, r7
 8004792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	00f42400 	.word	0x00f42400
 80047a0:	007a1200 	.word	0x007a1200

080047a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a8:	4b03      	ldr	r3, [pc, #12]	@ (80047b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000010 	.word	0x20000010

080047bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c0:	f7ff fff0 	bl	80047a4 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0a9b      	lsrs	r3, r3, #10
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4903      	ldr	r1, [pc, #12]	@ (80047e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40023800 	.word	0x40023800
 80047e0:	080077b4 	.word	0x080077b4

080047e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004814:	2b00      	cmp	r3, #0
 8004816:	d075      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004818:	4b91      	ldr	r3, [pc, #580]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800481e:	f7fd fc09 	bl	8002034 <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004826:	f7fd fc05 	bl	8002034 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e189      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004838:	4b8a      	ldr	r3, [pc, #552]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	019a      	lsls	r2, r3, #6
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	071b      	lsls	r3, r3, #28
 800485c:	4981      	ldr	r1, [pc, #516]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01f      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004870:	4b7c      	ldr	r3, [pc, #496]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004876:	0f1b      	lsrs	r3, r3, #28
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	019a      	lsls	r2, r3, #6
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	431a      	orrs	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	071b      	lsls	r3, r3, #28
 8004890:	4974      	ldr	r1, [pc, #464]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004898:	4b72      	ldr	r3, [pc, #456]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800489a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489e:	f023 021f 	bic.w	r2, r3, #31
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	496e      	ldr	r1, [pc, #440]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00d      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	019a      	lsls	r2, r3, #6
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	071b      	lsls	r3, r3, #28
 80048d0:	4964      	ldr	r1, [pc, #400]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048d8:	4b61      	ldr	r3, [pc, #388]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048de:	f7fd fba9 	bl	8002034 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048e6:	f7fd fba5 	bl	8002034 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e129      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004918:	2b00      	cmp	r3, #0
 800491a:	d079      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800491c:	4b52      	ldr	r3, [pc, #328]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004922:	f7fd fb87 	bl	8002034 <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800492a:	f7fd fb83 	bl	8002034 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e107      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800493c:	4b49      	ldr	r3, [pc, #292]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004948:	d0ef      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d020      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004956:	4b43      	ldr	r3, [pc, #268]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495c:	0f1b      	lsrs	r3, r3, #28
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	019a      	lsls	r2, r3, #6
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	061b      	lsls	r3, r3, #24
 8004970:	431a      	orrs	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	493b      	ldr	r1, [pc, #236]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800497e:	4b39      	ldr	r3, [pc, #228]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004984:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	3b01      	subs	r3, #1
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	4934      	ldr	r1, [pc, #208]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01e      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049aa:	0e1b      	lsrs	r3, r3, #24
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	019a      	lsls	r2, r3, #6
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	071b      	lsls	r3, r3, #28
 80049c4:	4927      	ldr	r1, [pc, #156]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	4922      	ldr	r1, [pc, #136]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049e2:	4b21      	ldr	r3, [pc, #132]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e8:	f7fd fb24 	bl	8002034 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049f0:	f7fd fb20 	bl	8002034 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0a4      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a02:	4b18      	ldr	r3, [pc, #96]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0e:	d1ef      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 808b 	beq.w	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	4a0f      	ldr	r2, [pc, #60]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a46:	f7fd faf5 	bl	8002034 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a4c:	e010      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4e:	f7fd faf1 	bl	8002034 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d909      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e075      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004a60:	42470068 	.word	0x42470068
 8004a64:	40023800 	.word	0x40023800
 8004a68:	42470070 	.word	0x42470070
 8004a6c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a70:	4b38      	ldr	r3, [pc, #224]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0e8      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a7c:	4b36      	ldr	r3, [pc, #216]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a84:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d02f      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d028      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ab0:	4a29      	ldr	r2, [pc, #164]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab6:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d114      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fd fab7 	bl	8002034 <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fd fab3 	bl	8002034 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e035      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ee      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004af8:	d10d      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004afa:	4b17      	ldr	r3, [pc, #92]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0e:	4912      	ldr	r1, [pc, #72]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]
 8004b14:	e005      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004b16:	4b10      	ldr	r3, [pc, #64]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b20:	6093      	str	r3, [r2, #8]
 8004b22:	4b0d      	ldr	r3, [pc, #52]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	490a      	ldr	r1, [pc, #40]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004b46:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b48:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40007000 	.word	0x40007000
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	42470e40 	.word	0x42470e40
 8004b60:	424711e0 	.word	0x424711e0

08004b64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e07b      	b.n	8004c6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b86:	d009      	beq.n	8004b9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61da      	str	r2, [r3, #28]
 8004b8e:	e005      	b.n	8004b9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fc fd56 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	ea42 0103 	orr.w	r1, r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f003 0104 	and.w	r1, r3, #4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	f003 0210 	and.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e01a      	b.n	8004cbe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fc fd29 	bl	80016f8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b088      	sub	sp, #32
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd6:	f7fd f9ad 	bl	8002034 <HAL_GetTick>
 8004cda:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d001      	beq.n	8004cf0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	e12a      	b.n	8004f46 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_Transmit+0x36>
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e122      	b.n	8004f46 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_SPI_Transmit+0x48>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e11b      	b.n	8004f46 <HAL_SPI_Transmit+0x280>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d5c:	d10f      	bne.n	8004d7e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d007      	beq.n	8004d9c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da4:	d152      	bne.n	8004e4c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Transmit+0xee>
 8004dae:	8b7b      	ldrh	r3, [r7, #26]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d145      	bne.n	8004e40 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	1c9a      	adds	r2, r3, #2
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dd8:	e032      	b.n	8004e40 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d112      	bne.n	8004e0e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	881a      	ldrh	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e0c:	e018      	b.n	8004e40 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0e:	f7fd f911 	bl	8002034 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d803      	bhi.n	8004e26 <HAL_SPI_Transmit+0x160>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e24:	d102      	bne.n	8004e2c <HAL_SPI_Transmit+0x166>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e082      	b.n	8004f46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1c7      	bne.n	8004dda <HAL_SPI_Transmit+0x114>
 8004e4a:	e053      	b.n	8004ef4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Transmit+0x194>
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d147      	bne.n	8004eea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e80:	e033      	b.n	8004eea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d113      	bne.n	8004eb8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004eb6:	e018      	b.n	8004eea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb8:	f7fd f8bc 	bl	8002034 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d803      	bhi.n	8004ed0 <HAL_SPI_Transmit+0x20a>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ece:	d102      	bne.n	8004ed6 <HAL_SPI_Transmit+0x210>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e02d      	b.n	8004f46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1c6      	bne.n	8004e82 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f8bf 	bl	800507c <SPI_EndRxTxTransaction>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f5c:	b2db      	uxtb	r3, r3
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f7c:	f7fd f85a 	bl	8002034 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f8c:	f7fd f852 	bl	8002034 <HAL_GetTick>
 8004f90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f92:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	015b      	lsls	r3, r3, #5
 8004f98:	0d1b      	lsrs	r3, r3, #20
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fa2:	e054      	b.n	800504e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004faa:	d050      	beq.n	800504e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fac:	f7fd f842 	bl	8002034 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d902      	bls.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d13d      	bne.n	800503e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fda:	d111      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe4:	d004      	beq.n	8004ff0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fee:	d107      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005008:	d10f      	bne.n	800502a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e017      	b.n	800506e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3b01      	subs	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	bf0c      	ite	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2300      	movne	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	429a      	cmp	r2, r3
 800506a:	d19b      	bne.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000010 	.word	0x20000010

0800507c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2201      	movs	r2, #1
 8005090:	2102      	movs	r1, #2
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ff6a 	bl	8004f6c <SPI_WaitFlagStateUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e032      	b.n	8005114 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <SPI_EndRxTxTransaction+0xa0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005120 <SPI_EndRxTxTransaction+0xa4>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	0d5b      	lsrs	r3, r3, #21
 80050ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050cc:	d112      	bne.n	80050f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2180      	movs	r1, #128	@ 0x80
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff ff47 	bl	8004f6c <SPI_WaitFlagStateUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d016      	beq.n	8005112 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e00f      	b.n	8005114 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510a:	2b80      	cmp	r3, #128	@ 0x80
 800510c:	d0f2      	beq.n	80050f4 <SPI_EndRxTxTransaction+0x78>
 800510e:	e000      	b.n	8005112 <SPI_EndRxTxTransaction+0x96>
        break;
 8005110:	bf00      	nop
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000010 	.word	0x20000010
 8005120:	165e9f81 	.word	0x165e9f81

08005124 <findslot>:
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <findslot+0x2c>)
 8005126:	b510      	push	{r4, lr}
 8005128:	4604      	mov	r4, r0
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	b118      	cbz	r0, 8005136 <findslot+0x12>
 800512e:	6a03      	ldr	r3, [r0, #32]
 8005130:	b90b      	cbnz	r3, 8005136 <findslot+0x12>
 8005132:	f000 fb19 	bl	8005768 <__sinit>
 8005136:	2c13      	cmp	r4, #19
 8005138:	d807      	bhi.n	800514a <findslot+0x26>
 800513a:	4806      	ldr	r0, [pc, #24]	@ (8005154 <findslot+0x30>)
 800513c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005140:	3201      	adds	r2, #1
 8005142:	d002      	beq.n	800514a <findslot+0x26>
 8005144:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005148:	bd10      	pop	{r4, pc}
 800514a:	2000      	movs	r0, #0
 800514c:	e7fc      	b.n	8005148 <findslot+0x24>
 800514e:	bf00      	nop
 8005150:	20000030 	.word	0x20000030
 8005154:	20025a54 	.word	0x20025a54

08005158 <error>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	f000 fbb2 	bl	80058c4 <__errno>
 8005160:	2613      	movs	r6, #19
 8005162:	4605      	mov	r5, r0
 8005164:	2700      	movs	r7, #0
 8005166:	4630      	mov	r0, r6
 8005168:	4639      	mov	r1, r7
 800516a:	beab      	bkpt	0x00ab
 800516c:	4606      	mov	r6, r0
 800516e:	602e      	str	r6, [r5, #0]
 8005170:	4620      	mov	r0, r4
 8005172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005174 <checkerror>:
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d101      	bne.n	800517c <checkerror+0x8>
 8005178:	f7ff bfee 	b.w	8005158 <error>
 800517c:	4770      	bx	lr

0800517e <_swiread>:
 800517e:	b530      	push	{r4, r5, lr}
 8005180:	b085      	sub	sp, #20
 8005182:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005186:	9203      	str	r2, [sp, #12]
 8005188:	2406      	movs	r4, #6
 800518a:	ad01      	add	r5, sp, #4
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	beab      	bkpt	0x00ab
 8005192:	4604      	mov	r4, r0
 8005194:	4620      	mov	r0, r4
 8005196:	f7ff ffed 	bl	8005174 <checkerror>
 800519a:	b005      	add	sp, #20
 800519c:	bd30      	pop	{r4, r5, pc}

0800519e <_read>:
 800519e:	b570      	push	{r4, r5, r6, lr}
 80051a0:	460e      	mov	r6, r1
 80051a2:	4614      	mov	r4, r2
 80051a4:	f7ff ffbe 	bl	8005124 <findslot>
 80051a8:	4605      	mov	r5, r0
 80051aa:	b930      	cbnz	r0, 80051ba <_read+0x1c>
 80051ac:	f000 fb8a 	bl	80058c4 <__errno>
 80051b0:	2309      	movs	r3, #9
 80051b2:	6003      	str	r3, [r0, #0]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
 80051ba:	6800      	ldr	r0, [r0, #0]
 80051bc:	4622      	mov	r2, r4
 80051be:	4631      	mov	r1, r6
 80051c0:	f7ff ffdd 	bl	800517e <_swiread>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d0f5      	beq.n	80051b4 <_read+0x16>
 80051c8:	686b      	ldr	r3, [r5, #4]
 80051ca:	1a20      	subs	r0, r4, r0
 80051cc:	4403      	add	r3, r0
 80051ce:	606b      	str	r3, [r5, #4]
 80051d0:	e7f2      	b.n	80051b8 <_read+0x1a>

080051d2 <_swilseek>:
 80051d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051d4:	460c      	mov	r4, r1
 80051d6:	4616      	mov	r6, r2
 80051d8:	f7ff ffa4 	bl	8005124 <findslot>
 80051dc:	4605      	mov	r5, r0
 80051de:	b940      	cbnz	r0, 80051f2 <_swilseek+0x20>
 80051e0:	f000 fb70 	bl	80058c4 <__errno>
 80051e4:	2309      	movs	r3, #9
 80051e6:	6003      	str	r3, [r0, #0]
 80051e8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80051ec:	4620      	mov	r0, r4
 80051ee:	b003      	add	sp, #12
 80051f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f2:	2e02      	cmp	r6, #2
 80051f4:	d903      	bls.n	80051fe <_swilseek+0x2c>
 80051f6:	f000 fb65 	bl	80058c4 <__errno>
 80051fa:	2316      	movs	r3, #22
 80051fc:	e7f3      	b.n	80051e6 <_swilseek+0x14>
 80051fe:	2e01      	cmp	r6, #1
 8005200:	d112      	bne.n	8005228 <_swilseek+0x56>
 8005202:	6843      	ldr	r3, [r0, #4]
 8005204:	18e4      	adds	r4, r4, r3
 8005206:	d4f6      	bmi.n	80051f6 <_swilseek+0x24>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	260a      	movs	r6, #10
 800520c:	e9cd 3400 	strd	r3, r4, [sp]
 8005210:	466f      	mov	r7, sp
 8005212:	4630      	mov	r0, r6
 8005214:	4639      	mov	r1, r7
 8005216:	beab      	bkpt	0x00ab
 8005218:	4606      	mov	r6, r0
 800521a:	4630      	mov	r0, r6
 800521c:	f7ff ffaa 	bl	8005174 <checkerror>
 8005220:	2800      	cmp	r0, #0
 8005222:	dbe1      	blt.n	80051e8 <_swilseek+0x16>
 8005224:	606c      	str	r4, [r5, #4]
 8005226:	e7e1      	b.n	80051ec <_swilseek+0x1a>
 8005228:	2e02      	cmp	r6, #2
 800522a:	6803      	ldr	r3, [r0, #0]
 800522c:	d1ec      	bne.n	8005208 <_swilseek+0x36>
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	260c      	movs	r6, #12
 8005232:	466f      	mov	r7, sp
 8005234:	4630      	mov	r0, r6
 8005236:	4639      	mov	r1, r7
 8005238:	beab      	bkpt	0x00ab
 800523a:	4606      	mov	r6, r0
 800523c:	4630      	mov	r0, r6
 800523e:	f7ff ff99 	bl	8005174 <checkerror>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	d0d0      	beq.n	80051e8 <_swilseek+0x16>
 8005246:	4404      	add	r4, r0
 8005248:	e7de      	b.n	8005208 <_swilseek+0x36>

0800524a <_lseek>:
 800524a:	f7ff bfc2 	b.w	80051d2 <_swilseek>

0800524e <_swiwrite>:
 800524e:	b530      	push	{r4, r5, lr}
 8005250:	b085      	sub	sp, #20
 8005252:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005256:	9203      	str	r2, [sp, #12]
 8005258:	2405      	movs	r4, #5
 800525a:	ad01      	add	r5, sp, #4
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	beab      	bkpt	0x00ab
 8005262:	4604      	mov	r4, r0
 8005264:	4620      	mov	r0, r4
 8005266:	f7ff ff85 	bl	8005174 <checkerror>
 800526a:	b005      	add	sp, #20
 800526c:	bd30      	pop	{r4, r5, pc}

0800526e <_write>:
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	460e      	mov	r6, r1
 8005272:	4615      	mov	r5, r2
 8005274:	f7ff ff56 	bl	8005124 <findslot>
 8005278:	4604      	mov	r4, r0
 800527a:	b930      	cbnz	r0, 800528a <_write+0x1c>
 800527c:	f000 fb22 	bl	80058c4 <__errno>
 8005280:	2309      	movs	r3, #9
 8005282:	6003      	str	r3, [r0, #0]
 8005284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005288:	bd70      	pop	{r4, r5, r6, pc}
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	462a      	mov	r2, r5
 800528e:	4631      	mov	r1, r6
 8005290:	f7ff ffdd 	bl	800524e <_swiwrite>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	dbf5      	blt.n	8005284 <_write+0x16>
 8005298:	6862      	ldr	r2, [r4, #4]
 800529a:	1ae8      	subs	r0, r5, r3
 800529c:	4402      	add	r2, r0
 800529e:	42ab      	cmp	r3, r5
 80052a0:	6062      	str	r2, [r4, #4]
 80052a2:	d1f1      	bne.n	8005288 <_write+0x1a>
 80052a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052a8:	2000      	movs	r0, #0
 80052aa:	f7ff bf55 	b.w	8005158 <error>

080052ae <_swiclose>:
 80052ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b0:	2402      	movs	r4, #2
 80052b2:	9001      	str	r0, [sp, #4]
 80052b4:	ad01      	add	r5, sp, #4
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	beab      	bkpt	0x00ab
 80052bc:	4604      	mov	r4, r0
 80052be:	4620      	mov	r0, r4
 80052c0:	f7ff ff58 	bl	8005174 <checkerror>
 80052c4:	b003      	add	sp, #12
 80052c6:	bd30      	pop	{r4, r5, pc}

080052c8 <_close>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4605      	mov	r5, r0
 80052cc:	f7ff ff2a 	bl	8005124 <findslot>
 80052d0:	4604      	mov	r4, r0
 80052d2:	b930      	cbnz	r0, 80052e2 <_close+0x1a>
 80052d4:	f000 faf6 	bl	80058c4 <__errno>
 80052d8:	2309      	movs	r3, #9
 80052da:	6003      	str	r3, [r0, #0]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052e0:	bd38      	pop	{r3, r4, r5, pc}
 80052e2:	3d01      	subs	r5, #1
 80052e4:	2d01      	cmp	r5, #1
 80052e6:	d809      	bhi.n	80052fc <_close+0x34>
 80052e8:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <_close+0x40>)
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d104      	bne.n	80052fc <_close+0x34>
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	2000      	movs	r0, #0
 80052fa:	e7f1      	b.n	80052e0 <_close+0x18>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	f7ff ffd6 	bl	80052ae <_swiclose>
 8005302:	2800      	cmp	r0, #0
 8005304:	d0f5      	beq.n	80052f2 <_close+0x2a>
 8005306:	e7eb      	b.n	80052e0 <_close+0x18>
 8005308:	20025a54 	.word	0x20025a54

0800530c <_swistat>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	460c      	mov	r4, r1
 8005310:	f7ff ff08 	bl	8005124 <findslot>
 8005314:	4605      	mov	r5, r0
 8005316:	b930      	cbnz	r0, 8005326 <_swistat+0x1a>
 8005318:	f000 fad4 	bl	80058c4 <__errno>
 800531c:	2309      	movs	r3, #9
 800531e:	6003      	str	r3, [r0, #0]
 8005320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005324:	bd70      	pop	{r4, r5, r6, pc}
 8005326:	6863      	ldr	r3, [r4, #4]
 8005328:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005332:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005334:	260c      	movs	r6, #12
 8005336:	4630      	mov	r0, r6
 8005338:	4629      	mov	r1, r5
 800533a:	beab      	bkpt	0x00ab
 800533c:	4605      	mov	r5, r0
 800533e:	4628      	mov	r0, r5
 8005340:	f7ff ff18 	bl	8005174 <checkerror>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d0eb      	beq.n	8005320 <_swistat+0x14>
 8005348:	6120      	str	r0, [r4, #16]
 800534a:	2000      	movs	r0, #0
 800534c:	e7ea      	b.n	8005324 <_swistat+0x18>

0800534e <_fstat>:
 800534e:	460b      	mov	r3, r1
 8005350:	b510      	push	{r4, lr}
 8005352:	2100      	movs	r1, #0
 8005354:	4604      	mov	r4, r0
 8005356:	2258      	movs	r2, #88	@ 0x58
 8005358:	4618      	mov	r0, r3
 800535a:	f000 faab 	bl	80058b4 <memset>
 800535e:	4601      	mov	r1, r0
 8005360:	4620      	mov	r0, r4
 8005362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005366:	f7ff bfd1 	b.w	800530c <_swistat>

0800536a <_stat>:
 800536a:	b538      	push	{r3, r4, r5, lr}
 800536c:	460d      	mov	r5, r1
 800536e:	4604      	mov	r4, r0
 8005370:	2258      	movs	r2, #88	@ 0x58
 8005372:	2100      	movs	r1, #0
 8005374:	4628      	mov	r0, r5
 8005376:	f000 fa9d 	bl	80058b4 <memset>
 800537a:	4620      	mov	r0, r4
 800537c:	2100      	movs	r1, #0
 800537e:	f000 f811 	bl	80053a4 <_swiopen>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	4604      	mov	r4, r0
 8005386:	d00b      	beq.n	80053a0 <_stat+0x36>
 8005388:	686b      	ldr	r3, [r5, #4]
 800538a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800538e:	606b      	str	r3, [r5, #4]
 8005390:	4629      	mov	r1, r5
 8005392:	f7ff ffbb 	bl	800530c <_swistat>
 8005396:	4605      	mov	r5, r0
 8005398:	4620      	mov	r0, r4
 800539a:	f7ff ff95 	bl	80052c8 <_close>
 800539e:	462c      	mov	r4, r5
 80053a0:	4620      	mov	r0, r4
 80053a2:	bd38      	pop	{r3, r4, r5, pc}

080053a4 <_swiopen>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	4f29      	ldr	r7, [pc, #164]	@ (8005450 <_swiopen+0xac>)
 80053aa:	b096      	sub	sp, #88	@ 0x58
 80053ac:	4682      	mov	sl, r0
 80053ae:	460e      	mov	r6, r1
 80053b0:	2400      	movs	r4, #0
 80053b2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80053b6:	3301      	adds	r3, #1
 80053b8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80053bc:	d00c      	beq.n	80053d8 <_swiopen+0x34>
 80053be:	3401      	adds	r4, #1
 80053c0:	2c14      	cmp	r4, #20
 80053c2:	d1f6      	bne.n	80053b2 <_swiopen+0xe>
 80053c4:	f000 fa7e 	bl	80058c4 <__errno>
 80053c8:	2318      	movs	r3, #24
 80053ca:	6003      	str	r3, [r0, #0]
 80053cc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80053d0:	4620      	mov	r0, r4
 80053d2:	b016      	add	sp, #88	@ 0x58
 80053d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80053dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80053e0:	46e9      	mov	r9, sp
 80053e2:	d109      	bne.n	80053f8 <_swiopen+0x54>
 80053e4:	4649      	mov	r1, r9
 80053e6:	4650      	mov	r0, sl
 80053e8:	f7ff ffbf 	bl	800536a <_stat>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d003      	beq.n	80053f8 <_swiopen+0x54>
 80053f0:	f000 fa68 	bl	80058c4 <__errno>
 80053f4:	2311      	movs	r3, #17
 80053f6:	e7e8      	b.n	80053ca <_swiopen+0x26>
 80053f8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80053fc:	f240 6301 	movw	r3, #1537	@ 0x601
 8005400:	07b2      	lsls	r2, r6, #30
 8005402:	bf48      	it	mi
 8005404:	f045 0502 	orrmi.w	r5, r5, #2
 8005408:	421e      	tst	r6, r3
 800540a:	bf18      	it	ne
 800540c:	f045 0504 	orrne.w	r5, r5, #4
 8005410:	0733      	lsls	r3, r6, #28
 8005412:	bf48      	it	mi
 8005414:	f025 0504 	bicmi.w	r5, r5, #4
 8005418:	4650      	mov	r0, sl
 800541a:	bf48      	it	mi
 800541c:	f045 0508 	orrmi.w	r5, r5, #8
 8005420:	f8cd a000 	str.w	sl, [sp]
 8005424:	f7fa fee4 	bl	80001f0 <strlen>
 8005428:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800542c:	2501      	movs	r5, #1
 800542e:	4628      	mov	r0, r5
 8005430:	4649      	mov	r1, r9
 8005432:	beab      	bkpt	0x00ab
 8005434:	4605      	mov	r5, r0
 8005436:	2d00      	cmp	r5, #0
 8005438:	db05      	blt.n	8005446 <_swiopen+0xa2>
 800543a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800543e:	4447      	add	r7, r8
 8005440:	2300      	movs	r3, #0
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	e7c4      	b.n	80053d0 <_swiopen+0x2c>
 8005446:	4628      	mov	r0, r5
 8005448:	f7ff fe86 	bl	8005158 <error>
 800544c:	4604      	mov	r4, r0
 800544e:	e7bf      	b.n	80053d0 <_swiopen+0x2c>
 8005450:	20025a54 	.word	0x20025a54

08005454 <_get_semihosting_exts>:
 8005454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005458:	4606      	mov	r6, r0
 800545a:	460f      	mov	r7, r1
 800545c:	4829      	ldr	r0, [pc, #164]	@ (8005504 <_get_semihosting_exts+0xb0>)
 800545e:	2100      	movs	r1, #0
 8005460:	4615      	mov	r5, r2
 8005462:	f7ff ff9f 	bl	80053a4 <_swiopen>
 8005466:	462a      	mov	r2, r5
 8005468:	4604      	mov	r4, r0
 800546a:	2100      	movs	r1, #0
 800546c:	4630      	mov	r0, r6
 800546e:	f000 fa21 	bl	80058b4 <memset>
 8005472:	1c63      	adds	r3, r4, #1
 8005474:	d014      	beq.n	80054a0 <_get_semihosting_exts+0x4c>
 8005476:	4620      	mov	r0, r4
 8005478:	f7ff fe54 	bl	8005124 <findslot>
 800547c:	f04f 080c 	mov.w	r8, #12
 8005480:	4681      	mov	r9, r0
 8005482:	4640      	mov	r0, r8
 8005484:	4649      	mov	r1, r9
 8005486:	beab      	bkpt	0x00ab
 8005488:	4680      	mov	r8, r0
 800548a:	4640      	mov	r0, r8
 800548c:	f7ff fe72 	bl	8005174 <checkerror>
 8005490:	2803      	cmp	r0, #3
 8005492:	dd02      	ble.n	800549a <_get_semihosting_exts+0x46>
 8005494:	1ec3      	subs	r3, r0, #3
 8005496:	42ab      	cmp	r3, r5
 8005498:	dc07      	bgt.n	80054aa <_get_semihosting_exts+0x56>
 800549a:	4620      	mov	r0, r4
 800549c:	f7ff ff14 	bl	80052c8 <_close>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054a4:	b003      	add	sp, #12
 80054a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054aa:	2204      	movs	r2, #4
 80054ac:	eb0d 0102 	add.w	r1, sp, r2
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff fe74 	bl	800519e <_read>
 80054b6:	2803      	cmp	r0, #3
 80054b8:	ddef      	ble.n	800549a <_get_semihosting_exts+0x46>
 80054ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054be:	2b53      	cmp	r3, #83	@ 0x53
 80054c0:	d1eb      	bne.n	800549a <_get_semihosting_exts+0x46>
 80054c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80054c6:	2b48      	cmp	r3, #72	@ 0x48
 80054c8:	d1e7      	bne.n	800549a <_get_semihosting_exts+0x46>
 80054ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80054ce:	2b46      	cmp	r3, #70	@ 0x46
 80054d0:	d1e3      	bne.n	800549a <_get_semihosting_exts+0x46>
 80054d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054d6:	2b42      	cmp	r3, #66	@ 0x42
 80054d8:	d1df      	bne.n	800549a <_get_semihosting_exts+0x46>
 80054da:	2201      	movs	r2, #1
 80054dc:	4639      	mov	r1, r7
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fe77 	bl	80051d2 <_swilseek>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	dbd8      	blt.n	800549a <_get_semihosting_exts+0x46>
 80054e8:	462a      	mov	r2, r5
 80054ea:	4631      	mov	r1, r6
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff fe56 	bl	800519e <_read>
 80054f2:	4605      	mov	r5, r0
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7ff fee7 	bl	80052c8 <_close>
 80054fa:	4628      	mov	r0, r5
 80054fc:	f7ff fe3a 	bl	8005174 <checkerror>
 8005500:	e7d0      	b.n	80054a4 <_get_semihosting_exts+0x50>
 8005502:	bf00      	nop
 8005504:	080077bc 	.word	0x080077bc

08005508 <initialise_semihosting_exts>:
 8005508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800550a:	4d0a      	ldr	r5, [pc, #40]	@ (8005534 <initialise_semihosting_exts+0x2c>)
 800550c:	4c0a      	ldr	r4, [pc, #40]	@ (8005538 <initialise_semihosting_exts+0x30>)
 800550e:	2100      	movs	r1, #0
 8005510:	2201      	movs	r2, #1
 8005512:	a801      	add	r0, sp, #4
 8005514:	6029      	str	r1, [r5, #0]
 8005516:	6022      	str	r2, [r4, #0]
 8005518:	f7ff ff9c 	bl	8005454 <_get_semihosting_exts>
 800551c:	2800      	cmp	r0, #0
 800551e:	dd07      	ble.n	8005530 <initialise_semihosting_exts+0x28>
 8005520:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005524:	f003 0201 	and.w	r2, r3, #1
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	b003      	add	sp, #12
 8005532:	bd30      	pop	{r4, r5, pc}
 8005534:	20000020 	.word	0x20000020
 8005538:	2000001c 	.word	0x2000001c

0800553c <_has_ext_stdout_stderr>:
 800553c:	b510      	push	{r4, lr}
 800553e:	4c04      	ldr	r4, [pc, #16]	@ (8005550 <_has_ext_stdout_stderr+0x14>)
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da01      	bge.n	800554a <_has_ext_stdout_stderr+0xe>
 8005546:	f7ff ffdf 	bl	8005508 <initialise_semihosting_exts>
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	bd10      	pop	{r4, pc}
 800554e:	bf00      	nop
 8005550:	2000001c 	.word	0x2000001c

08005554 <initialise_monitor_handles>:
 8005554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005558:	b085      	sub	sp, #20
 800555a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800560c <initialise_monitor_handles+0xb8>
 800555e:	f8cd 9004 	str.w	r9, [sp, #4]
 8005562:	2303      	movs	r3, #3
 8005564:	2400      	movs	r4, #0
 8005566:	9303      	str	r3, [sp, #12]
 8005568:	af01      	add	r7, sp, #4
 800556a:	9402      	str	r4, [sp, #8]
 800556c:	2501      	movs	r5, #1
 800556e:	4628      	mov	r0, r5
 8005570:	4639      	mov	r1, r7
 8005572:	beab      	bkpt	0x00ab
 8005574:	4605      	mov	r5, r0
 8005576:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005610 <initialise_monitor_handles+0xbc>
 800557a:	4623      	mov	r3, r4
 800557c:	4c20      	ldr	r4, [pc, #128]	@ (8005600 <initialise_monitor_handles+0xac>)
 800557e:	f8c8 5000 	str.w	r5, [r8]
 8005582:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005586:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800558a:	3301      	adds	r3, #1
 800558c:	2b14      	cmp	r3, #20
 800558e:	d1fa      	bne.n	8005586 <initialise_monitor_handles+0x32>
 8005590:	f7ff ffd4 	bl	800553c <_has_ext_stdout_stderr>
 8005594:	4d1b      	ldr	r5, [pc, #108]	@ (8005604 <initialise_monitor_handles+0xb0>)
 8005596:	b1d0      	cbz	r0, 80055ce <initialise_monitor_handles+0x7a>
 8005598:	f04f 0a03 	mov.w	sl, #3
 800559c:	2304      	movs	r3, #4
 800559e:	f8cd 9004 	str.w	r9, [sp, #4]
 80055a2:	2601      	movs	r6, #1
 80055a4:	f8cd a00c 	str.w	sl, [sp, #12]
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	4630      	mov	r0, r6
 80055ac:	4639      	mov	r1, r7
 80055ae:	beab      	bkpt	0x00ab
 80055b0:	4683      	mov	fp, r0
 80055b2:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <initialise_monitor_handles+0xb4>)
 80055b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80055b8:	f8c3 b000 	str.w	fp, [r3]
 80055bc:	2308      	movs	r3, #8
 80055be:	f8cd a00c 	str.w	sl, [sp, #12]
 80055c2:	9302      	str	r3, [sp, #8]
 80055c4:	4630      	mov	r0, r6
 80055c6:	4639      	mov	r1, r7
 80055c8:	beab      	bkpt	0x00ab
 80055ca:	4606      	mov	r6, r0
 80055cc:	602e      	str	r6, [r5, #0]
 80055ce:	682b      	ldr	r3, [r5, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	bf02      	ittt	eq
 80055d4:	4b0c      	ldreq	r3, [pc, #48]	@ (8005608 <initialise_monitor_handles+0xb4>)
 80055d6:	681b      	ldreq	r3, [r3, #0]
 80055d8:	602b      	streq	r3, [r5, #0]
 80055da:	2600      	movs	r6, #0
 80055dc:	f8d8 3000 	ldr.w	r3, [r8]
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	6066      	str	r6, [r4, #4]
 80055e4:	f7ff ffaa 	bl	800553c <_has_ext_stdout_stderr>
 80055e8:	b130      	cbz	r0, 80055f8 <initialise_monitor_handles+0xa4>
 80055ea:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <initialise_monitor_handles+0xb4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80055f8:	b005      	add	sp, #20
 80055fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fe:	bf00      	nop
 8005600:	20025a54 	.word	0x20025a54
 8005604:	20025a48 	.word	0x20025a48
 8005608:	20025a4c 	.word	0x20025a4c
 800560c:	080077d2 	.word	0x080077d2
 8005610:	20025a50 	.word	0x20025a50

08005614 <_isatty>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	f7ff fd85 	bl	8005124 <findslot>
 800561a:	2409      	movs	r4, #9
 800561c:	4605      	mov	r5, r0
 800561e:	b920      	cbnz	r0, 800562a <_isatty+0x16>
 8005620:	f000 f950 	bl	80058c4 <__errno>
 8005624:	6004      	str	r4, [r0, #0]
 8005626:	2000      	movs	r0, #0
 8005628:	bd70      	pop	{r4, r5, r6, pc}
 800562a:	4620      	mov	r0, r4
 800562c:	4629      	mov	r1, r5
 800562e:	beab      	bkpt	0x00ab
 8005630:	4604      	mov	r4, r0
 8005632:	2c01      	cmp	r4, #1
 8005634:	4620      	mov	r0, r4
 8005636:	d0f7      	beq.n	8005628 <_isatty+0x14>
 8005638:	f000 f944 	bl	80058c4 <__errno>
 800563c:	2513      	movs	r5, #19
 800563e:	4604      	mov	r4, r0
 8005640:	2600      	movs	r6, #0
 8005642:	4628      	mov	r0, r5
 8005644:	4631      	mov	r1, r6
 8005646:	beab      	bkpt	0x00ab
 8005648:	4605      	mov	r5, r0
 800564a:	6025      	str	r5, [r4, #0]
 800564c:	e7eb      	b.n	8005626 <_isatty+0x12>
	...

08005650 <std>:
 8005650:	2300      	movs	r3, #0
 8005652:	b510      	push	{r4, lr}
 8005654:	4604      	mov	r4, r0
 8005656:	e9c0 3300 	strd	r3, r3, [r0]
 800565a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565e:	6083      	str	r3, [r0, #8]
 8005660:	8181      	strh	r1, [r0, #12]
 8005662:	6643      	str	r3, [r0, #100]	@ 0x64
 8005664:	81c2      	strh	r2, [r0, #14]
 8005666:	6183      	str	r3, [r0, #24]
 8005668:	4619      	mov	r1, r3
 800566a:	2208      	movs	r2, #8
 800566c:	305c      	adds	r0, #92	@ 0x5c
 800566e:	f000 f921 	bl	80058b4 <memset>
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <std+0x58>)
 8005674:	6263      	str	r3, [r4, #36]	@ 0x24
 8005676:	4b0d      	ldr	r3, [pc, #52]	@ (80056ac <std+0x5c>)
 8005678:	62a3      	str	r3, [r4, #40]	@ 0x28
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x60>)
 800567c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x64>)
 8005680:	6323      	str	r3, [r4, #48]	@ 0x30
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <std+0x68>)
 8005684:	6224      	str	r4, [r4, #32]
 8005686:	429c      	cmp	r4, r3
 8005688:	d006      	beq.n	8005698 <std+0x48>
 800568a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800568e:	4294      	cmp	r4, r2
 8005690:	d002      	beq.n	8005698 <std+0x48>
 8005692:	33d0      	adds	r3, #208	@ 0xd0
 8005694:	429c      	cmp	r4, r3
 8005696:	d105      	bne.n	80056a4 <std+0x54>
 8005698:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800569c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a0:	f000 b93a 	b.w	8005918 <__retarget_lock_init_recursive>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	08006171 	.word	0x08006171
 80056ac:	08006193 	.word	0x08006193
 80056b0:	080061cb 	.word	0x080061cb
 80056b4:	080061ef 	.word	0x080061ef
 80056b8:	20025af4 	.word	0x20025af4

080056bc <stdio_exit_handler>:
 80056bc:	4a02      	ldr	r2, [pc, #8]	@ (80056c8 <stdio_exit_handler+0xc>)
 80056be:	4903      	ldr	r1, [pc, #12]	@ (80056cc <stdio_exit_handler+0x10>)
 80056c0:	4803      	ldr	r0, [pc, #12]	@ (80056d0 <stdio_exit_handler+0x14>)
 80056c2:	f000 b869 	b.w	8005798 <_fwalk_sglue>
 80056c6:	bf00      	nop
 80056c8:	20000024 	.word	0x20000024
 80056cc:	08006109 	.word	0x08006109
 80056d0:	20000034 	.word	0x20000034

080056d4 <cleanup_stdio>:
 80056d4:	6841      	ldr	r1, [r0, #4]
 80056d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <cleanup_stdio+0x34>)
 80056d8:	4299      	cmp	r1, r3
 80056da:	b510      	push	{r4, lr}
 80056dc:	4604      	mov	r4, r0
 80056de:	d001      	beq.n	80056e4 <cleanup_stdio+0x10>
 80056e0:	f000 fd12 	bl	8006108 <_fflush_r>
 80056e4:	68a1      	ldr	r1, [r4, #8]
 80056e6:	4b09      	ldr	r3, [pc, #36]	@ (800570c <cleanup_stdio+0x38>)
 80056e8:	4299      	cmp	r1, r3
 80056ea:	d002      	beq.n	80056f2 <cleanup_stdio+0x1e>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fd0b 	bl	8006108 <_fflush_r>
 80056f2:	68e1      	ldr	r1, [r4, #12]
 80056f4:	4b06      	ldr	r3, [pc, #24]	@ (8005710 <cleanup_stdio+0x3c>)
 80056f6:	4299      	cmp	r1, r3
 80056f8:	d004      	beq.n	8005704 <cleanup_stdio+0x30>
 80056fa:	4620      	mov	r0, r4
 80056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005700:	f000 bd02 	b.w	8006108 <_fflush_r>
 8005704:	bd10      	pop	{r4, pc}
 8005706:	bf00      	nop
 8005708:	20025af4 	.word	0x20025af4
 800570c:	20025b5c 	.word	0x20025b5c
 8005710:	20025bc4 	.word	0x20025bc4

08005714 <global_stdio_init.part.0>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <global_stdio_init.part.0+0x30>)
 8005718:	4c0b      	ldr	r4, [pc, #44]	@ (8005748 <global_stdio_init.part.0+0x34>)
 800571a:	4a0c      	ldr	r2, [pc, #48]	@ (800574c <global_stdio_init.part.0+0x38>)
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	4620      	mov	r0, r4
 8005720:	2200      	movs	r2, #0
 8005722:	2104      	movs	r1, #4
 8005724:	f7ff ff94 	bl	8005650 <std>
 8005728:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800572c:	2201      	movs	r2, #1
 800572e:	2109      	movs	r1, #9
 8005730:	f7ff ff8e 	bl	8005650 <std>
 8005734:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005738:	2202      	movs	r2, #2
 800573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573e:	2112      	movs	r1, #18
 8005740:	f7ff bf86 	b.w	8005650 <std>
 8005744:	20025c2c 	.word	0x20025c2c
 8005748:	20025af4 	.word	0x20025af4
 800574c:	080056bd 	.word	0x080056bd

08005750 <__sfp_lock_acquire>:
 8005750:	4801      	ldr	r0, [pc, #4]	@ (8005758 <__sfp_lock_acquire+0x8>)
 8005752:	f000 b8e2 	b.w	800591a <__retarget_lock_acquire_recursive>
 8005756:	bf00      	nop
 8005758:	20025c31 	.word	0x20025c31

0800575c <__sfp_lock_release>:
 800575c:	4801      	ldr	r0, [pc, #4]	@ (8005764 <__sfp_lock_release+0x8>)
 800575e:	f000 b8dd 	b.w	800591c <__retarget_lock_release_recursive>
 8005762:	bf00      	nop
 8005764:	20025c31 	.word	0x20025c31

08005768 <__sinit>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4604      	mov	r4, r0
 800576c:	f7ff fff0 	bl	8005750 <__sfp_lock_acquire>
 8005770:	6a23      	ldr	r3, [r4, #32]
 8005772:	b11b      	cbz	r3, 800577c <__sinit+0x14>
 8005774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005778:	f7ff bff0 	b.w	800575c <__sfp_lock_release>
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <__sinit+0x28>)
 800577e:	6223      	str	r3, [r4, #32]
 8005780:	4b04      	ldr	r3, [pc, #16]	@ (8005794 <__sinit+0x2c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f5      	bne.n	8005774 <__sinit+0xc>
 8005788:	f7ff ffc4 	bl	8005714 <global_stdio_init.part.0>
 800578c:	e7f2      	b.n	8005774 <__sinit+0xc>
 800578e:	bf00      	nop
 8005790:	080056d5 	.word	0x080056d5
 8005794:	20025c2c 	.word	0x20025c2c

08005798 <_fwalk_sglue>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	4607      	mov	r7, r0
 800579e:	4688      	mov	r8, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	2600      	movs	r6, #0
 80057a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a8:	f1b9 0901 	subs.w	r9, r9, #1
 80057ac:	d505      	bpl.n	80057ba <_fwalk_sglue+0x22>
 80057ae:	6824      	ldr	r4, [r4, #0]
 80057b0:	2c00      	cmp	r4, #0
 80057b2:	d1f7      	bne.n	80057a4 <_fwalk_sglue+0xc>
 80057b4:	4630      	mov	r0, r6
 80057b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d907      	bls.n	80057d0 <_fwalk_sglue+0x38>
 80057c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c4:	3301      	adds	r3, #1
 80057c6:	d003      	beq.n	80057d0 <_fwalk_sglue+0x38>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	4306      	orrs	r6, r0
 80057d0:	3568      	adds	r5, #104	@ 0x68
 80057d2:	e7e9      	b.n	80057a8 <_fwalk_sglue+0x10>

080057d4 <iprintf>:
 80057d4:	b40f      	push	{r0, r1, r2, r3}
 80057d6:	b507      	push	{r0, r1, r2, lr}
 80057d8:	4906      	ldr	r1, [pc, #24]	@ (80057f4 <iprintf+0x20>)
 80057da:	ab04      	add	r3, sp, #16
 80057dc:	6808      	ldr	r0, [r1, #0]
 80057de:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e2:	6881      	ldr	r1, [r0, #8]
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f000 f8c3 	bl	8005970 <_vfiprintf_r>
 80057ea:	b003      	add	sp, #12
 80057ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f0:	b004      	add	sp, #16
 80057f2:	4770      	bx	lr
 80057f4:	20000030 	.word	0x20000030

080057f8 <_puts_r>:
 80057f8:	6a03      	ldr	r3, [r0, #32]
 80057fa:	b570      	push	{r4, r5, r6, lr}
 80057fc:	6884      	ldr	r4, [r0, #8]
 80057fe:	4605      	mov	r5, r0
 8005800:	460e      	mov	r6, r1
 8005802:	b90b      	cbnz	r3, 8005808 <_puts_r+0x10>
 8005804:	f7ff ffb0 	bl	8005768 <__sinit>
 8005808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d405      	bmi.n	800581a <_puts_r+0x22>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	0598      	lsls	r0, r3, #22
 8005812:	d402      	bmi.n	800581a <_puts_r+0x22>
 8005814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005816:	f000 f880 	bl	800591a <__retarget_lock_acquire_recursive>
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	0719      	lsls	r1, r3, #28
 800581e:	d502      	bpl.n	8005826 <_puts_r+0x2e>
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d135      	bne.n	8005892 <_puts_r+0x9a>
 8005826:	4621      	mov	r1, r4
 8005828:	4628      	mov	r0, r5
 800582a:	f000 fd23 	bl	8006274 <__swsetup_r>
 800582e:	b380      	cbz	r0, 8005892 <_puts_r+0x9a>
 8005830:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005836:	07da      	lsls	r2, r3, #31
 8005838:	d405      	bmi.n	8005846 <_puts_r+0x4e>
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	059b      	lsls	r3, r3, #22
 800583e:	d402      	bmi.n	8005846 <_puts_r+0x4e>
 8005840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005842:	f000 f86b 	bl	800591c <__retarget_lock_release_recursive>
 8005846:	4628      	mov	r0, r5
 8005848:	bd70      	pop	{r4, r5, r6, pc}
 800584a:	2b00      	cmp	r3, #0
 800584c:	da04      	bge.n	8005858 <_puts_r+0x60>
 800584e:	69a2      	ldr	r2, [r4, #24]
 8005850:	429a      	cmp	r2, r3
 8005852:	dc17      	bgt.n	8005884 <_puts_r+0x8c>
 8005854:	290a      	cmp	r1, #10
 8005856:	d015      	beq.n	8005884 <_puts_r+0x8c>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	6022      	str	r2, [r4, #0]
 800585e:	7019      	strb	r1, [r3, #0]
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005866:	3b01      	subs	r3, #1
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	2900      	cmp	r1, #0
 800586c:	d1ed      	bne.n	800584a <_puts_r+0x52>
 800586e:	2b00      	cmp	r3, #0
 8005870:	da11      	bge.n	8005896 <_puts_r+0x9e>
 8005872:	4622      	mov	r2, r4
 8005874:	210a      	movs	r1, #10
 8005876:	4628      	mov	r0, r5
 8005878:	f000 fcbd 	bl	80061f6 <__swbuf_r>
 800587c:	3001      	adds	r0, #1
 800587e:	d0d7      	beq.n	8005830 <_puts_r+0x38>
 8005880:	250a      	movs	r5, #10
 8005882:	e7d7      	b.n	8005834 <_puts_r+0x3c>
 8005884:	4622      	mov	r2, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f000 fcb5 	bl	80061f6 <__swbuf_r>
 800588c:	3001      	adds	r0, #1
 800588e:	d1e7      	bne.n	8005860 <_puts_r+0x68>
 8005890:	e7ce      	b.n	8005830 <_puts_r+0x38>
 8005892:	3e01      	subs	r6, #1
 8005894:	e7e4      	b.n	8005860 <_puts_r+0x68>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	220a      	movs	r2, #10
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e7ee      	b.n	8005880 <_puts_r+0x88>
	...

080058a4 <puts>:
 80058a4:	4b02      	ldr	r3, [pc, #8]	@ (80058b0 <puts+0xc>)
 80058a6:	4601      	mov	r1, r0
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	f7ff bfa5 	b.w	80057f8 <_puts_r>
 80058ae:	bf00      	nop
 80058b0:	20000030 	.word	0x20000030

080058b4 <memset>:
 80058b4:	4402      	add	r2, r0
 80058b6:	4603      	mov	r3, r0
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d100      	bne.n	80058be <memset+0xa>
 80058bc:	4770      	bx	lr
 80058be:	f803 1b01 	strb.w	r1, [r3], #1
 80058c2:	e7f9      	b.n	80058b8 <memset+0x4>

080058c4 <__errno>:
 80058c4:	4b01      	ldr	r3, [pc, #4]	@ (80058cc <__errno+0x8>)
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000030 	.word	0x20000030

080058d0 <__libc_init_array>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005908 <__libc_init_array+0x38>)
 80058d4:	4c0d      	ldr	r4, [pc, #52]	@ (800590c <__libc_init_array+0x3c>)
 80058d6:	1b64      	subs	r4, r4, r5
 80058d8:	10a4      	asrs	r4, r4, #2
 80058da:	2600      	movs	r6, #0
 80058dc:	42a6      	cmp	r6, r4
 80058de:	d109      	bne.n	80058f4 <__libc_init_array+0x24>
 80058e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005910 <__libc_init_array+0x40>)
 80058e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005914 <__libc_init_array+0x44>)
 80058e4:	f000 fe40 	bl	8006568 <_init>
 80058e8:	1b64      	subs	r4, r4, r5
 80058ea:	10a4      	asrs	r4, r4, #2
 80058ec:	2600      	movs	r6, #0
 80058ee:	42a6      	cmp	r6, r4
 80058f0:	d105      	bne.n	80058fe <__libc_init_array+0x2e>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f8:	4798      	blx	r3
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7ee      	b.n	80058dc <__libc_init_array+0xc>
 80058fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005902:	4798      	blx	r3
 8005904:	3601      	adds	r6, #1
 8005906:	e7f2      	b.n	80058ee <__libc_init_array+0x1e>
 8005908:	08007814 	.word	0x08007814
 800590c:	08007814 	.word	0x08007814
 8005910:	08007814 	.word	0x08007814
 8005914:	08007818 	.word	0x08007818

08005918 <__retarget_lock_init_recursive>:
 8005918:	4770      	bx	lr

0800591a <__retarget_lock_acquire_recursive>:
 800591a:	4770      	bx	lr

0800591c <__retarget_lock_release_recursive>:
 800591c:	4770      	bx	lr

0800591e <__sfputc_r>:
 800591e:	6893      	ldr	r3, [r2, #8]
 8005920:	3b01      	subs	r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	b410      	push	{r4}
 8005926:	6093      	str	r3, [r2, #8]
 8005928:	da08      	bge.n	800593c <__sfputc_r+0x1e>
 800592a:	6994      	ldr	r4, [r2, #24]
 800592c:	42a3      	cmp	r3, r4
 800592e:	db01      	blt.n	8005934 <__sfputc_r+0x16>
 8005930:	290a      	cmp	r1, #10
 8005932:	d103      	bne.n	800593c <__sfputc_r+0x1e>
 8005934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005938:	f000 bc5d 	b.w	80061f6 <__swbuf_r>
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	1c58      	adds	r0, r3, #1
 8005940:	6010      	str	r0, [r2, #0]
 8005942:	7019      	strb	r1, [r3, #0]
 8005944:	4608      	mov	r0, r1
 8005946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800594a:	4770      	bx	lr

0800594c <__sfputs_r>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	4614      	mov	r4, r2
 8005954:	18d5      	adds	r5, r2, r3
 8005956:	42ac      	cmp	r4, r5
 8005958:	d101      	bne.n	800595e <__sfputs_r+0x12>
 800595a:	2000      	movs	r0, #0
 800595c:	e007      	b.n	800596e <__sfputs_r+0x22>
 800595e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005962:	463a      	mov	r2, r7
 8005964:	4630      	mov	r0, r6
 8005966:	f7ff ffda 	bl	800591e <__sfputc_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d1f3      	bne.n	8005956 <__sfputs_r+0xa>
 800596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005970 <_vfiprintf_r>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	460d      	mov	r5, r1
 8005976:	b09d      	sub	sp, #116	@ 0x74
 8005978:	4614      	mov	r4, r2
 800597a:	4698      	mov	r8, r3
 800597c:	4606      	mov	r6, r0
 800597e:	b118      	cbz	r0, 8005988 <_vfiprintf_r+0x18>
 8005980:	6a03      	ldr	r3, [r0, #32]
 8005982:	b90b      	cbnz	r3, 8005988 <_vfiprintf_r+0x18>
 8005984:	f7ff fef0 	bl	8005768 <__sinit>
 8005988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800598a:	07d9      	lsls	r1, r3, #31
 800598c:	d405      	bmi.n	800599a <_vfiprintf_r+0x2a>
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	059a      	lsls	r2, r3, #22
 8005992:	d402      	bmi.n	800599a <_vfiprintf_r+0x2a>
 8005994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005996:	f7ff ffc0 	bl	800591a <__retarget_lock_acquire_recursive>
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	071b      	lsls	r3, r3, #28
 800599e:	d501      	bpl.n	80059a4 <_vfiprintf_r+0x34>
 80059a0:	692b      	ldr	r3, [r5, #16]
 80059a2:	b99b      	cbnz	r3, 80059cc <_vfiprintf_r+0x5c>
 80059a4:	4629      	mov	r1, r5
 80059a6:	4630      	mov	r0, r6
 80059a8:	f000 fc64 	bl	8006274 <__swsetup_r>
 80059ac:	b170      	cbz	r0, 80059cc <_vfiprintf_r+0x5c>
 80059ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059b0:	07dc      	lsls	r4, r3, #31
 80059b2:	d504      	bpl.n	80059be <_vfiprintf_r+0x4e>
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059b8:	b01d      	add	sp, #116	@ 0x74
 80059ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059be:	89ab      	ldrh	r3, [r5, #12]
 80059c0:	0598      	lsls	r0, r3, #22
 80059c2:	d4f7      	bmi.n	80059b4 <_vfiprintf_r+0x44>
 80059c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059c6:	f7ff ffa9 	bl	800591c <__retarget_lock_release_recursive>
 80059ca:	e7f3      	b.n	80059b4 <_vfiprintf_r+0x44>
 80059cc:	2300      	movs	r3, #0
 80059ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d0:	2320      	movs	r3, #32
 80059d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059da:	2330      	movs	r3, #48	@ 0x30
 80059dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b8c <_vfiprintf_r+0x21c>
 80059e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059e4:	f04f 0901 	mov.w	r9, #1
 80059e8:	4623      	mov	r3, r4
 80059ea:	469a      	mov	sl, r3
 80059ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f0:	b10a      	cbz	r2, 80059f6 <_vfiprintf_r+0x86>
 80059f2:	2a25      	cmp	r2, #37	@ 0x25
 80059f4:	d1f9      	bne.n	80059ea <_vfiprintf_r+0x7a>
 80059f6:	ebba 0b04 	subs.w	fp, sl, r4
 80059fa:	d00b      	beq.n	8005a14 <_vfiprintf_r+0xa4>
 80059fc:	465b      	mov	r3, fp
 80059fe:	4622      	mov	r2, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7ff ffa2 	bl	800594c <__sfputs_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f000 80a7 	beq.w	8005b5c <_vfiprintf_r+0x1ec>
 8005a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a10:	445a      	add	r2, fp
 8005a12:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a14:	f89a 3000 	ldrb.w	r3, [sl]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 809f 	beq.w	8005b5c <_vfiprintf_r+0x1ec>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a28:	f10a 0a01 	add.w	sl, sl, #1
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	9307      	str	r3, [sp, #28]
 8005a30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a34:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a36:	4654      	mov	r4, sl
 8005a38:	2205      	movs	r2, #5
 8005a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3e:	4853      	ldr	r0, [pc, #332]	@ (8005b8c <_vfiprintf_r+0x21c>)
 8005a40:	f7fa fbde 	bl	8000200 <memchr>
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	b9d8      	cbnz	r0, 8005a80 <_vfiprintf_r+0x110>
 8005a48:	06d1      	lsls	r1, r2, #27
 8005a4a:	bf44      	itt	mi
 8005a4c:	2320      	movmi	r3, #32
 8005a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a52:	0713      	lsls	r3, r2, #28
 8005a54:	bf44      	itt	mi
 8005a56:	232b      	movmi	r3, #43	@ 0x2b
 8005a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a62:	d015      	beq.n	8005a90 <_vfiprintf_r+0x120>
 8005a64:	9a07      	ldr	r2, [sp, #28]
 8005a66:	4654      	mov	r4, sl
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f04f 0c0a 	mov.w	ip, #10
 8005a6e:	4621      	mov	r1, r4
 8005a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a74:	3b30      	subs	r3, #48	@ 0x30
 8005a76:	2b09      	cmp	r3, #9
 8005a78:	d94b      	bls.n	8005b12 <_vfiprintf_r+0x1a2>
 8005a7a:	b1b0      	cbz	r0, 8005aaa <_vfiprintf_r+0x13a>
 8005a7c:	9207      	str	r2, [sp, #28]
 8005a7e:	e014      	b.n	8005aaa <_vfiprintf_r+0x13a>
 8005a80:	eba0 0308 	sub.w	r3, r0, r8
 8005a84:	fa09 f303 	lsl.w	r3, r9, r3
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	9304      	str	r3, [sp, #16]
 8005a8c:	46a2      	mov	sl, r4
 8005a8e:	e7d2      	b.n	8005a36 <_vfiprintf_r+0xc6>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	1d19      	adds	r1, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9103      	str	r1, [sp, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfbb      	ittet	lt
 8005a9c:	425b      	neglt	r3, r3
 8005a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa2:	9307      	strge	r3, [sp, #28]
 8005aa4:	9307      	strlt	r3, [sp, #28]
 8005aa6:	bfb8      	it	lt
 8005aa8:	9204      	strlt	r2, [sp, #16]
 8005aaa:	7823      	ldrb	r3, [r4, #0]
 8005aac:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aae:	d10a      	bne.n	8005ac6 <_vfiprintf_r+0x156>
 8005ab0:	7863      	ldrb	r3, [r4, #1]
 8005ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab4:	d132      	bne.n	8005b1c <_vfiprintf_r+0x1ac>
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	9203      	str	r2, [sp, #12]
 8005abe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ac2:	3402      	adds	r4, #2
 8005ac4:	9305      	str	r3, [sp, #20]
 8005ac6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b9c <_vfiprintf_r+0x22c>
 8005aca:	7821      	ldrb	r1, [r4, #0]
 8005acc:	2203      	movs	r2, #3
 8005ace:	4650      	mov	r0, sl
 8005ad0:	f7fa fb96 	bl	8000200 <memchr>
 8005ad4:	b138      	cbz	r0, 8005ae6 <_vfiprintf_r+0x176>
 8005ad6:	9b04      	ldr	r3, [sp, #16]
 8005ad8:	eba0 000a 	sub.w	r0, r0, sl
 8005adc:	2240      	movs	r2, #64	@ 0x40
 8005ade:	4082      	lsls	r2, r0
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	3401      	adds	r4, #1
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aea:	4829      	ldr	r0, [pc, #164]	@ (8005b90 <_vfiprintf_r+0x220>)
 8005aec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005af0:	2206      	movs	r2, #6
 8005af2:	f7fa fb85 	bl	8000200 <memchr>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d03f      	beq.n	8005b7a <_vfiprintf_r+0x20a>
 8005afa:	4b26      	ldr	r3, [pc, #152]	@ (8005b94 <_vfiprintf_r+0x224>)
 8005afc:	bb1b      	cbnz	r3, 8005b46 <_vfiprintf_r+0x1d6>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	3307      	adds	r3, #7
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	3308      	adds	r3, #8
 8005b08:	9303      	str	r3, [sp, #12]
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	443b      	add	r3, r7
 8005b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b10:	e76a      	b.n	80059e8 <_vfiprintf_r+0x78>
 8005b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b16:	460c      	mov	r4, r1
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e7a8      	b.n	8005a6e <_vfiprintf_r+0xfe>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	3401      	adds	r4, #1
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	4619      	mov	r1, r3
 8005b24:	f04f 0c0a 	mov.w	ip, #10
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b2e:	3a30      	subs	r2, #48	@ 0x30
 8005b30:	2a09      	cmp	r2, #9
 8005b32:	d903      	bls.n	8005b3c <_vfiprintf_r+0x1cc>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0c6      	beq.n	8005ac6 <_vfiprintf_r+0x156>
 8005b38:	9105      	str	r1, [sp, #20]
 8005b3a:	e7c4      	b.n	8005ac6 <_vfiprintf_r+0x156>
 8005b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b40:	4604      	mov	r4, r0
 8005b42:	2301      	movs	r3, #1
 8005b44:	e7f0      	b.n	8005b28 <_vfiprintf_r+0x1b8>
 8005b46:	ab03      	add	r3, sp, #12
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	4b12      	ldr	r3, [pc, #72]	@ (8005b98 <_vfiprintf_r+0x228>)
 8005b4e:	a904      	add	r1, sp, #16
 8005b50:	4630      	mov	r0, r6
 8005b52:	f3af 8000 	nop.w
 8005b56:	4607      	mov	r7, r0
 8005b58:	1c78      	adds	r0, r7, #1
 8005b5a:	d1d6      	bne.n	8005b0a <_vfiprintf_r+0x19a>
 8005b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b5e:	07d9      	lsls	r1, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_vfiprintf_r+0x1fe>
 8005b62:	89ab      	ldrh	r3, [r5, #12]
 8005b64:	059a      	lsls	r2, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_vfiprintf_r+0x1fe>
 8005b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b6a:	f7ff fed7 	bl	800591c <__retarget_lock_release_recursive>
 8005b6e:	89ab      	ldrh	r3, [r5, #12]
 8005b70:	065b      	lsls	r3, r3, #25
 8005b72:	f53f af1f 	bmi.w	80059b4 <_vfiprintf_r+0x44>
 8005b76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b78:	e71e      	b.n	80059b8 <_vfiprintf_r+0x48>
 8005b7a:	ab03      	add	r3, sp, #12
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	462a      	mov	r2, r5
 8005b80:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <_vfiprintf_r+0x228>)
 8005b82:	a904      	add	r1, sp, #16
 8005b84:	4630      	mov	r0, r6
 8005b86:	f000 f91b 	bl	8005dc0 <_printf_i>
 8005b8a:	e7e4      	b.n	8005b56 <_vfiprintf_r+0x1e6>
 8005b8c:	080077d6 	.word	0x080077d6
 8005b90:	080077e0 	.word	0x080077e0
 8005b94:	00000000 	.word	0x00000000
 8005b98:	0800594d 	.word	0x0800594d
 8005b9c:	080077dc 	.word	0x080077dc

08005ba0 <sbrk_aligned>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8005be0 <sbrk_aligned+0x40>)
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	6831      	ldr	r1, [r6, #0]
 8005ba8:	4605      	mov	r5, r0
 8005baa:	b911      	cbnz	r1, 8005bb2 <sbrk_aligned+0x12>
 8005bac:	f000 fc70 	bl	8006490 <_sbrk_r>
 8005bb0:	6030      	str	r0, [r6, #0]
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 fc6b 	bl	8006490 <_sbrk_r>
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	d103      	bne.n	8005bc6 <sbrk_aligned+0x26>
 8005bbe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	bd70      	pop	{r4, r5, r6, pc}
 8005bc6:	1cc4      	adds	r4, r0, #3
 8005bc8:	f024 0403 	bic.w	r4, r4, #3
 8005bcc:	42a0      	cmp	r0, r4
 8005bce:	d0f8      	beq.n	8005bc2 <sbrk_aligned+0x22>
 8005bd0:	1a21      	subs	r1, r4, r0
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 fc5c 	bl	8006490 <_sbrk_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d1f2      	bne.n	8005bc2 <sbrk_aligned+0x22>
 8005bdc:	e7ef      	b.n	8005bbe <sbrk_aligned+0x1e>
 8005bde:	bf00      	nop
 8005be0:	20025c34 	.word	0x20025c34

08005be4 <_malloc_r>:
 8005be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be8:	1ccd      	adds	r5, r1, #3
 8005bea:	f025 0503 	bic.w	r5, r5, #3
 8005bee:	3508      	adds	r5, #8
 8005bf0:	2d0c      	cmp	r5, #12
 8005bf2:	bf38      	it	cc
 8005bf4:	250c      	movcc	r5, #12
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	db01      	blt.n	8005c00 <_malloc_r+0x1c>
 8005bfc:	42a9      	cmp	r1, r5
 8005bfe:	d904      	bls.n	8005c0a <_malloc_r+0x26>
 8005c00:	230c      	movs	r3, #12
 8005c02:	6033      	str	r3, [r6, #0]
 8005c04:	2000      	movs	r0, #0
 8005c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ce0 <_malloc_r+0xfc>
 8005c0e:	f000 faa3 	bl	8006158 <__malloc_lock>
 8005c12:	f8d8 3000 	ldr.w	r3, [r8]
 8005c16:	461c      	mov	r4, r3
 8005c18:	bb44      	cbnz	r4, 8005c6c <_malloc_r+0x88>
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7ff ffbf 	bl	8005ba0 <sbrk_aligned>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	4604      	mov	r4, r0
 8005c26:	d158      	bne.n	8005cda <_malloc_r+0xf6>
 8005c28:	f8d8 4000 	ldr.w	r4, [r8]
 8005c2c:	4627      	mov	r7, r4
 8005c2e:	2f00      	cmp	r7, #0
 8005c30:	d143      	bne.n	8005cba <_malloc_r+0xd6>
 8005c32:	2c00      	cmp	r4, #0
 8005c34:	d04b      	beq.n	8005cce <_malloc_r+0xea>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	eb04 0903 	add.w	r9, r4, r3
 8005c40:	f000 fc26 	bl	8006490 <_sbrk_r>
 8005c44:	4581      	cmp	r9, r0
 8005c46:	d142      	bne.n	8005cce <_malloc_r+0xea>
 8005c48:	6821      	ldr	r1, [r4, #0]
 8005c4a:	1a6d      	subs	r5, r5, r1
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ffa6 	bl	8005ba0 <sbrk_aligned>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d03a      	beq.n	8005cce <_malloc_r+0xea>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	442b      	add	r3, r5
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	bb62      	cbnz	r2, 8005cc0 <_malloc_r+0xdc>
 8005c66:	f8c8 7000 	str.w	r7, [r8]
 8005c6a:	e00f      	b.n	8005c8c <_malloc_r+0xa8>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	1b52      	subs	r2, r2, r5
 8005c70:	d420      	bmi.n	8005cb4 <_malloc_r+0xd0>
 8005c72:	2a0b      	cmp	r2, #11
 8005c74:	d917      	bls.n	8005ca6 <_malloc_r+0xc2>
 8005c76:	1961      	adds	r1, r4, r5
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	6025      	str	r5, [r4, #0]
 8005c7c:	bf18      	it	ne
 8005c7e:	6059      	strne	r1, [r3, #4]
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	bf08      	it	eq
 8005c84:	f8c8 1000 	streq.w	r1, [r8]
 8005c88:	5162      	str	r2, [r4, r5]
 8005c8a:	604b      	str	r3, [r1, #4]
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 fa69 	bl	8006164 <__malloc_unlock>
 8005c92:	f104 000b 	add.w	r0, r4, #11
 8005c96:	1d23      	adds	r3, r4, #4
 8005c98:	f020 0007 	bic.w	r0, r0, #7
 8005c9c:	1ac2      	subs	r2, r0, r3
 8005c9e:	bf1c      	itt	ne
 8005ca0:	1a1b      	subne	r3, r3, r0
 8005ca2:	50a3      	strne	r3, [r4, r2]
 8005ca4:	e7af      	b.n	8005c06 <_malloc_r+0x22>
 8005ca6:	6862      	ldr	r2, [r4, #4]
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	bf0c      	ite	eq
 8005cac:	f8c8 2000 	streq.w	r2, [r8]
 8005cb0:	605a      	strne	r2, [r3, #4]
 8005cb2:	e7eb      	b.n	8005c8c <_malloc_r+0xa8>
 8005cb4:	4623      	mov	r3, r4
 8005cb6:	6864      	ldr	r4, [r4, #4]
 8005cb8:	e7ae      	b.n	8005c18 <_malloc_r+0x34>
 8005cba:	463c      	mov	r4, r7
 8005cbc:	687f      	ldr	r7, [r7, #4]
 8005cbe:	e7b6      	b.n	8005c2e <_malloc_r+0x4a>
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d1fb      	bne.n	8005cc0 <_malloc_r+0xdc>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6053      	str	r3, [r2, #4]
 8005ccc:	e7de      	b.n	8005c8c <_malloc_r+0xa8>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	6033      	str	r3, [r6, #0]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f000 fa46 	bl	8006164 <__malloc_unlock>
 8005cd8:	e794      	b.n	8005c04 <_malloc_r+0x20>
 8005cda:	6005      	str	r5, [r0, #0]
 8005cdc:	e7d6      	b.n	8005c8c <_malloc_r+0xa8>
 8005cde:	bf00      	nop
 8005ce0:	20025c38 	.word	0x20025c38

08005ce4 <_printf_common>:
 8005ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	4616      	mov	r6, r2
 8005cea:	4698      	mov	r8, r3
 8005cec:	688a      	ldr	r2, [r1, #8]
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bfb8      	it	lt
 8005cf8:	4613      	movlt	r3, r2
 8005cfa:	6033      	str	r3, [r6, #0]
 8005cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d00:	4607      	mov	r7, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	b10a      	cbz	r2, 8005d0a <_printf_common+0x26>
 8005d06:	3301      	adds	r3, #1
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	0699      	lsls	r1, r3, #26
 8005d0e:	bf42      	ittt	mi
 8005d10:	6833      	ldrmi	r3, [r6, #0]
 8005d12:	3302      	addmi	r3, #2
 8005d14:	6033      	strmi	r3, [r6, #0]
 8005d16:	6825      	ldr	r5, [r4, #0]
 8005d18:	f015 0506 	ands.w	r5, r5, #6
 8005d1c:	d106      	bne.n	8005d2c <_printf_common+0x48>
 8005d1e:	f104 0a19 	add.w	sl, r4, #25
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	6832      	ldr	r2, [r6, #0]
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	dc26      	bgt.n	8005d7a <_printf_common+0x96>
 8005d2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	3b00      	subs	r3, #0
 8005d34:	bf18      	it	ne
 8005d36:	2301      	movne	r3, #1
 8005d38:	0692      	lsls	r2, r2, #26
 8005d3a:	d42b      	bmi.n	8005d94 <_printf_common+0xb0>
 8005d3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d40:	4641      	mov	r1, r8
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c8      	blx	r9
 8005d46:	3001      	adds	r0, #1
 8005d48:	d01e      	beq.n	8005d88 <_printf_common+0xa4>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	6922      	ldr	r2, [r4, #16]
 8005d4e:	f003 0306 	and.w	r3, r3, #6
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	bf02      	ittt	eq
 8005d56:	68e5      	ldreq	r5, [r4, #12]
 8005d58:	6833      	ldreq	r3, [r6, #0]
 8005d5a:	1aed      	subeq	r5, r5, r3
 8005d5c:	68a3      	ldr	r3, [r4, #8]
 8005d5e:	bf0c      	ite	eq
 8005d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d64:	2500      	movne	r5, #0
 8005d66:	4293      	cmp	r3, r2
 8005d68:	bfc4      	itt	gt
 8005d6a:	1a9b      	subgt	r3, r3, r2
 8005d6c:	18ed      	addgt	r5, r5, r3
 8005d6e:	2600      	movs	r6, #0
 8005d70:	341a      	adds	r4, #26
 8005d72:	42b5      	cmp	r5, r6
 8005d74:	d11a      	bne.n	8005dac <_printf_common+0xc8>
 8005d76:	2000      	movs	r0, #0
 8005d78:	e008      	b.n	8005d8c <_printf_common+0xa8>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	4641      	mov	r1, r8
 8005d80:	4638      	mov	r0, r7
 8005d82:	47c8      	blx	r9
 8005d84:	3001      	adds	r0, #1
 8005d86:	d103      	bne.n	8005d90 <_printf_common+0xac>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d90:	3501      	adds	r5, #1
 8005d92:	e7c6      	b.n	8005d22 <_printf_common+0x3e>
 8005d94:	18e1      	adds	r1, r4, r3
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	2030      	movs	r0, #48	@ 0x30
 8005d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d9e:	4422      	add	r2, r4
 8005da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005da8:	3302      	adds	r3, #2
 8005daa:	e7c7      	b.n	8005d3c <_printf_common+0x58>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4622      	mov	r2, r4
 8005db0:	4641      	mov	r1, r8
 8005db2:	4638      	mov	r0, r7
 8005db4:	47c8      	blx	r9
 8005db6:	3001      	adds	r0, #1
 8005db8:	d0e6      	beq.n	8005d88 <_printf_common+0xa4>
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7d9      	b.n	8005d72 <_printf_common+0x8e>
	...

08005dc0 <_printf_i>:
 8005dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	7e0f      	ldrb	r7, [r1, #24]
 8005dc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dc8:	2f78      	cmp	r7, #120	@ 0x78
 8005dca:	4691      	mov	r9, r2
 8005dcc:	4680      	mov	r8, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	469a      	mov	sl, r3
 8005dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dd6:	d807      	bhi.n	8005de8 <_printf_i+0x28>
 8005dd8:	2f62      	cmp	r7, #98	@ 0x62
 8005dda:	d80a      	bhi.n	8005df2 <_printf_i+0x32>
 8005ddc:	2f00      	cmp	r7, #0
 8005dde:	f000 80d2 	beq.w	8005f86 <_printf_i+0x1c6>
 8005de2:	2f58      	cmp	r7, #88	@ 0x58
 8005de4:	f000 80b9 	beq.w	8005f5a <_printf_i+0x19a>
 8005de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df0:	e03a      	b.n	8005e68 <_printf_i+0xa8>
 8005df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005df6:	2b15      	cmp	r3, #21
 8005df8:	d8f6      	bhi.n	8005de8 <_printf_i+0x28>
 8005dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8005e00 <_printf_i+0x40>)
 8005dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e6d 	.word	0x08005e6d
 8005e08:	08005de9 	.word	0x08005de9
 8005e0c:	08005de9 	.word	0x08005de9
 8005e10:	08005de9 	.word	0x08005de9
 8005e14:	08005de9 	.word	0x08005de9
 8005e18:	08005e6d 	.word	0x08005e6d
 8005e1c:	08005de9 	.word	0x08005de9
 8005e20:	08005de9 	.word	0x08005de9
 8005e24:	08005de9 	.word	0x08005de9
 8005e28:	08005de9 	.word	0x08005de9
 8005e2c:	08005f6d 	.word	0x08005f6d
 8005e30:	08005e97 	.word	0x08005e97
 8005e34:	08005f27 	.word	0x08005f27
 8005e38:	08005de9 	.word	0x08005de9
 8005e3c:	08005de9 	.word	0x08005de9
 8005e40:	08005f8f 	.word	0x08005f8f
 8005e44:	08005de9 	.word	0x08005de9
 8005e48:	08005e97 	.word	0x08005e97
 8005e4c:	08005de9 	.word	0x08005de9
 8005e50:	08005de9 	.word	0x08005de9
 8005e54:	08005f2f 	.word	0x08005f2f
 8005e58:	6833      	ldr	r3, [r6, #0]
 8005e5a:	1d1a      	adds	r2, r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6032      	str	r2, [r6, #0]
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e09d      	b.n	8005fa8 <_printf_i+0x1e8>
 8005e6c:	6833      	ldr	r3, [r6, #0]
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	1d19      	adds	r1, r3, #4
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	0606      	lsls	r6, r0, #24
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0xbc>
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	e003      	b.n	8005e84 <_printf_i+0xc4>
 8005e7c:	0645      	lsls	r5, r0, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0xb8>
 8005e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	da03      	bge.n	8005e90 <_printf_i+0xd0>
 8005e88:	232d      	movs	r3, #45	@ 0x2d
 8005e8a:	426d      	negs	r5, r5
 8005e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e90:	4859      	ldr	r0, [pc, #356]	@ (8005ff8 <_printf_i+0x238>)
 8005e92:	230a      	movs	r3, #10
 8005e94:	e011      	b.n	8005eba <_printf_i+0xfa>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	0608      	lsls	r0, r1, #24
 8005e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea0:	d402      	bmi.n	8005ea8 <_printf_i+0xe8>
 8005ea2:	0649      	lsls	r1, r1, #25
 8005ea4:	bf48      	it	mi
 8005ea6:	b2ad      	uxthmi	r5, r5
 8005ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eaa:	4853      	ldr	r0, [pc, #332]	@ (8005ff8 <_printf_i+0x238>)
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	bf14      	ite	ne
 8005eb0:	230a      	movne	r3, #10
 8005eb2:	2308      	moveq	r3, #8
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eba:	6866      	ldr	r6, [r4, #4]
 8005ebc:	60a6      	str	r6, [r4, #8]
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	bfa2      	ittt	ge
 8005ec2:	6821      	ldrge	r1, [r4, #0]
 8005ec4:	f021 0104 	bicge.w	r1, r1, #4
 8005ec8:	6021      	strge	r1, [r4, #0]
 8005eca:	b90d      	cbnz	r5, 8005ed0 <_printf_i+0x110>
 8005ecc:	2e00      	cmp	r6, #0
 8005ece:	d04b      	beq.n	8005f68 <_printf_i+0x1a8>
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ed6:	fb03 5711 	mls	r7, r3, r1, r5
 8005eda:	5dc7      	ldrb	r7, [r0, r7]
 8005edc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ee0:	462f      	mov	r7, r5
 8005ee2:	42bb      	cmp	r3, r7
 8005ee4:	460d      	mov	r5, r1
 8005ee6:	d9f4      	bls.n	8005ed2 <_printf_i+0x112>
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d10b      	bne.n	8005f04 <_printf_i+0x144>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	07df      	lsls	r7, r3, #31
 8005ef0:	d508      	bpl.n	8005f04 <_printf_i+0x144>
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	6861      	ldr	r1, [r4, #4]
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	bfde      	ittt	le
 8005efa:	2330      	movle	r3, #48	@ 0x30
 8005efc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f00:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f04:	1b92      	subs	r2, r2, r6
 8005f06:	6122      	str	r2, [r4, #16]
 8005f08:	f8cd a000 	str.w	sl, [sp]
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	aa03      	add	r2, sp, #12
 8005f10:	4621      	mov	r1, r4
 8005f12:	4640      	mov	r0, r8
 8005f14:	f7ff fee6 	bl	8005ce4 <_printf_common>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d14a      	bne.n	8005fb2 <_printf_i+0x1f2>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f20:	b004      	add	sp, #16
 8005f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	f043 0320 	orr.w	r3, r3, #32
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	4833      	ldr	r0, [pc, #204]	@ (8005ffc <_printf_i+0x23c>)
 8005f30:	2778      	movs	r7, #120	@ 0x78
 8005f32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	6831      	ldr	r1, [r6, #0]
 8005f3a:	061f      	lsls	r7, r3, #24
 8005f3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f40:	d402      	bmi.n	8005f48 <_printf_i+0x188>
 8005f42:	065f      	lsls	r7, r3, #25
 8005f44:	bf48      	it	mi
 8005f46:	b2ad      	uxthmi	r5, r5
 8005f48:	6031      	str	r1, [r6, #0]
 8005f4a:	07d9      	lsls	r1, r3, #31
 8005f4c:	bf44      	itt	mi
 8005f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f52:	6023      	strmi	r3, [r4, #0]
 8005f54:	b11d      	cbz	r5, 8005f5e <_printf_i+0x19e>
 8005f56:	2310      	movs	r3, #16
 8005f58:	e7ac      	b.n	8005eb4 <_printf_i+0xf4>
 8005f5a:	4827      	ldr	r0, [pc, #156]	@ (8005ff8 <_printf_i+0x238>)
 8005f5c:	e7e9      	b.n	8005f32 <_printf_i+0x172>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	f023 0320 	bic.w	r3, r3, #32
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	e7f6      	b.n	8005f56 <_printf_i+0x196>
 8005f68:	4616      	mov	r6, r2
 8005f6a:	e7bd      	b.n	8005ee8 <_printf_i+0x128>
 8005f6c:	6833      	ldr	r3, [r6, #0]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	6961      	ldr	r1, [r4, #20]
 8005f72:	1d18      	adds	r0, r3, #4
 8005f74:	6030      	str	r0, [r6, #0]
 8005f76:	062e      	lsls	r6, r5, #24
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	d501      	bpl.n	8005f80 <_printf_i+0x1c0>
 8005f7c:	6019      	str	r1, [r3, #0]
 8005f7e:	e002      	b.n	8005f86 <_printf_i+0x1c6>
 8005f80:	0668      	lsls	r0, r5, #25
 8005f82:	d5fb      	bpl.n	8005f7c <_printf_i+0x1bc>
 8005f84:	8019      	strh	r1, [r3, #0]
 8005f86:	2300      	movs	r3, #0
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	4616      	mov	r6, r2
 8005f8c:	e7bc      	b.n	8005f08 <_printf_i+0x148>
 8005f8e:	6833      	ldr	r3, [r6, #0]
 8005f90:	1d1a      	adds	r2, r3, #4
 8005f92:	6032      	str	r2, [r6, #0]
 8005f94:	681e      	ldr	r6, [r3, #0]
 8005f96:	6862      	ldr	r2, [r4, #4]
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7fa f930 	bl	8000200 <memchr>
 8005fa0:	b108      	cbz	r0, 8005fa6 <_printf_i+0x1e6>
 8005fa2:	1b80      	subs	r0, r0, r6
 8005fa4:	6060      	str	r0, [r4, #4]
 8005fa6:	6863      	ldr	r3, [r4, #4]
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	2300      	movs	r3, #0
 8005fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb0:	e7aa      	b.n	8005f08 <_printf_i+0x148>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	47d0      	blx	sl
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d0ad      	beq.n	8005f1c <_printf_i+0x15c>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	079b      	lsls	r3, r3, #30
 8005fc4:	d413      	bmi.n	8005fee <_printf_i+0x22e>
 8005fc6:	68e0      	ldr	r0, [r4, #12]
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	4298      	cmp	r0, r3
 8005fcc:	bfb8      	it	lt
 8005fce:	4618      	movlt	r0, r3
 8005fd0:	e7a6      	b.n	8005f20 <_printf_i+0x160>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4640      	mov	r0, r8
 8005fda:	47d0      	blx	sl
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d09d      	beq.n	8005f1c <_printf_i+0x15c>
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	9903      	ldr	r1, [sp, #12]
 8005fe6:	1a5b      	subs	r3, r3, r1
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	dcf2      	bgt.n	8005fd2 <_printf_i+0x212>
 8005fec:	e7eb      	b.n	8005fc6 <_printf_i+0x206>
 8005fee:	2500      	movs	r5, #0
 8005ff0:	f104 0619 	add.w	r6, r4, #25
 8005ff4:	e7f5      	b.n	8005fe2 <_printf_i+0x222>
 8005ff6:	bf00      	nop
 8005ff8:	080077e7 	.word	0x080077e7
 8005ffc:	080077f8 	.word	0x080077f8

08006000 <__sflush_r>:
 8006000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006008:	0716      	lsls	r6, r2, #28
 800600a:	4605      	mov	r5, r0
 800600c:	460c      	mov	r4, r1
 800600e:	d454      	bmi.n	80060ba <__sflush_r+0xba>
 8006010:	684b      	ldr	r3, [r1, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	dc02      	bgt.n	800601c <__sflush_r+0x1c>
 8006016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	dd48      	ble.n	80060ae <__sflush_r+0xae>
 800601c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800601e:	2e00      	cmp	r6, #0
 8006020:	d045      	beq.n	80060ae <__sflush_r+0xae>
 8006022:	2300      	movs	r3, #0
 8006024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006028:	682f      	ldr	r7, [r5, #0]
 800602a:	6a21      	ldr	r1, [r4, #32]
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	d030      	beq.n	8006092 <__sflush_r+0x92>
 8006030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	0759      	lsls	r1, r3, #29
 8006036:	d505      	bpl.n	8006044 <__sflush_r+0x44>
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800603e:	b10b      	cbz	r3, 8006044 <__sflush_r+0x44>
 8006040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	2300      	movs	r3, #0
 8006046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006048:	6a21      	ldr	r1, [r4, #32]
 800604a:	4628      	mov	r0, r5
 800604c:	47b0      	blx	r6
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	d106      	bne.n	8006062 <__sflush_r+0x62>
 8006054:	6829      	ldr	r1, [r5, #0]
 8006056:	291d      	cmp	r1, #29
 8006058:	d82b      	bhi.n	80060b2 <__sflush_r+0xb2>
 800605a:	4a2a      	ldr	r2, [pc, #168]	@ (8006104 <__sflush_r+0x104>)
 800605c:	410a      	asrs	r2, r1
 800605e:	07d6      	lsls	r6, r2, #31
 8006060:	d427      	bmi.n	80060b2 <__sflush_r+0xb2>
 8006062:	2200      	movs	r2, #0
 8006064:	6062      	str	r2, [r4, #4]
 8006066:	04d9      	lsls	r1, r3, #19
 8006068:	6922      	ldr	r2, [r4, #16]
 800606a:	6022      	str	r2, [r4, #0]
 800606c:	d504      	bpl.n	8006078 <__sflush_r+0x78>
 800606e:	1c42      	adds	r2, r0, #1
 8006070:	d101      	bne.n	8006076 <__sflush_r+0x76>
 8006072:	682b      	ldr	r3, [r5, #0]
 8006074:	b903      	cbnz	r3, 8006078 <__sflush_r+0x78>
 8006076:	6560      	str	r0, [r4, #84]	@ 0x54
 8006078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800607a:	602f      	str	r7, [r5, #0]
 800607c:	b1b9      	cbz	r1, 80060ae <__sflush_r+0xae>
 800607e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006082:	4299      	cmp	r1, r3
 8006084:	d002      	beq.n	800608c <__sflush_r+0x8c>
 8006086:	4628      	mov	r0, r5
 8006088:	f000 fa24 	bl	80064d4 <_free_r>
 800608c:	2300      	movs	r3, #0
 800608e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006090:	e00d      	b.n	80060ae <__sflush_r+0xae>
 8006092:	2301      	movs	r3, #1
 8006094:	4628      	mov	r0, r5
 8006096:	47b0      	blx	r6
 8006098:	4602      	mov	r2, r0
 800609a:	1c50      	adds	r0, r2, #1
 800609c:	d1c9      	bne.n	8006032 <__sflush_r+0x32>
 800609e:	682b      	ldr	r3, [r5, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0c6      	beq.n	8006032 <__sflush_r+0x32>
 80060a4:	2b1d      	cmp	r3, #29
 80060a6:	d001      	beq.n	80060ac <__sflush_r+0xac>
 80060a8:	2b16      	cmp	r3, #22
 80060aa:	d11e      	bne.n	80060ea <__sflush_r+0xea>
 80060ac:	602f      	str	r7, [r5, #0]
 80060ae:	2000      	movs	r0, #0
 80060b0:	e022      	b.n	80060f8 <__sflush_r+0xf8>
 80060b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b6:	b21b      	sxth	r3, r3
 80060b8:	e01b      	b.n	80060f2 <__sflush_r+0xf2>
 80060ba:	690f      	ldr	r7, [r1, #16]
 80060bc:	2f00      	cmp	r7, #0
 80060be:	d0f6      	beq.n	80060ae <__sflush_r+0xae>
 80060c0:	0793      	lsls	r3, r2, #30
 80060c2:	680e      	ldr	r6, [r1, #0]
 80060c4:	bf08      	it	eq
 80060c6:	694b      	ldreq	r3, [r1, #20]
 80060c8:	600f      	str	r7, [r1, #0]
 80060ca:	bf18      	it	ne
 80060cc:	2300      	movne	r3, #0
 80060ce:	eba6 0807 	sub.w	r8, r6, r7
 80060d2:	608b      	str	r3, [r1, #8]
 80060d4:	f1b8 0f00 	cmp.w	r8, #0
 80060d8:	dde9      	ble.n	80060ae <__sflush_r+0xae>
 80060da:	6a21      	ldr	r1, [r4, #32]
 80060dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80060de:	4643      	mov	r3, r8
 80060e0:	463a      	mov	r2, r7
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b0      	blx	r6
 80060e6:	2800      	cmp	r0, #0
 80060e8:	dc08      	bgt.n	80060fc <__sflush_r+0xfc>
 80060ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f2:	81a3      	strh	r3, [r4, #12]
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fc:	4407      	add	r7, r0
 80060fe:	eba8 0800 	sub.w	r8, r8, r0
 8006102:	e7e7      	b.n	80060d4 <__sflush_r+0xd4>
 8006104:	dfbffffe 	.word	0xdfbffffe

08006108 <_fflush_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	690b      	ldr	r3, [r1, #16]
 800610c:	4605      	mov	r5, r0
 800610e:	460c      	mov	r4, r1
 8006110:	b913      	cbnz	r3, 8006118 <_fflush_r+0x10>
 8006112:	2500      	movs	r5, #0
 8006114:	4628      	mov	r0, r5
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	b118      	cbz	r0, 8006122 <_fflush_r+0x1a>
 800611a:	6a03      	ldr	r3, [r0, #32]
 800611c:	b90b      	cbnz	r3, 8006122 <_fflush_r+0x1a>
 800611e:	f7ff fb23 	bl	8005768 <__sinit>
 8006122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0f3      	beq.n	8006112 <_fflush_r+0xa>
 800612a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800612c:	07d0      	lsls	r0, r2, #31
 800612e:	d404      	bmi.n	800613a <_fflush_r+0x32>
 8006130:	0599      	lsls	r1, r3, #22
 8006132:	d402      	bmi.n	800613a <_fflush_r+0x32>
 8006134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006136:	f7ff fbf0 	bl	800591a <__retarget_lock_acquire_recursive>
 800613a:	4628      	mov	r0, r5
 800613c:	4621      	mov	r1, r4
 800613e:	f7ff ff5f 	bl	8006000 <__sflush_r>
 8006142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006144:	07da      	lsls	r2, r3, #31
 8006146:	4605      	mov	r5, r0
 8006148:	d4e4      	bmi.n	8006114 <_fflush_r+0xc>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	059b      	lsls	r3, r3, #22
 800614e:	d4e1      	bmi.n	8006114 <_fflush_r+0xc>
 8006150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006152:	f7ff fbe3 	bl	800591c <__retarget_lock_release_recursive>
 8006156:	e7dd      	b.n	8006114 <_fflush_r+0xc>

08006158 <__malloc_lock>:
 8006158:	4801      	ldr	r0, [pc, #4]	@ (8006160 <__malloc_lock+0x8>)
 800615a:	f7ff bbde 	b.w	800591a <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	20025c30 	.word	0x20025c30

08006164 <__malloc_unlock>:
 8006164:	4801      	ldr	r0, [pc, #4]	@ (800616c <__malloc_unlock+0x8>)
 8006166:	f7ff bbd9 	b.w	800591c <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	20025c30 	.word	0x20025c30

08006170 <__sread>:
 8006170:	b510      	push	{r4, lr}
 8006172:	460c      	mov	r4, r1
 8006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006178:	f000 f978 	bl	800646c <_read_r>
 800617c:	2800      	cmp	r0, #0
 800617e:	bfab      	itete	ge
 8006180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006182:	89a3      	ldrhlt	r3, [r4, #12]
 8006184:	181b      	addge	r3, r3, r0
 8006186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800618a:	bfac      	ite	ge
 800618c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800618e:	81a3      	strhlt	r3, [r4, #12]
 8006190:	bd10      	pop	{r4, pc}

08006192 <__swrite>:
 8006192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006196:	461f      	mov	r7, r3
 8006198:	898b      	ldrh	r3, [r1, #12]
 800619a:	05db      	lsls	r3, r3, #23
 800619c:	4605      	mov	r5, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	4616      	mov	r6, r2
 80061a2:	d505      	bpl.n	80061b0 <__swrite+0x1e>
 80061a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a8:	2302      	movs	r3, #2
 80061aa:	2200      	movs	r2, #0
 80061ac:	f000 f94c 	bl	8006448 <_lseek_r>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	4628      	mov	r0, r5
 80061c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061c6:	f000 b973 	b.w	80064b0 <_write_r>

080061ca <__sseek>:
 80061ca:	b510      	push	{r4, lr}
 80061cc:	460c      	mov	r4, r1
 80061ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d2:	f000 f939 	bl	8006448 <_lseek_r>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	bf15      	itete	ne
 80061dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061e6:	81a3      	strheq	r3, [r4, #12]
 80061e8:	bf18      	it	ne
 80061ea:	81a3      	strhne	r3, [r4, #12]
 80061ec:	bd10      	pop	{r4, pc}

080061ee <__sclose>:
 80061ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f2:	f000 b8f7 	b.w	80063e4 <_close_r>

080061f6 <__swbuf_r>:
 80061f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f8:	460e      	mov	r6, r1
 80061fa:	4614      	mov	r4, r2
 80061fc:	4605      	mov	r5, r0
 80061fe:	b118      	cbz	r0, 8006208 <__swbuf_r+0x12>
 8006200:	6a03      	ldr	r3, [r0, #32]
 8006202:	b90b      	cbnz	r3, 8006208 <__swbuf_r+0x12>
 8006204:	f7ff fab0 	bl	8005768 <__sinit>
 8006208:	69a3      	ldr	r3, [r4, #24]
 800620a:	60a3      	str	r3, [r4, #8]
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	071a      	lsls	r2, r3, #28
 8006210:	d501      	bpl.n	8006216 <__swbuf_r+0x20>
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	b943      	cbnz	r3, 8006228 <__swbuf_r+0x32>
 8006216:	4621      	mov	r1, r4
 8006218:	4628      	mov	r0, r5
 800621a:	f000 f82b 	bl	8006274 <__swsetup_r>
 800621e:	b118      	cbz	r0, 8006228 <__swbuf_r+0x32>
 8006220:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006224:	4638      	mov	r0, r7
 8006226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	6922      	ldr	r2, [r4, #16]
 800622c:	1a98      	subs	r0, r3, r2
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	b2f6      	uxtb	r6, r6
 8006232:	4283      	cmp	r3, r0
 8006234:	4637      	mov	r7, r6
 8006236:	dc05      	bgt.n	8006244 <__swbuf_r+0x4e>
 8006238:	4621      	mov	r1, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f7ff ff64 	bl	8006108 <_fflush_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	d1ed      	bne.n	8006220 <__swbuf_r+0x2a>
 8006244:	68a3      	ldr	r3, [r4, #8]
 8006246:	3b01      	subs	r3, #1
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	701e      	strb	r6, [r3, #0]
 8006252:	6962      	ldr	r2, [r4, #20]
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	429a      	cmp	r2, r3
 8006258:	d004      	beq.n	8006264 <__swbuf_r+0x6e>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	07db      	lsls	r3, r3, #31
 800625e:	d5e1      	bpl.n	8006224 <__swbuf_r+0x2e>
 8006260:	2e0a      	cmp	r6, #10
 8006262:	d1df      	bne.n	8006224 <__swbuf_r+0x2e>
 8006264:	4621      	mov	r1, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f7ff ff4e 	bl	8006108 <_fflush_r>
 800626c:	2800      	cmp	r0, #0
 800626e:	d0d9      	beq.n	8006224 <__swbuf_r+0x2e>
 8006270:	e7d6      	b.n	8006220 <__swbuf_r+0x2a>
	...

08006274 <__swsetup_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4b29      	ldr	r3, [pc, #164]	@ (800631c <__swsetup_r+0xa8>)
 8006278:	4605      	mov	r5, r0
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	460c      	mov	r4, r1
 800627e:	b118      	cbz	r0, 8006288 <__swsetup_r+0x14>
 8006280:	6a03      	ldr	r3, [r0, #32]
 8006282:	b90b      	cbnz	r3, 8006288 <__swsetup_r+0x14>
 8006284:	f7ff fa70 	bl	8005768 <__sinit>
 8006288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628c:	0719      	lsls	r1, r3, #28
 800628e:	d422      	bmi.n	80062d6 <__swsetup_r+0x62>
 8006290:	06da      	lsls	r2, r3, #27
 8006292:	d407      	bmi.n	80062a4 <__swsetup_r+0x30>
 8006294:	2209      	movs	r2, #9
 8006296:	602a      	str	r2, [r5, #0]
 8006298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062a2:	e033      	b.n	800630c <__swsetup_r+0x98>
 80062a4:	0758      	lsls	r0, r3, #29
 80062a6:	d512      	bpl.n	80062ce <__swsetup_r+0x5a>
 80062a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062aa:	b141      	cbz	r1, 80062be <__swsetup_r+0x4a>
 80062ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d002      	beq.n	80062ba <__swsetup_r+0x46>
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 f90d 	bl	80064d4 <_free_r>
 80062ba:	2300      	movs	r3, #0
 80062bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	2300      	movs	r3, #0
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f043 0308 	orr.w	r3, r3, #8
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	b94b      	cbnz	r3, 80062ee <__swsetup_r+0x7a>
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e4:	d003      	beq.n	80062ee <__swsetup_r+0x7a>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f000 f83f 	bl	800636c <__smakebuf_r>
 80062ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f2:	f013 0201 	ands.w	r2, r3, #1
 80062f6:	d00a      	beq.n	800630e <__swsetup_r+0x9a>
 80062f8:	2200      	movs	r2, #0
 80062fa:	60a2      	str	r2, [r4, #8]
 80062fc:	6962      	ldr	r2, [r4, #20]
 80062fe:	4252      	negs	r2, r2
 8006300:	61a2      	str	r2, [r4, #24]
 8006302:	6922      	ldr	r2, [r4, #16]
 8006304:	b942      	cbnz	r2, 8006318 <__swsetup_r+0xa4>
 8006306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800630a:	d1c5      	bne.n	8006298 <__swsetup_r+0x24>
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	0799      	lsls	r1, r3, #30
 8006310:	bf58      	it	pl
 8006312:	6962      	ldrpl	r2, [r4, #20]
 8006314:	60a2      	str	r2, [r4, #8]
 8006316:	e7f4      	b.n	8006302 <__swsetup_r+0x8e>
 8006318:	2000      	movs	r0, #0
 800631a:	e7f7      	b.n	800630c <__swsetup_r+0x98>
 800631c:	20000030 	.word	0x20000030

08006320 <__swhatbuf_r>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	460c      	mov	r4, r1
 8006324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006328:	2900      	cmp	r1, #0
 800632a:	b096      	sub	sp, #88	@ 0x58
 800632c:	4615      	mov	r5, r2
 800632e:	461e      	mov	r6, r3
 8006330:	da0d      	bge.n	800634e <__swhatbuf_r+0x2e>
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006338:	f04f 0100 	mov.w	r1, #0
 800633c:	bf14      	ite	ne
 800633e:	2340      	movne	r3, #64	@ 0x40
 8006340:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006344:	2000      	movs	r0, #0
 8006346:	6031      	str	r1, [r6, #0]
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	b016      	add	sp, #88	@ 0x58
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	466a      	mov	r2, sp
 8006350:	f000 f858 	bl	8006404 <_fstat_r>
 8006354:	2800      	cmp	r0, #0
 8006356:	dbec      	blt.n	8006332 <__swhatbuf_r+0x12>
 8006358:	9901      	ldr	r1, [sp, #4]
 800635a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800635e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006362:	4259      	negs	r1, r3
 8006364:	4159      	adcs	r1, r3
 8006366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800636a:	e7eb      	b.n	8006344 <__swhatbuf_r+0x24>

0800636c <__smakebuf_r>:
 800636c:	898b      	ldrh	r3, [r1, #12]
 800636e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006370:	079d      	lsls	r5, r3, #30
 8006372:	4606      	mov	r6, r0
 8006374:	460c      	mov	r4, r1
 8006376:	d507      	bpl.n	8006388 <__smakebuf_r+0x1c>
 8006378:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	2301      	movs	r3, #1
 8006382:	6163      	str	r3, [r4, #20]
 8006384:	b003      	add	sp, #12
 8006386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006388:	ab01      	add	r3, sp, #4
 800638a:	466a      	mov	r2, sp
 800638c:	f7ff ffc8 	bl	8006320 <__swhatbuf_r>
 8006390:	9f00      	ldr	r7, [sp, #0]
 8006392:	4605      	mov	r5, r0
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff fc24 	bl	8005be4 <_malloc_r>
 800639c:	b948      	cbnz	r0, 80063b2 <__smakebuf_r+0x46>
 800639e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a2:	059a      	lsls	r2, r3, #22
 80063a4:	d4ee      	bmi.n	8006384 <__smakebuf_r+0x18>
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	f043 0302 	orr.w	r3, r3, #2
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	e7e2      	b.n	8006378 <__smakebuf_r+0xc>
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	6020      	str	r0, [r4, #0]
 80063b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	9b01      	ldr	r3, [sp, #4]
 80063be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063c2:	b15b      	cbz	r3, 80063dc <__smakebuf_r+0x70>
 80063c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 f82d 	bl	8006428 <_isatty_r>
 80063ce:	b128      	cbz	r0, 80063dc <__smakebuf_r+0x70>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	f023 0303 	bic.w	r3, r3, #3
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	431d      	orrs	r5, r3
 80063e0:	81a5      	strh	r5, [r4, #12]
 80063e2:	e7cf      	b.n	8006384 <__smakebuf_r+0x18>

080063e4 <_close_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	@ (8006400 <_close_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fe ff6a 	bl	80052c8 <_close>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_close_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_close_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20025c3c 	.word	0x20025c3c

08006404 <_fstat_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4d07      	ldr	r5, [pc, #28]	@ (8006424 <_fstat_r+0x20>)
 8006408:	2300      	movs	r3, #0
 800640a:	4604      	mov	r4, r0
 800640c:	4608      	mov	r0, r1
 800640e:	4611      	mov	r1, r2
 8006410:	602b      	str	r3, [r5, #0]
 8006412:	f7fe ff9c 	bl	800534e <_fstat>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d102      	bne.n	8006420 <_fstat_r+0x1c>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	b103      	cbz	r3, 8006420 <_fstat_r+0x1c>
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	bd38      	pop	{r3, r4, r5, pc}
 8006422:	bf00      	nop
 8006424:	20025c3c 	.word	0x20025c3c

08006428 <_isatty_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d06      	ldr	r5, [pc, #24]	@ (8006444 <_isatty_r+0x1c>)
 800642c:	2300      	movs	r3, #0
 800642e:	4604      	mov	r4, r0
 8006430:	4608      	mov	r0, r1
 8006432:	602b      	str	r3, [r5, #0]
 8006434:	f7ff f8ee 	bl	8005614 <_isatty>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_isatty_r+0x1a>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_isatty_r+0x1a>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	20025c3c 	.word	0x20025c3c

08006448 <_lseek_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d07      	ldr	r5, [pc, #28]	@ (8006468 <_lseek_r+0x20>)
 800644c:	4604      	mov	r4, r0
 800644e:	4608      	mov	r0, r1
 8006450:	4611      	mov	r1, r2
 8006452:	2200      	movs	r2, #0
 8006454:	602a      	str	r2, [r5, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7fe fef7 	bl	800524a <_lseek>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_lseek_r+0x1e>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	b103      	cbz	r3, 8006466 <_lseek_r+0x1e>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20025c3c 	.word	0x20025c3c

0800646c <_read_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4d07      	ldr	r5, [pc, #28]	@ (800648c <_read_r+0x20>)
 8006470:	4604      	mov	r4, r0
 8006472:	4608      	mov	r0, r1
 8006474:	4611      	mov	r1, r2
 8006476:	2200      	movs	r2, #0
 8006478:	602a      	str	r2, [r5, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	f7fe fe8f 	bl	800519e <_read>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_read_r+0x1e>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b103      	cbz	r3, 800648a <_read_r+0x1e>
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	20025c3c 	.word	0x20025c3c

08006490 <_sbrk_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d06      	ldr	r5, [pc, #24]	@ (80064ac <_sbrk_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f7fb fcf2 	bl	8001e84 <_sbrk>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_sbrk_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_sbrk_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20025c3c 	.word	0x20025c3c

080064b0 <_write_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	@ (80064d0 <_write_r+0x20>)
 80064b4:	4604      	mov	r4, r0
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fe fed5 	bl	800526e <_write>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_write_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_write_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20025c3c 	.word	0x20025c3c

080064d4 <_free_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	2900      	cmp	r1, #0
 80064da:	d041      	beq.n	8006560 <_free_r+0x8c>
 80064dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e0:	1f0c      	subs	r4, r1, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bfb8      	it	lt
 80064e6:	18e4      	addlt	r4, r4, r3
 80064e8:	f7ff fe36 	bl	8006158 <__malloc_lock>
 80064ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <_free_r+0x90>)
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	b933      	cbnz	r3, 8006500 <_free_r+0x2c>
 80064f2:	6063      	str	r3, [r4, #4]
 80064f4:	6014      	str	r4, [r2, #0]
 80064f6:	4628      	mov	r0, r5
 80064f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064fc:	f7ff be32 	b.w	8006164 <__malloc_unlock>
 8006500:	42a3      	cmp	r3, r4
 8006502:	d908      	bls.n	8006516 <_free_r+0x42>
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	1821      	adds	r1, r4, r0
 8006508:	428b      	cmp	r3, r1
 800650a:	bf01      	itttt	eq
 800650c:	6819      	ldreq	r1, [r3, #0]
 800650e:	685b      	ldreq	r3, [r3, #4]
 8006510:	1809      	addeq	r1, r1, r0
 8006512:	6021      	streq	r1, [r4, #0]
 8006514:	e7ed      	b.n	80064f2 <_free_r+0x1e>
 8006516:	461a      	mov	r2, r3
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	b10b      	cbz	r3, 8006520 <_free_r+0x4c>
 800651c:	42a3      	cmp	r3, r4
 800651e:	d9fa      	bls.n	8006516 <_free_r+0x42>
 8006520:	6811      	ldr	r1, [r2, #0]
 8006522:	1850      	adds	r0, r2, r1
 8006524:	42a0      	cmp	r0, r4
 8006526:	d10b      	bne.n	8006540 <_free_r+0x6c>
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	4401      	add	r1, r0
 800652c:	1850      	adds	r0, r2, r1
 800652e:	4283      	cmp	r3, r0
 8006530:	6011      	str	r1, [r2, #0]
 8006532:	d1e0      	bne.n	80064f6 <_free_r+0x22>
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	6053      	str	r3, [r2, #4]
 800653a:	4408      	add	r0, r1
 800653c:	6010      	str	r0, [r2, #0]
 800653e:	e7da      	b.n	80064f6 <_free_r+0x22>
 8006540:	d902      	bls.n	8006548 <_free_r+0x74>
 8006542:	230c      	movs	r3, #12
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	e7d6      	b.n	80064f6 <_free_r+0x22>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	1821      	adds	r1, r4, r0
 800654c:	428b      	cmp	r3, r1
 800654e:	bf04      	itt	eq
 8006550:	6819      	ldreq	r1, [r3, #0]
 8006552:	685b      	ldreq	r3, [r3, #4]
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	bf04      	itt	eq
 8006558:	1809      	addeq	r1, r1, r0
 800655a:	6021      	streq	r1, [r4, #0]
 800655c:	6054      	str	r4, [r2, #4]
 800655e:	e7ca      	b.n	80064f6 <_free_r+0x22>
 8006560:	bd38      	pop	{r3, r4, r5, pc}
 8006562:	bf00      	nop
 8006564:	20025c38 	.word	0x20025c38

08006568 <_init>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr

08006574 <_fini>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	bf00      	nop
 8006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657a:	bc08      	pop	{r3}
 800657c:	469e      	mov	lr, r3
 800657e:	4770      	bx	lr
