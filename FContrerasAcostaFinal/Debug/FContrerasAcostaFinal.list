
FContrerasAcostaFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b04  08006a90  08006a90  00007a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008594  08008594  0000a1b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800859c  0800859c  0000a1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085a0  080085a0  000095a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  080085a4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1b8  2**0
                  CONTENTS
 10 .bss          00025c78  200001b8  200001b8  0000a1b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e30  20025e30  0000a1b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011562  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c3  00000000  00000000  0001b74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0001e810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e60  00000000  00000000  0001fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273b5  00000000  00000000  00020938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a5d  00000000  00000000  00047ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1a08  00000000  00000000  0005f74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141152  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055a4  00000000  00000000  00141198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0014673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001b8 	.word	0x200001b8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006a78 	.word	0x08006a78

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001bc 	.word	0x200001bc
 80001e8:	08006a78 	.word	0x08006a78

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004f0:	f005 ffde 	bl	80064b0 <initialise_monitor_handles>
    LTCD__Init();
 80004f4:	f000 fa66 	bl	80009c4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fa23 	bl	8000944 <LTCD_Layer_Init>
    // POLLING TOUCH SCREEN:
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fe:	f000 fbb5 	bl	8000c6c <InitializeLCDTouch>

	First_Screen();
 8000502:	f000 f847 	bl	8000594 <First_Screen>

	Tim_Init();
 8000506:	f000 f84b 	bl	80005a0 <Tim_Init>
	IRQ_ENABLE(TIM2_IRQ_NUMBER);
 800050a:	201c      	movs	r0, #28
 800050c:	f000 f8c4 	bl	8000698 <IRQ_ENABLE>
	IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 8000510:	2006      	movs	r0, #6
 8000512:	f000 f8c1 	bl	8000698 <IRQ_ENABLE>
	BUTT_Init_IT();
 8000516:	f000 f849 	bl	80005ac <BUTT_Init_IT>
	Random_Init();
 800051a:	f000 f84d 	bl	80005b8 <Random_Init>

	// This is the orientation for the board to be directly up where the buttons are
	// vertically above the screen Top left would be low x value, high y value. Bottom
	// right would be low x value, low y value.

	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 800051e:	4b02      	ldr	r3, [pc, #8]	@ (8000528 <ApplicationInit+0x3c>)
 8000520:	2201      	movs	r2, #1
 8000522:	719a      	strb	r2, [r3, #6]


	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200001d8 	.word	0x200001d8

0800052c <ApplicationGame>:

void ApplicationGame(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8000530:	4816      	ldr	r0, [pc, #88]	@ (800058c <ApplicationGame+0x60>)
 8000532:	f000 fba6 	bl	8000c82 <returnTouchStateAndLocation>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d124      	bne.n	8000586 <ApplicationGame+0x5a>
	{
		if(START_FLAG == 0)
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <ApplicationGame+0x64>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d106      	bne.n	8000554 <ApplicationGame+0x28>
		{
			addSchedulerEvent(START);
 8000546:	2010      	movs	r0, #16
 8000548:	f000 fee6 	bl	8001318 <addSchedulerEvent>
			START_FLAG = 1;
 800054c:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <ApplicationGame+0x64>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
			addSchedulerEvent(SHIFT_R);
		}

	}

}
 8000552:	e018      	b.n	8000586 <ApplicationGame+0x5a>
		else if(START_FLAG == 1 && StaticTouchData.x<120)
 8000554:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <ApplicationGame+0x64>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b01      	cmp	r3, #1
 800055c:	d107      	bne.n	800056e <ApplicationGame+0x42>
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <ApplicationGame+0x60>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b77      	cmp	r3, #119	@ 0x77
 8000564:	d803      	bhi.n	800056e <ApplicationGame+0x42>
			addSchedulerEvent(SHIFT_L);
 8000566:	2002      	movs	r0, #2
 8000568:	f000 fed6 	bl	8001318 <addSchedulerEvent>
}
 800056c:	e00b      	b.n	8000586 <ApplicationGame+0x5a>
		else if(START_FLAG == 1 && StaticTouchData.x>240)
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <ApplicationGame+0x64>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b01      	cmp	r3, #1
 8000576:	d106      	bne.n	8000586 <ApplicationGame+0x5a>
 8000578:	4b04      	ldr	r3, [pc, #16]	@ (800058c <ApplicationGame+0x60>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2bf0      	cmp	r3, #240	@ 0xf0
 800057e:	d902      	bls.n	8000586 <ApplicationGame+0x5a>
			addSchedulerEvent(SHIFT_R);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fec9 	bl	8001318 <addSchedulerEvent>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200001d8 	.word	0x200001d8
 8000590:	200001d4 	.word	0x200001d4

08000594 <First_Screen>:
}
#endif // Example Code
// ************** Write your functions here **************

void First_Screen(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	Start_Screen();
 8000598:	f000 fb80 	bl	8000c9c <Start_Screen>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <Tim_Init>:
//{
//	Game_Screen();
//}

void Tim_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	TIMER_Init();
 80005a4:	f001 f90c 	bl	80017c0 <TIMER_Init>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <BUTT_Init_IT>:

void BUTT_Init_IT(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	BUTTON_Init_Interupt();
 80005b0:	f000 f84e 	bl	8000650 <BUTTON_Init_Interupt>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <Random_Init>:

void Random_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	RNG_Init();
 80005bc:	f000 fe62 	bl	8001284 <RNG_Init>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	 IRQ_DISABLE(TIM2_IRQ_NUMBER);
 80005c8:	201c      	movs	r0, #28
 80005ca:	f000 f88b 	bl	80006e4 <IRQ_DISABLE>
	 IRQ_CLEAR(TIM2_IRQ_NUMBER);
 80005ce:	201c      	movs	r0, #28
 80005d0:	f000 f8b0 	bl	8000734 <IRQ_CLEAR>
	 TIM2->SR &= ~(0x1 << UIF_OFFSET); // Lowering the Flag
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005de:	f023 0301 	bic.w	r3, r3, #1
 80005e2:	6113      	str	r3, [r2, #16]

	 addSchedulerEvent(COUNT);
 80005e4:	2008      	movs	r0, #8
 80005e6:	f000 fe97 	bl	8001318 <addSchedulerEvent>

	 IRQ_ENABLE(TIM2_IRQ_NUMBER);
 80005ea:	201c      	movs	r0, #28
 80005ec:	f000 f854 	bl	8000698 <IRQ_ENABLE>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) // TODO: need to loewr the flag in the nvic
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	 IRQ_DISABLE(EXTI0_IRQ_NUMBER);
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 f873 	bl	80006e4 <IRQ_DISABLE>
	 IRQ_CLEAR(EXTI0_IRQ_NUMBER);
 80005fe:	2006      	movs	r0, #6
 8000600:	f000 f898 	bl	8000734 <IRQ_CLEAR>

	 addSchedulerEvent(ROTATE_CC);
 8000604:	2004      	movs	r0, #4
 8000606:	f000 fe87 	bl	8001318 <addSchedulerEvent>

	 CLEAR_EXTI(B_PIN);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f8ba 	bl	8000784 <CLEAR_EXTI>
	 IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 8000610:	2006      	movs	r0, #6
 8000612:	f000 f841 	bl	8000698 <IRQ_ENABLE>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <BUTTON_ClockControl>:
	HAL_GPIO_Init(GPIOA, &BUTTONPinConfig);

}

void BUTTON_ClockControl(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <BUTTON_ClockControl+0x30>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <BUTTON_ClockControl+0x30>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <BUTTON_ClockControl+0x30>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800

08000650 <BUTTON_Init_Interupt>:
		return false;
	}
}

void BUTTON_Init_Interupt(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0

	BUTTON_ClockControl();
 8000656:	f7ff ffe1 	bl	800061c <BUTTON_ClockControl>
	GPIO_InitTypeDef BUTTONPinConfig= {RESET};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
	BUTTONPinConfig.Pin = GPIO_PIN_0;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
	BUTTONPinConfig.Mode = GPIO_MODE_IT_RISING; // Configure as Rising Edge Int
 800066c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000670:	60bb      	str	r3, [r7, #8]
	BUTTONPinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
	BUTTONPinConfig.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
	//BUTTONPinConfig.Alternate = GPIO_PUPDR_NONE;

	HAL_GPIO_Init(GPIOA, &BUTTONPinConfig);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <BUTTON_Init_Interupt+0x44>)
 8000680:	f002 fc30 	bl	8002ee4 <HAL_GPIO_Init>
	//HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);

	IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 8000684:	2006      	movs	r0, #6
 8000686:	f000 f807 	bl	8000698 <IRQ_ENABLE>

}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000

08000698 <IRQ_ENABLE>:
#define check 32
static uint8_t reg_select;
static uint32_t bit_select;

void IRQ_ENABLE(uint8_t number)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	095b      	lsrs	r3, r3, #5
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <IRQ_ENABLE+0x44>)
 80006aa:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	4a0b      	ldr	r2, [pc, #44]	@ (80006e0 <IRQ_ENABLE+0x48>)
 80006b4:	6013      	str	r3, [r2, #0]
	*(NVIC_ISER0+reg_select) = (0x1 << bit_select);
 80006b6:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <IRQ_ENABLE+0x48>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2201      	movs	r2, #1
 80006bc:	409a      	lsls	r2, r3
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <IRQ_ENABLE+0x44>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006c8:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80006cc:	601a      	str	r2, [r3, #0]

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	200001e0 	.word	0x200001e0
 80006e0:	200001e4 	.word	0x200001e4

080006e4 <IRQ_DISABLE>:

void IRQ_DISABLE(uint8_t number)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	095b      	lsrs	r3, r3, #5
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <IRQ_DISABLE+0x44>)
 80006f6:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 031f 	and.w	r3, r3, #31
 80006fe:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <IRQ_DISABLE+0x48>)
 8000700:	6013      	str	r3, [r2, #0]
	*(NVIC_ICER0+reg_select) = (0x1 << bit_select);
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <IRQ_DISABLE+0x48>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2201      	movs	r2, #1
 8000708:	fa02 f103 	lsl.w	r1, r2, r3
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <IRQ_DISABLE+0x44>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	009a      	lsls	r2, r3, #2
 8000712:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <IRQ_DISABLE+0x4c>)
 8000714:	4413      	add	r3, r2
 8000716:	460a      	mov	r2, r1
 8000718:	601a      	str	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200001e0 	.word	0x200001e0
 800072c:	200001e4 	.word	0x200001e4
 8000730:	e000e180 	.word	0xe000e180

08000734 <IRQ_CLEAR>:

void IRQ_CLEAR(uint8_t number) // N ee
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	095b      	lsrs	r3, r3, #5
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <IRQ_CLEAR+0x44>)
 8000746:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <IRQ_CLEAR+0x48>)
 8000750:	6013      	str	r3, [r2, #0]
	*(NVIC_ICPR0+reg_select) = (0x1 << bit_select);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <IRQ_CLEAR+0x48>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2201      	movs	r2, #1
 8000758:	fa02 f103 	lsl.w	r1, r2, r3
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <IRQ_CLEAR+0x44>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	009a      	lsls	r2, r3, #2
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <IRQ_CLEAR+0x4c>)
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	200001e0 	.word	0x200001e0
 800077c:	200001e4 	.word	0x200001e4
 8000780:	e000e280 	.word	0xe000e280

08000784 <CLEAR_EXTI>:
	bit_select = number % check;
	*(NVIC_ISPR0+reg_select) = (0x1 << bit_select);
}

void CLEAR_EXTI(uint8_t number) // EXTI is for external hardware don't apply to clocks since internal hardware
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0x1 << number);
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <CLEAR_EXTI+0x2c>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <CLEAR_EXTI+0x2c>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6153      	str	r3, [r2, #20]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40013c00 	.word	0x40013c00

080007b4 <LCD_GPIO_Init>:
// However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	4b5a      	ldr	r3, [pc, #360]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	4a59      	ldr	r2, [pc, #356]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ca:	4b57      	ldr	r3, [pc, #348]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b53      	ldr	r3, [pc, #332]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a52      	ldr	r2, [pc, #328]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000928 <LCD_GPIO_Init+0x174>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b49      	ldr	r3, [pc, #292]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a44      	ldr	r2, [pc, #272]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b3e      	ldr	r3, [pc, #248]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3d      	ldr	r2, [pc, #244]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <LCD_GPIO_Init+0x174>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b37      	ldr	r3, [pc, #220]	@ (8000928 <LCD_GPIO_Init+0x174>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a36      	ldr	r2, [pc, #216]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000850:	f043 0320 	orr.w	r3, r3, #32
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0320 	and.w	r3, r3, #32
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <LCD_GPIO_Init+0x174>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <LCD_GPIO_Init+0x174>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800087e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000882:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800088c:	2302      	movs	r3, #2
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000890:	230e      	movs	r3, #14
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4824      	ldr	r0, [pc, #144]	@ (800092c <LCD_GPIO_Init+0x178>)
 800089c:	f002 fb22 	bl	8002ee4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80008a0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008a4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4820      	ldr	r0, [pc, #128]	@ (8000930 <LCD_GPIO_Init+0x17c>)
 80008ae:	f002 fb19 	bl	8002ee4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80008b2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481d      	ldr	r0, [pc, #116]	@ (8000934 <LCD_GPIO_Init+0x180>)
 80008c0:	f002 fb10 	bl	8002ee4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80008c4:	2348      	movs	r3, #72	@ 0x48
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481a      	ldr	r0, [pc, #104]	@ (8000938 <LCD_GPIO_Init+0x184>)
 80008d0:	f002 fb08 	bl	8002ee4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80008d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4816      	ldr	r0, [pc, #88]	@ (800093c <LCD_GPIO_Init+0x188>)
 80008e2:	f002 faff 	bl	8002ee4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80008e6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80008ea:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <LCD_GPIO_Init+0x18c>)
 80008f4:	f002 faf6 	bl	8002ee4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80008fc:	2309      	movs	r3, #9
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	480a      	ldr	r0, [pc, #40]	@ (8000930 <LCD_GPIO_Init+0x17c>)
 8000908:	f002 faec 	bl	8002ee4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800090c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <LCD_GPIO_Init+0x18c>)
 800091a:	f002 fae3 	bl	8002ee4 <HAL_GPIO_Init>
}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400
 8000934:	40020800 	.word	0x40020800
 8000938:	40020c00 	.word	0x40020c00
 800093c:	40021400 	.word	0x40021400
 8000940:	40021800 	.word	0x40021800

08000944 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	@ 0x40
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000952:	23f0      	movs	r3, #240	@ 0xf0
 8000954:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800095a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800095e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!!
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
	// IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format.
	// 2 bytes for each pixel
	pLayerCfg.Alpha = 255;
 8000964:	23ff      	movs	r3, #255	@ 0xff
 8000966:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <LTCD_Layer_Init+0x78>)
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000980:	23f0      	movs	r3, #240	@ 0xf0
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000984:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000988:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <LTCD_Layer_Init+0x7c>)
 80009a6:	f003 fe63 	bl	8004670 <HAL_LTDC_ConfigLayer>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80009b0:	f000 f956 	bl	8000c60 <LCD_Error_Handler>
	}
}
 80009b4:	bf00      	nop
 80009b6:	3740      	adds	r7, #64	@ 0x40
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200002c4 	.word	0x200002c4
 80009c0:	200001e8 	.word	0x200001e8

080009c4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80009c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <LTCD__Init+0xb0>)
 80009ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000a78 <LTCD__Init+0xb4>)
 80009cc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <LTCD__Init+0xb0>)
 80009d0:	2209      	movs	r2, #9
 80009d2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <LTCD__Init+0xb0>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <LTCD__Init+0xb0>)
 80009dc:	221d      	movs	r2, #29
 80009de:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80009e0:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <LTCD__Init+0xb0>)
 80009e2:	2203      	movs	r2, #3
 80009e4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <LTCD__Init+0xb0>)
 80009e8:	f240 120d 	movw	r2, #269	@ 0x10d
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <LTCD__Init+0xb0>)
 80009f0:	f240 1243 	movw	r2, #323	@ 0x143
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <LTCD__Init+0xb0>)
 80009f8:	f240 1217 	movw	r2, #279	@ 0x117
 80009fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a00:	f240 1247 	movw	r2, #327	@ 0x147
 8000a04:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a26:	22c0      	movs	r2, #192	@ 0xc0
 8000a28:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a38:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <LTCD__Init+0xb8>)
 8000a3a:	f004 fc73 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000a56:	f7ff fead 	bl	80007b4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <LTCD__Init+0xb0>)
 8000a5c:	f003 fd38 	bl	80044d0 <HAL_LTDC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a66:	f000 f8fb 	bl	8000c60 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a6a:	f000 ff4b 	bl	8001904 <ili9341_Init>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001e8 	.word	0x200001e8
 8000a78:	40016800 	.word	0x40016800
 8000a7c:	20000290 	.word	0x20000290

08000a80 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a92:	88ba      	ldrh	r2, [r7, #4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	1a9b      	subs	r3, r3, r2
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4905      	ldr	r1, [pc, #20]	@ (8000ab8 <LCD_Draw_Pixel+0x38>)
 8000aa4:	887a      	ldrh	r2, [r7, #2]
 8000aa6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200002c4 	.word	0x200002c4

08000abc <LCD_Clear>:
  }
}
#endif

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10e      	bne.n	8000af0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e007      	b.n	8000ae8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ad8:	4908      	ldr	r1, [pc, #32]	@ (8000afc <LCD_Clear+0x40>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	88ba      	ldrh	r2, [r7, #4]
 8000ade:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000aee:	d3f3      	bcc.n	8000ad8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	200002c4 	.word	0x200002c4

08000b00 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <LCD_SetTextColor+0x1c>)
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	8013      	strh	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20000000 	.word	0x20000000

08000b20 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <LCD_SetFont+0x1c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200002c0 	.word	0x200002c0

08000b40 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	603a      	str	r2, [r7, #0]
 8000b4a:	80fb      	strh	r3, [r7, #6]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	e04c      	b.n	8000bf8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	e03f      	b.n	8000be4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	889b      	ldrh	r3, [r3, #4]
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <LCD_Draw_Char+0xd4>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	2280      	movs	r2, #128	@ 0x80
 8000b84:	409a      	lsls	r2, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	fa42 f303 	asr.w	r3, r2, r3
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d104      	bne.n	8000b9c <LCD_Draw_Char+0x5c>
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	889b      	ldrh	r3, [r3, #4]
 8000b98:	2b0c      	cmp	r3, #12
 8000b9a:	d920      	bls.n	8000bde <LCD_Draw_Char+0x9e>
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	fa42 f303 	asr.w	r3, r2, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d104      	bne.n	8000bc0 <LCD_Draw_Char+0x80>
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	889b      	ldrh	r3, [r3, #4]
 8000bbc:	2b0c      	cmp	r3, #12
 8000bbe:	d80e      	bhi.n	8000bde <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b298      	uxth	r0, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <LCD_Draw_Char+0xd8>)
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f7ff ff51 	bl	8000a80 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	889b      	ldrh	r3, [r3, #4]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d3b8      	bcc.n	8000b64 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <LCD_Draw_Char+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	88db      	ldrh	r3, [r3, #6]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d3ab      	bcc.n	8000b5e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200002c0 	.word	0x200002c0
 8000c14:	aaaaaaab 	.word	0xaaaaaaab
 8000c18:	20000000 	.word	0x20000000

08000c1c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	460b      	mov	r3, r1
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	3b20      	subs	r3, #32
 8000c32:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <LCD_DisplayChar+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	4907      	ldr	r1, [pc, #28]	@ (8000c5c <LCD_DisplayChar+0x40>)
 8000c3e:	6809      	ldr	r1, [r1, #0]
 8000c40:	88c9      	ldrh	r1, [r1, #6]
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	441a      	add	r2, r3
 8000c4a:	88b9      	ldrh	r1, [r7, #4]
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff76 	bl	8000b40 <LCD_Draw_Char>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200002c0 	.word	0x200002c0

08000c60 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <LCD_Error_Handler+0x8>

08000c6c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c70:	f001 fc37 	bl	80024e2 <STMPE811_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d001      	beq.n	8000c7e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <InitializeLCDTouch+0xe>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f001 fce1 	bl	8002652 <STMPE811_ReadTouch>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <Start_Screen>:

// ************** Write your functions here **************


void Start_Screen(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff ff0a 	bl	8000abc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ca8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000cac:	f7ff ff28 	bl	8000b00 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000cb0:	4841      	ldr	r0, [pc, #260]	@ (8000db8 <Start_Screen+0x11c>)
 8000cb2:	f7ff ff35 	bl	8000b20 <LCD_SetFont>
	LCD_DisplayChar(35,10,'T');
 8000cb6:	2254      	movs	r2, #84	@ 0x54
 8000cb8:	210a      	movs	r1, #10
 8000cba:	2023      	movs	r0, #35	@ 0x23
 8000cbc:	f7ff ffae 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(65,10,'E');
 8000cc0:	2245      	movs	r2, #69	@ 0x45
 8000cc2:	210a      	movs	r1, #10
 8000cc4:	2041      	movs	r0, #65	@ 0x41
 8000cc6:	f7ff ffa9 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(95,10,'T');
 8000cca:	2254      	movs	r2, #84	@ 0x54
 8000ccc:	210a      	movs	r1, #10
 8000cce:	205f      	movs	r0, #95	@ 0x5f
 8000cd0:	f7ff ffa4 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(125,10,'R');
 8000cd4:	2252      	movs	r2, #82	@ 0x52
 8000cd6:	210a      	movs	r1, #10
 8000cd8:	207d      	movs	r0, #125	@ 0x7d
 8000cda:	f7ff ff9f 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(155,10,'I');
 8000cde:	2249      	movs	r2, #73	@ 0x49
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	209b      	movs	r0, #155	@ 0x9b
 8000ce4:	f7ff ff9a 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(185,10,'S');
 8000ce8:	2253      	movs	r2, #83	@ 0x53
 8000cea:	210a      	movs	r1, #10
 8000cec:	20b9      	movs	r0, #185	@ 0xb9
 8000cee:	f7ff ff95 	bl	8000c1c <LCD_DisplayChar>

	O_Shape(0, 60, 60, LCD_COLOR_YELLOW);
 8000cf2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000cf6:	223c      	movs	r2, #60	@ 0x3c
 8000cf8:	213c      	movs	r1, #60	@ 0x3c
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f85e 	bl	8000dbc <O_Shape>

	I_Shape(210, 0, 120, LCD_COLOR_CYAN);
 8000d00:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d04:	2278      	movs	r2, #120	@ 0x78
 8000d06:	2100      	movs	r1, #0
 8000d08:	20d2      	movs	r0, #210	@ 0xd2
 8000d0a:	f000 f88b 	bl	8000e24 <I_Shape>

	S_Shape(90, 90, 90, LCD_COLOR_RED);
 8000d0e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d12:	225a      	movs	r2, #90	@ 0x5a
 8000d14:	215a      	movs	r1, #90	@ 0x5a
 8000d16:	205a      	movs	r0, #90	@ 0x5a
 8000d18:	f000 f8ba 	bl	8000e90 <S_Shape>

	Z_Shape(0, 150 ,90, LCD_COLOR_GREEN);
 8000d1c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d20:	225a      	movs	r2, #90	@ 0x5a
 8000d22:	2196      	movs	r1, #150	@ 0x96
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f905 	bl	8000f34 <Z_Shape>

	L_Shape(0, 210, 90, LCD_COLOR_BLUE);
 8000d2a:	231f      	movs	r3, #31
 8000d2c:	225a      	movs	r2, #90	@ 0x5a
 8000d2e:	21d2      	movs	r1, #210	@ 0xd2
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f951 	bl	8000fd8 <L_Shape>

	J_Shape(210, 210, 90, LCD_COLOR_MAGENTA);
 8000d36:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000d3a:	225a      	movs	r2, #90	@ 0x5a
 8000d3c:	21d2      	movs	r1, #210	@ 0xd2
 8000d3e:	20d2      	movs	r0, #210	@ 0xd2
 8000d40:	f000 f9b6 	bl	80010b0 <J_Shape>

	T_Shape(150, 150, 90, LCD_COLOR_BLUE2);
 8000d44:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d48:	225a      	movs	r2, #90	@ 0x5a
 8000d4a:	2196      	movs	r1, #150	@ 0x96
 8000d4c:	2096      	movs	r0, #150	@ 0x96
 8000d4e:	f000 fa1b 	bl	8001188 <T_Shape>

	LCD_DisplayChar(35, 250, 'T');
 8000d52:	2254      	movs	r2, #84	@ 0x54
 8000d54:	21fa      	movs	r1, #250	@ 0xfa
 8000d56:	2023      	movs	r0, #35	@ 0x23
 8000d58:	f7ff ff60 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(65, 250, 'A');
 8000d5c:	2241      	movs	r2, #65	@ 0x41
 8000d5e:	21fa      	movs	r1, #250	@ 0xfa
 8000d60:	2041      	movs	r0, #65	@ 0x41
 8000d62:	f7ff ff5b 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(95, 250, 'P');
 8000d66:	2250      	movs	r2, #80	@ 0x50
 8000d68:	21fa      	movs	r1, #250	@ 0xfa
 8000d6a:	205f      	movs	r0, #95	@ 0x5f
 8000d6c:	f7ff ff56 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(155, 250, 'T');
 8000d70:	2254      	movs	r2, #84	@ 0x54
 8000d72:	21fa      	movs	r1, #250	@ 0xfa
 8000d74:	209b      	movs	r0, #155	@ 0x9b
 8000d76:	f7ff ff51 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(185, 250, 'O');
 8000d7a:	224f      	movs	r2, #79	@ 0x4f
 8000d7c:	21fa      	movs	r1, #250	@ 0xfa
 8000d7e:	20b9      	movs	r0, #185	@ 0xb9
 8000d80:	f7ff ff4c 	bl	8000c1c <LCD_DisplayChar>

	LCD_DisplayChar(65, 280, 'P');
 8000d84:	2250      	movs	r2, #80	@ 0x50
 8000d86:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d8a:	2041      	movs	r0, #65	@ 0x41
 8000d8c:	f7ff ff46 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(95, 280, 'L');
 8000d90:	224c      	movs	r2, #76	@ 0x4c
 8000d92:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d96:	205f      	movs	r0, #95	@ 0x5f
 8000d98:	f7ff ff40 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(125, 280, 'A');
 8000d9c:	2241      	movs	r2, #65	@ 0x41
 8000d9e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000da2:	207d      	movs	r0, #125	@ 0x7d
 8000da4:	f7ff ff3a 	bl	8000c1c <LCD_DisplayChar>
	LCD_DisplayChar(155, 280, 'Y');
 8000da8:	2259      	movs	r2, #89	@ 0x59
 8000daa:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000dae:	209b      	movs	r0, #155	@ 0x9b
 8000db0:	f7ff ff34 	bl	8000c1c <LCD_DisplayChar>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000134 	.word	0x20000134

08000dbc <O_Shape>:
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)

*/

void O_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81fb      	strh	r3, [r7, #14]
 8000dde:	e018      	b.n	8000e12 <O_Shape+0x56>
	{
		for (uint16_t ii = 0; ii < len; ii++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	81bb      	strh	r3, [r7, #12]
 8000de4:	e00e      	b.n	8000e04 <O_Shape+0x48>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 8000de6:	89fa      	ldrh	r2, [r7, #14]
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	4413      	add	r3, r2
 8000dec:	b298      	uxth	r0, r3
 8000dee:	89ba      	ldrh	r2, [r7, #12]
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	883a      	ldrh	r2, [r7, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fe41 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < len; ii++)
 8000dfe:	89bb      	ldrh	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	81bb      	strh	r3, [r7, #12]
 8000e04:	89ba      	ldrh	r2, [r7, #12]
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3ec      	bcc.n	8000de6 <O_Shape+0x2a>
	for (uint16_t i = 0; i < len; i++)
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	81fb      	strh	r3, [r7, #14]
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3e2      	bcc.n	8000de0 <O_Shape+0x24>
		}
	}

}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <I_Shape>:
void I_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	4611      	mov	r1, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	4623      	mov	r3, r4
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	4603      	mov	r3, r0
 8000e38:	80bb      	strh	r3, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len/4; i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	81fb      	strh	r3, [r7, #14]
 8000e46:	e018      	b.n	8000e7a <I_Shape+0x56>
	{
		for (uint16_t ii = 0; ii < len; ii++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	81bb      	strh	r3, [r7, #12]
 8000e4c:	e00e      	b.n	8000e6c <I_Shape+0x48>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 8000e4e:	89fa      	ldrh	r2, [r7, #14]
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4413      	add	r3, r2
 8000e54:	b298      	uxth	r0, r3
 8000e56:	89ba      	ldrh	r2, [r7, #12]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	883a      	ldrh	r2, [r7, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fe0d 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < len; ii++)
 8000e66:	89bb      	ldrh	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	81bb      	strh	r3, [r7, #12]
 8000e6c:	89ba      	ldrh	r2, [r7, #12]
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3ec      	bcc.n	8000e4e <I_Shape+0x2a>
	for (uint16_t i = 0; i < len/4; i++)
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	3301      	adds	r3, #1
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	89fa      	ldrh	r2, [r7, #14]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d3e0      	bcc.n	8000e48 <I_Shape+0x24>
		}
	}
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}

08000e90 <S_Shape>:
void S_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4604      	mov	r4, r0
 8000e98:	4608      	mov	r0, r1
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < 2; i++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	81fb      	strh	r3, [r7, #14]
 8000eb2:	e033      	b.n	8000f1c <S_Shape+0x8c>
	{
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81bb      	strh	r3, [r7, #12]
 8000eb8:	e01d      	b.n	8000ef6 <S_Shape+0x66>
		{
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	817b      	strh	r3, [r7, #10]
 8000ebe:	e00e      	b.n	8000ede <S_Shape+0x4e>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 8000ec0:	89ba      	ldrh	r2, [r7, #12]
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b298      	uxth	r0, r3
 8000ec8:	897a      	ldrh	r2, [r7, #10]
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	883a      	ldrh	r2, [r7, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fdd4 	bl	8000a80 <LCD_Draw_Pixel>
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000ed8:	897b      	ldrh	r3, [r7, #10]
 8000eda:	3301      	adds	r3, #1
 8000edc:	817b      	strh	r3, [r7, #10]
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <S_Shape+0x9c>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	897a      	ldrh	r2, [r7, #10]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d3e7      	bcc.n	8000ec0 <S_Shape+0x30>
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000ef0:	89bb      	ldrh	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	81bb      	strh	r3, [r7, #12]
 8000ef6:	89ba      	ldrh	r2, [r7, #12]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	490c      	ldr	r1, [pc, #48]	@ (8000f30 <S_Shape+0xa0>)
 8000efe:	fb81 0103 	smull	r0, r1, r1, r3
 8000f02:	17db      	asrs	r3, r3, #31
 8000f04:	1acb      	subs	r3, r1, r3
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbd7      	blt.n	8000eba <S_Shape+0x2a>
			}
		}
		x=x+BLOCK;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	331e      	adds	r3, #30
 8000f0e:	80fb      	strh	r3, [r7, #6]
		y=y-BLOCK;
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	3b1e      	subs	r3, #30
 8000f14:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < 2; i++)
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	81fb      	strh	r3, [r7, #14]
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d9c8      	bls.n	8000eb4 <S_Shape+0x24>
	}
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	aaaaaaab 	.word	0xaaaaaaab
 8000f30:	55555556 	.word	0x55555556

08000f34 <Z_Shape>:
void Z_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	80fb      	strh	r3, [r7, #6]
 8000f46:	4603      	mov	r3, r0
 8000f48:	80bb      	strh	r3, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < 2; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	81fb      	strh	r3, [r7, #14]
 8000f56:	e033      	b.n	8000fc0 <Z_Shape+0x8c>
	{
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81bb      	strh	r3, [r7, #12]
 8000f5c:	e01d      	b.n	8000f9a <Z_Shape+0x66>
		{
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	817b      	strh	r3, [r7, #10]
 8000f62:	e00e      	b.n	8000f82 <Z_Shape+0x4e>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	897a      	ldrh	r2, [r7, #10]
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	883a      	ldrh	r2, [r7, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fd82 	bl	8000a80 <LCD_Draw_Pixel>
			for (uint16_t iii = 0; iii < len/3; iii++)
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	817b      	strh	r3, [r7, #10]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <Z_Shape+0x9c>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	085b      	lsrs	r3, r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	897a      	ldrh	r2, [r7, #10]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3e7      	bcc.n	8000f64 <Z_Shape+0x30>
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8000f94:	89bb      	ldrh	r3, [r7, #12]
 8000f96:	3301      	adds	r3, #1
 8000f98:	81bb      	strh	r3, [r7, #12]
 8000f9a:	89ba      	ldrh	r2, [r7, #12]
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <Z_Shape+0xa0>)
 8000fa2:	fb81 0103 	smull	r0, r1, r1, r3
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	429a      	cmp	r2, r3
 8000fac:	dbd7      	blt.n	8000f5e <Z_Shape+0x2a>
			}
		}
		x=x+BLOCK;
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	331e      	adds	r3, #30
 8000fb2:	80fb      	strh	r3, [r7, #6]
		y=y+BLOCK;
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	331e      	adds	r3, #30
 8000fb8:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < 2; i++)
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d9c8      	bls.n	8000f58 <Z_Shape+0x24>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	aaaaaaab 	.word	0xaaaaaaab
 8000fd4:	55555556 	.word	0x55555556

08000fd8 <L_Shape>:
void L_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	80fb      	strh	r3, [r7, #6]
 8000fea:	4603      	mov	r3, r0
 8000fec:	80bb      	strh	r3, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	803b      	strh	r3, [r7, #0]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	e018      	b.n	800102e <L_Shape+0x56>
	{
		for (uint16_t iii = 0 ;iii < len; iii++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	81bb      	strh	r3, [r7, #12]
 8001000:	e00e      	b.n	8001020 <L_Shape+0x48>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 8001002:	89fa      	ldrh	r2, [r7, #14]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4413      	add	r3, r2
 8001008:	b298      	uxth	r0, r3
 800100a:	89ba      	ldrh	r2, [r7, #12]
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	b29b      	uxth	r3, r3
 8001012:	883a      	ldrh	r2, [r7, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fd33 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len; iii++)
 800101a:	89bb      	ldrh	r3, [r7, #12]
 800101c:	3301      	adds	r3, #1
 800101e:	81bb      	strh	r3, [r7, #12]
 8001020:	89ba      	ldrh	r2, [r7, #12]
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3ec      	bcc.n	8001002 <L_Shape+0x2a>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	3301      	adds	r3, #1
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	4a1e      	ldr	r2, [pc, #120]	@ (80010ac <L_Shape+0xd4>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	89fa      	ldrh	r2, [r7, #14]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3dd      	bcc.n	8000ffc <L_Shape+0x24>
		}
	}
	x= x + BLOCK;
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	331e      	adds	r3, #30
 8001044:	80fb      	strh	r3, [r7, #6]
	y= y + 2*BLOCK;
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	333c      	adds	r3, #60	@ 0x3c
 800104a:	80bb      	strh	r3, [r7, #4]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 800104c:	2300      	movs	r3, #0
 800104e:	817b      	strh	r3, [r7, #10]
 8001050:	e01d      	b.n	800108e <L_Shape+0xb6>
	{
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001052:	2300      	movs	r3, #0
 8001054:	813b      	strh	r3, [r7, #8]
 8001056:	e00e      	b.n	8001076 <L_Shape+0x9e>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 8001058:	897a      	ldrh	r2, [r7, #10]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4413      	add	r3, r2
 800105e:	b298      	uxth	r0, r3
 8001060:	893a      	ldrh	r2, [r7, #8]
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	b29b      	uxth	r3, r3
 8001068:	883a      	ldrh	r2, [r7, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd08 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001070:	893b      	ldrh	r3, [r7, #8]
 8001072:	3301      	adds	r3, #1
 8001074:	813b      	strh	r3, [r7, #8]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <L_Shape+0xd4>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	b29b      	uxth	r3, r3
 8001082:	893a      	ldrh	r2, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3e7      	bcc.n	8001058 <L_Shape+0x80>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	3301      	adds	r3, #1
 800108c:	817b      	strh	r3, [r7, #10]
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <L_Shape+0xd4>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	897a      	ldrh	r2, [r7, #10]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3d8      	bcc.n	8001052 <L_Shape+0x7a>
		}
	}



}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	aaaaaaab 	.word	0xaaaaaaab

080010b0 <J_Shape>:
void J_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	4603      	mov	r3, r0
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	803b      	strh	r3, [r7, #0]
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	81fb      	strh	r3, [r7, #14]
 80010d2:	e018      	b.n	8001106 <J_Shape+0x56>
	{
		for ( uint16_t iii = 0 ;iii < len; iii++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	81bb      	strh	r3, [r7, #12]
 80010d8:	e00e      	b.n	80010f8 <J_Shape+0x48>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4413      	add	r3, r2
 80010e0:	b298      	uxth	r0, r3
 80010e2:	89ba      	ldrh	r2, [r7, #12]
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	883a      	ldrh	r2, [r7, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fcc7 	bl	8000a80 <LCD_Draw_Pixel>
		for ( uint16_t iii = 0 ;iii < len; iii++)
 80010f2:	89bb      	ldrh	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	81bb      	strh	r3, [r7, #12]
 80010f8:	89ba      	ldrh	r2, [r7, #12]
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3ec      	bcc.n	80010da <J_Shape+0x2a>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	3301      	adds	r3, #1
 8001104:	81fb      	strh	r3, [r7, #14]
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	4a1e      	ldr	r2, [pc, #120]	@ (8001184 <J_Shape+0xd4>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	085b      	lsrs	r3, r3, #1
 8001110:	b29b      	uxth	r3, r3
 8001112:	89fa      	ldrh	r2, [r7, #14]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3dd      	bcc.n	80010d4 <J_Shape+0x24>
		}
	}

	x=x - BLOCK;
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	3b1e      	subs	r3, #30
 800111c:	80fb      	strh	r3, [r7, #6]
	y=y + 2*BLOCK;
 800111e:	88bb      	ldrh	r3, [r7, #4]
 8001120:	333c      	adds	r3, #60	@ 0x3c
 8001122:	80bb      	strh	r3, [r7, #4]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001124:	2300      	movs	r3, #0
 8001126:	817b      	strh	r3, [r7, #10]
 8001128:	e01d      	b.n	8001166 <J_Shape+0xb6>
	{
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 800112a:	2300      	movs	r3, #0
 800112c:	813b      	strh	r3, [r7, #8]
 800112e:	e00e      	b.n	800114e <J_Shape+0x9e>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 8001130:	897a      	ldrh	r2, [r7, #10]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4413      	add	r3, r2
 8001136:	b298      	uxth	r0, r3
 8001138:	893a      	ldrh	r2, [r7, #8]
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fc9c 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	813b      	strh	r3, [r7, #8]
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <J_Shape+0xd4>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	893a      	ldrh	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3e7      	bcc.n	8001130 <J_Shape+0x80>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001160:	897b      	ldrh	r3, [r7, #10]
 8001162:	3301      	adds	r3, #1
 8001164:	817b      	strh	r3, [r7, #10]
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <J_Shape+0xd4>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	897a      	ldrh	r2, [r7, #10]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3d8      	bcc.n	800112a <J_Shape+0x7a>
		}

	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	aaaaaaab 	.word	0xaaaaaaab

08001188 <T_Shape>:
void T_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4604      	mov	r4, r0
 8001190:	4608      	mov	r0, r1
 8001192:	4611      	mov	r1, r2
 8001194:	461a      	mov	r2, r3
 8001196:	4623      	mov	r3, r4
 8001198:	80fb      	strh	r3, [r7, #6]
 800119a:	4603      	mov	r3, r0
 800119c:	80bb      	strh	r3, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	807b      	strh	r3, [r7, #2]
 80011a2:	4613      	mov	r3, r2
 80011a4:	803b      	strh	r3, [r7, #0]
	static uint16_t ii = 0;

	for (uint16_t i = 0 ;i < 2; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	81fb      	strh	r3, [r7, #14]
 80011aa:	e032      	b.n	8001212 <T_Shape+0x8a>
	{
		for ( ;ii < len; ii++)
		{
			for (uint16_t iii = 0 ;iii < len/3; iii++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	81bb      	strh	r3, [r7, #12]
 80011b0:	e00f      	b.n	80011d2 <T_Shape+0x4a>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <T_Shape+0x9c>)
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4413      	add	r3, r2
 80011ba:	b298      	uxth	r0, r3
 80011bc:	89ba      	ldrh	r2, [r7, #12]
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	883a      	ldrh	r2, [r7, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc5a 	bl	8000a80 <LCD_Draw_Pixel>
			for (uint16_t iii = 0 ;iii < len/3; iii++)
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	81bb      	strh	r3, [r7, #12]
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <T_Shape+0xa0>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	b29b      	uxth	r3, r3
 80011de:	89ba      	ldrh	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3e6      	bcc.n	80011b2 <T_Shape+0x2a>
		for ( ;ii < len; ii++)
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <T_Shape+0x9c>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <T_Shape+0x9c>)
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <T_Shape+0x9c>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d8d8      	bhi.n	80011ac <T_Shape+0x24>
			}
		}
		x=x-BLOCK;
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	3b1e      	subs	r3, #30
 80011fe:	80fb      	strh	r3, [r7, #6]
		y=y+BLOCK;
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	331e      	adds	r3, #30
 8001204:	80bb      	strh	r3, [r7, #4]
		ii = 2*BLOCK;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <T_Shape+0x9c>)
 8001208:	223c      	movs	r2, #60	@ 0x3c
 800120a:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0 ;i < 2; i++)
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	3301      	adds	r3, #1
 8001210:	81fb      	strh	r3, [r7, #14]
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d9eb      	bls.n	80011f0 <T_Shape+0x68>
	}
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	bf00      	nop
 8001224:	20025ac4 	.word	0x20025ac4
 8001228:	aaaaaaab 	.word	0xaaaaaaab

0800122c <Draw_Block>:

void Draw_Block(uint16_t x, uint16_t y, uint16_t color)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	460b      	mov	r3, r1
 8001238:	80bb      	strh	r3, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i < 20; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	81fb      	strh	r3, [r7, #14]
 8001242:	e017      	b.n	8001274 <Draw_Block+0x48>
	{
		for (uint16_t ii = 0; ii < 20; ii++)
 8001244:	2300      	movs	r3, #0
 8001246:	81bb      	strh	r3, [r7, #12]
 8001248:	e00e      	b.n	8001268 <Draw_Block+0x3c>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 800124a:	89fa      	ldrh	r2, [r7, #14]
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4413      	add	r3, r2
 8001250:	b298      	uxth	r0, r3
 8001252:	89ba      	ldrh	r2, [r7, #12]
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc0f 	bl	8000a80 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < 20; ii++)
 8001262:	89bb      	ldrh	r3, [r7, #12]
 8001264:	3301      	adds	r3, #1
 8001266:	81bb      	strh	r3, [r7, #12]
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	2b13      	cmp	r3, #19
 800126c:	d9ed      	bls.n	800124a <Draw_Block+0x1e>
	for (uint16_t i = 0; i < 20; i++)
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	3301      	adds	r3, #1
 8001272:	81fb      	strh	r3, [r7, #14]
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	2b13      	cmp	r3, #19
 8001278:	d9e4      	bls.n	8001244 <Draw_Block+0x18>
		}
	}
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <RNG_Init>:
static RNG_HandleTypeDef hrng;

// HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng);

void RNG_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <RNG_Init+0x4c>)
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001292:	4a0f      	ldr	r2, [pc, #60]	@ (80012d0 <RNG_Init+0x4c>)
 8001294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001298:	6353      	str	r3, [r2, #52]	@ 0x34
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <RNG_Init+0x4c>)
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

	 hrng.Instance = RNG;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <RNG_Init+0x50>)
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <RNG_Init+0x54>)
 80012aa:	601a      	str	r2, [r3, #0]
	 rngHALStatus = HAL_RNG_Init(&hrng);
 80012ac:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <RNG_Init+0x50>)
 80012ae:	f004 f9f9 	bl	80056a4 <HAL_RNG_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <RNG_Init+0x58>)
 80012b8:	701a      	strb	r2, [r3, #0]
		if(rngHALStatus != HAL_OK)
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <RNG_Init+0x58>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <RNG_Init+0x42>
			{
				for(;;);
 80012c2:	bf00      	nop
 80012c4:	e7fd      	b.n	80012c2 <RNG_Init+0x3e>
			}

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	20025ac8 	.word	0x20025ac8
 80012d8:	50060800 	.word	0x50060800
 80012dc:	20025ac6 	.word	0x20025ac6

080012e0 <Gen_Number>:

uint32_t Gen_Number(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	uint32_t randomNumber;

	 rngHALStatus = HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <Gen_Number+0x30>)
 80012ec:	f004 fa04 	bl	80056f8 <HAL_RNG_GenerateRandomNumber>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <Gen_Number+0x34>)
 80012f6:	701a      	strb	r2, [r3, #0]
		if(rngHALStatus != HAL_OK)
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <Gen_Number+0x34>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <Gen_Number+0x24>
			{
				for(;;);
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Gen_Number+0x20>
			}
	return randomNumber;
 8001304:	687b      	ldr	r3, [r7, #4]

}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20025ac8 	.word	0x20025ac8
 8001314:	20025ac6 	.word	0x20025ac6

08001318 <addSchedulerEvent>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event; // Is this what we want?
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <addSchedulerEvent+0x20>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	@ (8001338 <addSchedulerEvent+0x20>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20025ad8 	.word	0x20025ad8

0800133c <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event; // Is this what we want?
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	43da      	mvns	r2, r3
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <removeSchedulerEvent+0x24>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4013      	ands	r3, r2
 800134e:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <removeSchedulerEvent+0x24>)
 8001350:	6013      	str	r3, [r2, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20025ad8 	.word	0x20025ad8

08001364 <getScheduledEvents>:

uint32_t getScheduledEvents(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <getScheduledEvents+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20025ad8 	.word	0x20025ad8

0800137c <Start_Tetris>:
};

static uint8_t Ran_Numb;

void Start_Tetris(void)
{
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0

	Ran_Numb = Random_Shape();
 8001380:	f000 f902 	bl	8001588 <Random_Shape>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <Start_Tetris+0xf0>)
 800138a:	701a      	strb	r2, [r3, #0]

	block_struct.x_pos = 4;
 800138c:	4b38      	ldr	r3, [pc, #224]	@ (8001470 <Start_Tetris+0xf4>)
 800138e:	2204      	movs	r2, #4
 8001390:	821a      	strh	r2, [r3, #16]
	block_struct.y_pos=0;
 8001392:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <Start_Tetris+0xf4>)
 8001394:	2200      	movs	r2, #0
 8001396:	825a      	strh	r2, [r3, #18]


             	switch(Ran_Numb)
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <Start_Tetris+0xf0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b06      	cmp	r3, #6
 800139e:	d85d      	bhi.n	800145c <Start_Tetris+0xe0>
 80013a0:	a201      	add	r2, pc, #4	@ (adr r2, 80013a8 <Start_Tetris+0x2c>)
 80013a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a6:	bf00      	nop
 80013a8:	080013c5 	.word	0x080013c5
 80013ac:	080013db 	.word	0x080013db
 80013b0:	080013f1 	.word	0x080013f1
 80013b4:	08001407 	.word	0x08001407
 80013b8:	0800141d 	.word	0x0800141d
 80013bc:	08001431 	.word	0x08001431
 80013c0:	08001447 	.word	0x08001447
	{
	case 0:
		memcpy(block_struct.Current_Shape, O, sizeof(block_struct.Current_Shape));
 80013c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001470 <Start_Tetris+0xf4>)
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <Start_Tetris+0xf8>)
 80013c8:	4614      	mov	r4, r2
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_YELLOW;
 80013d0:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <Start_Tetris+0xf4>)
 80013d2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013d6:	829a      	strh	r2, [r3, #20]
		break;
 80013d8:	e040      	b.n	800145c <Start_Tetris+0xe0>

	case 1:
		memcpy(block_struct.Current_Shape, I, sizeof(block_struct.Current_Shape));
 80013da:	4a25      	ldr	r2, [pc, #148]	@ (8001470 <Start_Tetris+0xf4>)
 80013dc:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <Start_Tetris+0xfc>)
 80013de:	4614      	mov	r4, r2
 80013e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_CYAN;
 80013e6:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <Start_Tetris+0xf4>)
 80013e8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013ec:	829a      	strh	r2, [r3, #20]
		break;
 80013ee:	e035      	b.n	800145c <Start_Tetris+0xe0>

	case 2:
		memcpy(block_struct.Current_Shape, S, sizeof(block_struct.Current_Shape));
 80013f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001470 <Start_Tetris+0xf4>)
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <Start_Tetris+0x100>)
 80013f4:	4614      	mov	r4, r2
 80013f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_RED;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <Start_Tetris+0xf4>)
 80013fe:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001402:	829a      	strh	r2, [r3, #20]
		break;
 8001404:	e02a      	b.n	800145c <Start_Tetris+0xe0>

	case 3:
		memcpy(block_struct.Current_Shape, Z, sizeof(block_struct.Current_Shape));
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <Start_Tetris+0xf4>)
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <Start_Tetris+0x104>)
 800140a:	4614      	mov	r4, r2
 800140c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800140e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_GREEN;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <Start_Tetris+0xf4>)
 8001414:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001418:	829a      	strh	r2, [r3, #20]
		break;
 800141a:	e01f      	b.n	800145c <Start_Tetris+0xe0>

	case 4:
		memcpy(block_struct.Current_Shape, L, sizeof(block_struct.Current_Shape));
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <Start_Tetris+0xf4>)
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <Start_Tetris+0x108>)
 8001420:	4614      	mov	r4, r2
 8001422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_BLUE;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <Start_Tetris+0xf4>)
 800142a:	221f      	movs	r2, #31
 800142c:	829a      	strh	r2, [r3, #20]
		break;
 800142e:	e015      	b.n	800145c <Start_Tetris+0xe0>

	case 5:
		memcpy(block_struct.Current_Shape, J, sizeof(block_struct.Current_Shape));
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <Start_Tetris+0xf4>)
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <Start_Tetris+0x10c>)
 8001434:	4614      	mov	r4, r2
 8001436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_MAGENTA;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <Start_Tetris+0xf4>)
 800143e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001442:	829a      	strh	r2, [r3, #20]
		break;
 8001444:	e00a      	b.n	800145c <Start_Tetris+0xe0>

	case 6:
		memcpy(block_struct.Current_Shape, T, sizeof(block_struct.Current_Shape));
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <Start_Tetris+0xf4>)
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <Start_Tetris+0x110>)
 800144a:	4614      	mov	r4, r2
 800144c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_BLUE2;
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <Start_Tetris+0xf4>)
 8001454:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001458:	829a      	strh	r2, [r3, #20]
		break;
 800145a:	bf00      	nop
	}

	Draw_Shape(&block_struct);
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <Start_Tetris+0xf4>)
 800145e:	f000 f817 	bl	8001490 <Draw_Shape>
	TIMER_Int_Start();
 8001462:	f000 fa23 	bl	80018ac <TIMER_Int_Start>

}
 8001466:	bf00      	nop
 8001468:	bd98      	pop	{r3, r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	20025af2 	.word	0x20025af2
 8001470:	20025adc 	.word	0x20025adc
 8001474:	20000004 	.word	0x20000004
 8001478:	20000014 	.word	0x20000014
 800147c:	20000024 	.word	0x20000024
 8001480:	20000034 	.word	0x20000034
 8001484:	20000044 	.word	0x20000044
 8001488:	20000054 	.word	0x20000054
 800148c:	20000064 	.word	0x20000064

08001490 <Draw_Shape>:

void Draw_Shape(block_t* block)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

	// If any element in the row is 1 then draw block @ x_start+i and y_start

	// If any element in the next colm then draw block @ x_start+i and y_start+j // i may very well be 0 cause far left

	for (uint16_t j = 0; j < 4; j++)
 8001498:	2300      	movs	r3, #0
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	e02d      	b.n	80014fa <Draw_Shape+0x6a>
	{
		for (uint16_t i = 0; i < 4; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	81bb      	strh	r3, [r7, #12]
 80014a2:	e024      	b.n	80014ee <Draw_Shape+0x5e>
		{
			if((block->Current_Shape)[j][i] == 1)
 80014a4:	89fa      	ldrh	r2, [r7, #14]
 80014a6:	89bb      	ldrh	r3, [r7, #12]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	440a      	add	r2, r1
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d118      	bne.n	80014e8 <Draw_Shape+0x58>
			{
				Draw_Block((block->x_pos+i)*20, (block->y_pos+j)*20, block->Current_Color);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	8a1a      	ldrh	r2, [r3, #16]
 80014ba:	89bb      	ldrh	r3, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	b298      	uxth	r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	8a5a      	ldrh	r2, [r3, #18]
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	b299      	uxth	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8a9b      	ldrh	r3, [r3, #20]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f7ff fea2 	bl	800122c <Draw_Block>
		for (uint16_t i = 0; i < 4; i++)
 80014e8:	89bb      	ldrh	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	81bb      	strh	r3, [r7, #12]
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d9d7      	bls.n	80014a4 <Draw_Shape+0x14>
	for (uint16_t j = 0; j < 4; j++)
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	3301      	adds	r3, #1
 80014f8:	81fb      	strh	r3, [r7, #14]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d9ce      	bls.n	800149e <Draw_Shape+0xe>

			}
		}
	}
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <Update_Board>:
//TODO: Got an Error when I did block_t* block then did switch(block->Current_Shape) so decided to do
//TODO: Void for input then did an instance!
void Update_Board(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t j;


	for (i = 0; i < 4; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	e028      	b.n	800156a <Update_Board+0x5e>
	{
		for (j = 0; j < 4; j++)
 8001518:	2300      	movs	r3, #0
 800151a:	71bb      	strb	r3, [r7, #6]
 800151c:	e01f      	b.n	800155e <Update_Board+0x52>
		{
			if (block_struct.Current_Shape[i][j] == 1)
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	4917      	ldr	r1, [pc, #92]	@ (8001580 <Update_Board+0x74>)
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	440a      	add	r2, r1
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d113      	bne.n	8001558 <Update_Board+0x4c>
			{
				Board[(block_struct.y_pos) + i-1][block_struct.x_pos + j] = 1;
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <Update_Board+0x74>)
 8001532:	8a5b      	ldrh	r3, [r3, #18]
 8001534:	461a      	mov	r2, r3
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4413      	add	r3, r2
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <Update_Board+0x74>)
 800153e:	8a1b      	ldrh	r3, [r3, #16]
 8001540:	4619      	mov	r1, r3
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	4419      	add	r1, r3
 8001546:	480f      	ldr	r0, [pc, #60]	@ (8001584 <Update_Board+0x78>)
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	440b      	add	r3, r1
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 4; j++)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	3301      	adds	r3, #1
 800155c:	71bb      	strb	r3, [r7, #6]
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d9dc      	bls.n	800151e <Update_Board+0x12>
	for (i = 0; i < 4; i++)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	3301      	adds	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d9d3      	bls.n	8001518 <Update_Board+0xc>
//
//
//
//			break;
//	}
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20025adc 	.word	0x20025adc
 8001584:	20000074 	.word	0x20000074

08001588 <Random_Shape>:



uint8_t Random_Shape(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	uint32_t random = Gen_Number();
 800158e:	f7ff fea7 	bl	80012e0 <Gen_Number>
 8001592:	6078      	str	r0, [r7, #4]
	random = random % SEVEN;
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <Random_Shape+0x34>)
 8001598:	fba3 1302 	umull	r1, r3, r3, r2
 800159c:	1ad1      	subs	r1, r2, r3
 800159e:	0849      	lsrs	r1, r1, #1
 80015a0:	440b      	add	r3, r1
 80015a2:	0899      	lsrs	r1, r3, #2
 80015a4:	460b      	mov	r3, r1
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a5b      	subs	r3, r3, r1
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	607b      	str	r3, [r7, #4]
	return random;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	b2db      	uxtb	r3, r3
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	24924925 	.word	0x24924925

080015c0 <Rotate_CC>:

void Rotate_CC(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
	if( Check_Down() == true )
 80015c6:	f000 f865 	bl	8001694 <Check_Down>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d05a      	beq.n	8001686 <Rotate_CC+0xc6>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <Rotate_CC+0xd0>)
 80015d2:	8a9b      	ldrh	r3, [r3, #20]
 80015d4:	827b      	strh	r3, [r7, #18]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <Rotate_CC+0xd0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 80015dc:	482c      	ldr	r0, [pc, #176]	@ (8001690 <Rotate_CC+0xd0>)
 80015de:	f7ff ff57 	bl	8001490 <Draw_Shape>
		block_struct.Current_Color = temp_color;
 80015e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001690 <Rotate_CC+0xd0>)
 80015e4:	8a7b      	ldrh	r3, [r7, #18]
 80015e6:	8293      	strh	r3, [r2, #20]

		uint8_t temp[4][4] = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
		// Flip the matrix clockwise using nested loops
		for (uint8_t i = 0; i < 4; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	75fb      	strb	r3, [r7, #23]
 80015f8:	e01d      	b.n	8001636 <Rotate_CC+0x76>
		{
			for (uint8_t j = 0; j < 4; j++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	75bb      	strb	r3, [r7, #22]
 80015fe:	e014      	b.n	800162a <Rotate_CC+0x6a>
			{
				temp[j][4 - i - 1] = (block_struct.Current_Shape)[i][j];
 8001600:	7df8      	ldrb	r0, [r7, #23]
 8001602:	7db9      	ldrb	r1, [r7, #22]
 8001604:	7dba      	ldrb	r2, [r7, #22]
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	f1c3 0303 	rsb	r3, r3, #3
 800160c:	4c20      	ldr	r4, [pc, #128]	@ (8001690 <Rotate_CC+0xd0>)
 800160e:	0080      	lsls	r0, r0, #2
 8001610:	4420      	add	r0, r4
 8001612:	4401      	add	r1, r0
 8001614:	7809      	ldrb	r1, [r1, #0]
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	3218      	adds	r2, #24
 800161a:	443a      	add	r2, r7
 800161c:	4413      	add	r3, r2
 800161e:	3b18      	subs	r3, #24
 8001620:	460a      	mov	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4; j++)
 8001624:	7dbb      	ldrb	r3, [r7, #22]
 8001626:	3301      	adds	r3, #1
 8001628:	75bb      	strb	r3, [r7, #22]
 800162a:	7dbb      	ldrb	r3, [r7, #22]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d9e7      	bls.n	8001600 <Rotate_CC+0x40>
		for (uint8_t i = 0; i < 4; i++)
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	3301      	adds	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d9de      	bls.n	80015fa <Rotate_CC+0x3a>
			}
		}

		// Copy result back to mat
		for (uint8_t i = 0; i < 4; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	757b      	strb	r3, [r7, #21]
 8001640:	e01b      	b.n	800167a <Rotate_CC+0xba>
		{
			for (uint8_t j = 0; j < 4; j++)
 8001642:	2300      	movs	r3, #0
 8001644:	753b      	strb	r3, [r7, #20]
 8001646:	e012      	b.n	800166e <Rotate_CC+0xae>
			{
				(block_struct.Current_Shape)[i][j] = temp[i][j];
 8001648:	7d78      	ldrb	r0, [r7, #21]
 800164a:	7d39      	ldrb	r1, [r7, #20]
 800164c:	7d7a      	ldrb	r2, [r7, #21]
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	0080      	lsls	r0, r0, #2
 8001652:	3018      	adds	r0, #24
 8001654:	4438      	add	r0, r7
 8001656:	4401      	add	r1, r0
 8001658:	3918      	subs	r1, #24
 800165a:	7808      	ldrb	r0, [r1, #0]
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <Rotate_CC+0xd0>)
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	440a      	add	r2, r1
 8001662:	4413      	add	r3, r2
 8001664:	4602      	mov	r2, r0
 8001666:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4; j++)
 8001668:	7d3b      	ldrb	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	753b      	strb	r3, [r7, #20]
 800166e:	7d3b      	ldrb	r3, [r7, #20]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d9e9      	bls.n	8001648 <Rotate_CC+0x88>
		for (uint8_t i = 0; i < 4; i++)
 8001674:	7d7b      	ldrb	r3, [r7, #21]
 8001676:	3301      	adds	r3, #1
 8001678:	757b      	strb	r3, [r7, #21]
 800167a:	7d7b      	ldrb	r3, [r7, #21]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d9e0      	bls.n	8001642 <Rotate_CC+0x82>
			}
		}

		Draw_Shape(&block_struct);
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <Rotate_CC+0xd0>)
 8001682:	f7ff ff05 	bl	8001490 <Draw_Shape>
	{

	}


}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	bf00      	nop
 8001690:	20025adc 	.word	0x20025adc

08001694 <Check_Down>:
bool Check_Down(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	uint8_t lowest_row=0;
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	71bb      	strb	r3, [r7, #6]
	uint8_t j = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	717b      	strb	r3, [r7, #5]

	for ( i = 3; i > -1; i--)
 80016a6:	2303      	movs	r3, #3
 80016a8:	71bb      	strb	r3, [r7, #6]
		{
			for ( j = 0; j < 4; j++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	717b      	strb	r3, [r7, #5]
 80016ae:	e016      	b.n	80016de <Check_Down+0x4a>
			{
				// Find the lowest row that has element equal to 1 because then when checking
				// the board I can just check Board[(block_struct.y_pos)-lowest_row]
				if( (block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 80016b0:	79ba      	ldrb	r2, [r7, #6]
 80016b2:	797b      	ldrb	r3, [r7, #5]
 80016b4:	4929      	ldr	r1, [pc, #164]	@ (800175c <Check_Down+0xc8>)
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	440a      	add	r2, r1
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <Check_Down+0x44>
 80016c2:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <Check_Down+0xcc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <Check_Down+0x44>
				{
					LOWRFLAG = 0;
 80016cc:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <Check_Down+0xcc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
					lowest_row = i;
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	71fb      	strb	r3, [r7, #7]
					break;
 80016d6:	e005      	b.n	80016e4 <Check_Down+0x50>
			for ( j = 0; j < 4; j++)
 80016d8:	797b      	ldrb	r3, [r7, #5]
 80016da:	3301      	adds	r3, #1
 80016dc:	717b      	strb	r3, [r7, #5]
 80016de:	797b      	ldrb	r3, [r7, #5]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d9e5      	bls.n	80016b0 <Check_Down+0x1c>
				}
			}
			if (LOWRFLAG == 0)
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <Check_Down+0xcc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <Check_Down+0x62>
	for ( i = 3; i > -1; i--)
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	71bb      	strb	r3, [r7, #6]
			for ( j = 0; j < 4; j++)
 80016f4:	e7d9      	b.n	80016aa <Check_Down+0x16>
			{
				break;
 80016f6:	bf00      	nop
			}
		}

	if ( LOWRFLAG == 0)
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <Check_Down+0xcc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d124      	bne.n	800174c <Check_Down+0xb8>
	{
//		for (i = 3; i > -1; i--)
//		{
		for (j = 0; j < 4; j++)
 8001702:	2300      	movs	r3, #0
 8001704:	717b      	strb	r3, [r7, #5]
 8001706:	e019      	b.n	800173c <Check_Down+0xa8>
		{
			if( Board[ (block_struct.y_pos)+lowest_row-1] [(block_struct.x_pos)+j] == 1)
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <Check_Down+0xc8>)
 800170a:	8a5b      	ldrh	r3, [r3, #18]
 800170c:	461a      	mov	r2, r3
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	4413      	add	r3, r2
 8001712:	1e5a      	subs	r2, r3, #1
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <Check_Down+0xc8>)
 8001716:	8a1b      	ldrh	r3, [r3, #16]
 8001718:	4619      	mov	r1, r3
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	4419      	add	r1, r3
 800171e:	4811      	ldr	r0, [pc, #68]	@ (8001764 <Check_Down+0xd0>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4403      	add	r3, r0
 800172a:	440b      	add	r3, r1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <Check_Down+0xa2>
			{
				return false;
 8001732:	2300      	movs	r3, #0
 8001734:	e00b      	b.n	800174e <Check_Down+0xba>
		for (j = 0; j < 4; j++)
 8001736:	797b      	ldrb	r3, [r7, #5]
 8001738:	3301      	adds	r3, #1
 800173a:	717b      	strb	r3, [r7, #5]
 800173c:	797b      	ldrb	r3, [r7, #5]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d9e2      	bls.n	8001708 <Check_Down+0x74>
			}
		}

		//}
	LOWRFLAG = 1;
 8001742:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <Check_Down+0xcc>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
	return true;
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <Check_Down+0xba>
	}
	return false;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20025adc 	.word	0x20025adc
 8001760:	20000002 	.word	0x20000002
 8001764:	20000074 	.word	0x20000074

08001768 <Move_Down>:

void Move_Down(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	if( Check_Down() == true )
 800176e:	f7ff ff91 	bl	8001694 <Check_Down>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d015      	beq.n	80017a4 <Move_Down+0x3c>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 8001778:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <Move_Down+0x54>)
 800177a:	8a9b      	ldrh	r3, [r3, #20]
 800177c:	80fb      	strh	r3, [r7, #6]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <Move_Down+0x54>)
 8001780:	2200      	movs	r2, #0
 8001782:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 8001784:	480d      	ldr	r0, [pc, #52]	@ (80017bc <Move_Down+0x54>)
 8001786:	f7ff fe83 	bl	8001490 <Draw_Shape>


		block_struct.Current_Color = temp_color;
 800178a:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <Move_Down+0x54>)
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	8293      	strh	r3, [r2, #20]
		block_struct.y_pos +=1;
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <Move_Down+0x54>)
 8001792:	8a5b      	ldrh	r3, [r3, #18]
 8001794:	3301      	adds	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <Move_Down+0x54>)
 800179a:	825a      	strh	r2, [r3, #18]
		Draw_Shape(&block_struct);
 800179c:	4807      	ldr	r0, [pc, #28]	@ (80017bc <Move_Down+0x54>)
 800179e:	f7ff fe77 	bl	8001490 <Draw_Shape>
		TIMER_Reset();
		Update_Board();
		Start_Tetris();

	}
}
 80017a2:	e007      	b.n	80017b4 <Move_Down+0x4c>
		TIMER_Int_Stop();
 80017a4:	f000 f898 	bl	80018d8 <TIMER_Int_Stop>
		TIMER_Reset();
 80017a8:	f000 f874 	bl	8001894 <TIMER_Reset>
		Update_Board();
 80017ac:	f7ff feae 	bl	800150c <Update_Board>
		Start_Tetris();
 80017b0:	f7ff fde4 	bl	800137c <Start_Tetris>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20025adc 	.word	0x20025adc

080017c0 <TIMER_Init>:
static TIM_HandleTypeDef htim2;
static TIM_HandleTypeDef htim5;


void TIMER_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM5_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <TIMER_Init+0xc0>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001880 <TIMER_Init+0xc0>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <TIMER_Init+0xc0>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
	htim5.Instance = TIM5;
 80017e2:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <TIMER_Init+0xc4>)
 80017e4:	4a28      	ldr	r2, [pc, #160]	@ (8001888 <TIMER_Init+0xc8>)
 80017e6:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = PRESCALER;
 80017e8:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <TIMER_Init+0xc4>)
 80017ea:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017ee:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <TIMER_Init+0xc4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = ARR_1;
 80017f6:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <TIMER_Init+0xc4>)
 80017f8:	f244 129f 	movw	r2, #16799	@ 0x419f
 80017fc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <TIMER_Init+0xc4>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <TIMER_Init+0xc4>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
	timHALStatus = HAL_TIM_Base_Init(&htim5);
 800180a:	481e      	ldr	r0, [pc, #120]	@ (8001884 <TIMER_Init+0xc4>)
 800180c:	f004 faaa 	bl	8005d64 <HAL_TIM_Base_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <TIMER_Init+0xcc>)
 8001816:	701a      	strb	r2, [r3, #0]


	__HAL_RCC_TIM2_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <TIMER_Init+0xc0>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <TIMER_Init+0xc0>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6413      	str	r3, [r2, #64]	@ 0x40
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <TIMER_Init+0xc0>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	683b      	ldr	r3, [r7, #0]

	// TIM 2 Config

	htim2.Instance = TIM2;
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <TIMER_Init+0xd0>)
 8001836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800183a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = PRESCALER;
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <TIMER_Init+0xd0>)
 800183e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001842:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <TIMER_Init+0xd0>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ARR_1;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <TIMER_Init+0xd0>)
 800184c:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001850:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <TIMER_Init+0xd0>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <TIMER_Init+0xd0>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
	timHALStatus = HAL_TIM_Base_Init(&htim2);
 800185e:	480c      	ldr	r0, [pc, #48]	@ (8001890 <TIMER_Init+0xd0>)
 8001860:	f004 fa80 	bl	8005d64 <HAL_TIM_Base_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <TIMER_Init+0xcc>)
 800186a:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <TIMER_Init+0xcc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <TIMER_Init+0xb8>
		{
			for(;;);
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <TIMER_Init+0xb4>
		}



}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	20025b3c 	.word	0x20025b3c
 8001888:	40000c00 	.word	0x40000c00
 800188c:	20025af3 	.word	0x20025af3
 8001890:	20025af4 	.word	0x20025af4

08001894 <TIMER_Reset>:
//void TIMER_Start(void);
//
//void TIMER_Stop(void);
//
void TIMER_Reset()
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	TIM2->CNT = RESET;
 8001898:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <TIMER_Int_Start>:
{
	return __HAL_TIM_GET_COUNTER(&htim2);
}

void TIMER_Int_Start(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

	timHALStatus = HAL_TIM_Base_Start_IT(&htim2);
 80018b0:	4807      	ldr	r0, [pc, #28]	@ (80018d0 <TIMER_Int_Start+0x24>)
 80018b2:	f004 faa7 	bl	8005e04 <HAL_TIM_Base_Start_IT>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <TIMER_Int_Start+0x28>)
 80018bc:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <TIMER_Int_Start+0x28>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <TIMER_Int_Start+0x1e>
		{
			for(;;);
 80018c6:	bf00      	nop
 80018c8:	e7fd      	b.n	80018c6 <TIMER_Int_Start+0x1a>
		}
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20025af4 	.word	0x20025af4
 80018d4:	20025af3 	.word	0x20025af3

080018d8 <TIMER_Int_Stop>:

void TIMER_Int_Stop(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	timHALStatus = HAL_TIM_Base_Stop_IT(&htim2);
 80018dc:	4807      	ldr	r0, [pc, #28]	@ (80018fc <TIMER_Int_Stop+0x24>)
 80018de:	f004 fb01 	bl	8005ee4 <HAL_TIM_Base_Stop_IT>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <TIMER_Int_Stop+0x28>)
 80018e8:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <TIMER_Int_Stop+0x28>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <TIMER_Int_Stop+0x1e>
		{
			for(;;);
 80018f2:	bf00      	nop
 80018f4:	e7fd      	b.n	80018f2 <TIMER_Int_Stop+0x1a>
		}
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20025af4 	.word	0x20025af4
 8001900:	20025af3 	.word	0x20025af3

08001904 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001908:	f000 f9fe 	bl	8001d08 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800190c:	20ca      	movs	r0, #202	@ 0xca
 800190e:	f000 f943 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001912:	20c3      	movs	r0, #195	@ 0xc3
 8001914:	f000 f94d 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001918:	2008      	movs	r0, #8
 800191a:	f000 f94a 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800191e:	2050      	movs	r0, #80	@ 0x50
 8001920:	f000 f947 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001924:	20cf      	movs	r0, #207	@ 0xcf
 8001926:	f000 f937 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f941 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001930:	20c1      	movs	r0, #193	@ 0xc1
 8001932:	f000 f93e 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001936:	2030      	movs	r0, #48	@ 0x30
 8001938:	f000 f93b 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800193c:	20ed      	movs	r0, #237	@ 0xed
 800193e:	f000 f92b 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001942:	2064      	movs	r0, #100	@ 0x64
 8001944:	f000 f935 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f932 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800194e:	2012      	movs	r0, #18
 8001950:	f000 f92f 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001954:	2081      	movs	r0, #129	@ 0x81
 8001956:	f000 f92c 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800195a:	20e8      	movs	r0, #232	@ 0xe8
 800195c:	f000 f91c 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001960:	2085      	movs	r0, #133	@ 0x85
 8001962:	f000 f926 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001966:	2000      	movs	r0, #0
 8001968:	f000 f923 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800196c:	2078      	movs	r0, #120	@ 0x78
 800196e:	f000 f920 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001972:	20cb      	movs	r0, #203	@ 0xcb
 8001974:	f000 f910 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001978:	2039      	movs	r0, #57	@ 0x39
 800197a:	f000 f91a 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800197e:	202c      	movs	r0, #44	@ 0x2c
 8001980:	f000 f917 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001984:	2000      	movs	r0, #0
 8001986:	f000 f914 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800198a:	2034      	movs	r0, #52	@ 0x34
 800198c:	f000 f911 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001990:	2002      	movs	r0, #2
 8001992:	f000 f90e 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001996:	20f7      	movs	r0, #247	@ 0xf7
 8001998:	f000 f8fe 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800199c:	2020      	movs	r0, #32
 800199e:	f000 f908 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80019a2:	20ea      	movs	r0, #234	@ 0xea
 80019a4:	f000 f8f8 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f902 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f8ff 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80019b4:	20b1      	movs	r0, #177	@ 0xb1
 80019b6:	f000 f8ef 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f8f9 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80019c0:	201b      	movs	r0, #27
 80019c2:	f000 f8f6 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80019c6:	20b6      	movs	r0, #182	@ 0xb6
 80019c8:	f000 f8e6 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80019cc:	200a      	movs	r0, #10
 80019ce:	f000 f8f0 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80019d2:	20a2      	movs	r0, #162	@ 0xa2
 80019d4:	f000 f8ed 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80019d8:	20c0      	movs	r0, #192	@ 0xc0
 80019da:	f000 f8dd 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80019de:	2010      	movs	r0, #16
 80019e0:	f000 f8e7 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80019e4:	20c1      	movs	r0, #193	@ 0xc1
 80019e6:	f000 f8d7 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80019ea:	2010      	movs	r0, #16
 80019ec:	f000 f8e1 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80019f0:	20c5      	movs	r0, #197	@ 0xc5
 80019f2:	f000 f8d1 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80019f6:	2045      	movs	r0, #69	@ 0x45
 80019f8:	f000 f8db 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80019fc:	2015      	movs	r0, #21
 80019fe:	f000 f8d8 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001a02:	20c7      	movs	r0, #199	@ 0xc7
 8001a04:	f000 f8c8 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001a08:	2090      	movs	r0, #144	@ 0x90
 8001a0a:	f000 f8d2 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001a0e:	2036      	movs	r0, #54	@ 0x36
 8001a10:	f000 f8c2 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001a14:	20c8      	movs	r0, #200	@ 0xc8
 8001a16:	f000 f8cc 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001a1a:	20f2      	movs	r0, #242	@ 0xf2
 8001a1c:	f000 f8bc 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 f8c6 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001a26:	20b0      	movs	r0, #176	@ 0xb0
 8001a28:	f000 f8b6 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001a2c:	20c2      	movs	r0, #194	@ 0xc2
 8001a2e:	f000 f8c0 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001a32:	20b6      	movs	r0, #182	@ 0xb6
 8001a34:	f000 f8b0 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001a38:	200a      	movs	r0, #10
 8001a3a:	f000 f8ba 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001a3e:	20a7      	movs	r0, #167	@ 0xa7
 8001a40:	f000 f8b7 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001a44:	2027      	movs	r0, #39	@ 0x27
 8001a46:	f000 f8b4 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f000 f8b1 	bl	8001bb2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001a50:	202a      	movs	r0, #42	@ 0x2a
 8001a52:	f000 f8a1 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f8ab 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 f8a8 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f8a5 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001a68:	20ef      	movs	r0, #239	@ 0xef
 8001a6a:	f000 f8a2 	bl	8001bb2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001a6e:	202b      	movs	r0, #43	@ 0x2b
 8001a70:	f000 f892 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f000 f89c 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f899 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f000 f896 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001a86:	203f      	movs	r0, #63	@ 0x3f
 8001a88:	f000 f893 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001a8c:	20f6      	movs	r0, #246	@ 0xf6
 8001a8e:	f000 f883 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f000 f88d 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f000 f88a 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001a9e:	2006      	movs	r0, #6
 8001aa0:	f000 f887 	bl	8001bb2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001aa4:	202c      	movs	r0, #44	@ 0x2c
 8001aa6:	f000 f877 	bl	8001b98 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001aaa:	20c8      	movs	r0, #200	@ 0xc8
 8001aac:	f000 f9e8 	bl	8001e80 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001ab0:	2026      	movs	r0, #38	@ 0x26
 8001ab2:	f000 f871 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 f87b 	bl	8001bb2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001abc:	20e0      	movs	r0, #224	@ 0xe0
 8001abe:	f000 f86b 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f000 f875 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001ac8:	2029      	movs	r0, #41	@ 0x29
 8001aca:	f000 f872 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001ace:	2024      	movs	r0, #36	@ 0x24
 8001ad0:	f000 f86f 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001ad4:	200c      	movs	r0, #12
 8001ad6:	f000 f86c 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001ada:	200e      	movs	r0, #14
 8001adc:	f000 f869 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001ae0:	2009      	movs	r0, #9
 8001ae2:	f000 f866 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001ae6:	204e      	movs	r0, #78	@ 0x4e
 8001ae8:	f000 f863 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001aec:	2078      	movs	r0, #120	@ 0x78
 8001aee:	f000 f860 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001af2:	203c      	movs	r0, #60	@ 0x3c
 8001af4:	f000 f85d 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001af8:	2009      	movs	r0, #9
 8001afa:	f000 f85a 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001afe:	2013      	movs	r0, #19
 8001b00:	f000 f857 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001b04:	2005      	movs	r0, #5
 8001b06:	f000 f854 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001b0a:	2017      	movs	r0, #23
 8001b0c:	f000 f851 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001b10:	2011      	movs	r0, #17
 8001b12:	f000 f84e 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f84b 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001b1c:	20e1      	movs	r0, #225	@ 0xe1
 8001b1e:	f000 f83b 	bl	8001b98 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f845 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001b28:	2016      	movs	r0, #22
 8001b2a:	f000 f842 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001b2e:	201b      	movs	r0, #27
 8001b30:	f000 f83f 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001b34:	2004      	movs	r0, #4
 8001b36:	f000 f83c 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001b3a:	2011      	movs	r0, #17
 8001b3c:	f000 f839 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001b40:	2007      	movs	r0, #7
 8001b42:	f000 f836 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001b46:	2031      	movs	r0, #49	@ 0x31
 8001b48:	f000 f833 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001b4c:	2033      	movs	r0, #51	@ 0x33
 8001b4e:	f000 f830 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001b52:	2042      	movs	r0, #66	@ 0x42
 8001b54:	f000 f82d 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001b58:	2005      	movs	r0, #5
 8001b5a:	f000 f82a 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b5e:	200c      	movs	r0, #12
 8001b60:	f000 f827 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001b64:	200a      	movs	r0, #10
 8001b66:	f000 f824 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001b6a:	2028      	movs	r0, #40	@ 0x28
 8001b6c:	f000 f821 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001b70:	202f      	movs	r0, #47	@ 0x2f
 8001b72:	f000 f81e 	bl	8001bb2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001b76:	200f      	movs	r0, #15
 8001b78:	f000 f81b 	bl	8001bb2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001b7c:	2011      	movs	r0, #17
 8001b7e:	f000 f80b 	bl	8001b98 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b82:	20c8      	movs	r0, #200	@ 0xc8
 8001b84:	f000 f97c 	bl	8001e80 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001b88:	2029      	movs	r0, #41	@ 0x29
 8001b8a:	f000 f805 	bl	8001b98 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001b8e:	202c      	movs	r0, #44	@ 0x2c
 8001b90:	f000 f802 	bl	8001b98 <ili9341_Write_Reg>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f949 	bl	8001e3c <LCD_IO_WriteReg>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f91a 	bl	8001df8 <LCD_IO_WriteData>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001bd0:	4819      	ldr	r0, [pc, #100]	@ (8001c38 <SPI_Init+0x6c>)
 8001bd2:	f003 ffdc 	bl	8005b8e <HAL_SPI_GetState>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d12b      	bne.n	8001c34 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <SPI_Init+0x6c>)
 8001bde:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <SPI_Init+0x70>)
 8001be0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <SPI_Init+0x6c>)
 8001be4:	2218      	movs	r2, #24
 8001be6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <SPI_Init+0x6c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <SPI_Init+0x6c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <SPI_Init+0x6c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <SPI_Init+0x6c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <SPI_Init+0x6c>)
 8001c02:	2207      	movs	r2, #7
 8001c04:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <SPI_Init+0x6c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <SPI_Init+0x6c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <SPI_Init+0x6c>)
 8001c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c18:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <SPI_Init+0x6c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <SPI_Init+0x6c>)
 8001c22:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c26:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001c28:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <SPI_Init+0x6c>)
 8001c2a:	f000 f833 	bl	8001c94 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001c2e:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <SPI_Init+0x6c>)
 8001c30:	f003 fdb8 	bl	80057a4 <HAL_SPI_Init>
  }
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20025b84 	.word	0x20025b84
 8001c3c:	40015000 	.word	0x40015000

08001c40 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <SPI_Write+0x34>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	1db9      	adds	r1, r7, #6
 8001c54:	2201      	movs	r2, #1
 8001c56:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <SPI_Write+0x38>)
 8001c58:	f003 fe55 	bl	8005906 <HAL_SPI_Transmit>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001c66:	f000 f809 	bl	8001c7c <SPI_Error>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000144 	.word	0x20000144
 8001c78:	20025b84 	.word	0x20025b84

08001c7c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c80:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <SPI_Error+0x14>)
 8001c82:	f003 fe18 	bl	80058b6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001c86:	f7ff ffa1 	bl	8001bcc <SPI_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20025b84 	.word	0x20025b84

08001c94 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <SPI_MspInit+0x6c>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <SPI_MspInit+0x6c>)
 8001ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001caa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <SPI_MspInit+0x6c>)
 8001cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <SPI_MspInit+0x6c>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <SPI_MspInit+0x6c>)
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <SPI_MspInit+0x6c>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001cd4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <SPI_MspInit+0x70>)
 8001cf2:	f001 f8f7 	bl	8002ee4 <HAL_GPIO_Init>
}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	@ 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40021400 	.word	0x40021400

08001d08 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001d0e:	4b36      	ldr	r3, [pc, #216]	@ (8001de8 <LCD_IO_Init+0xe0>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d164      	bne.n	8001de0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001d16:	4b34      	ldr	r3, [pc, #208]	@ (8001de8 <LCD_IO_Init+0xe0>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4827      	ldr	r0, [pc, #156]	@ (8001df0 <LCD_IO_Init+0xe8>)
 8001d52:	f001 f8c7 	bl	8002ee4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a23      	ldr	r2, [pc, #140]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4819      	ldr	r0, [pc, #100]	@ (8001df0 <LCD_IO_Init+0xe8>)
 8001d8c:	f001 f8aa 	bl	8002ee4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <LCD_IO_Init+0xe4>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001dac:	2304      	movs	r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <LCD_IO_Init+0xec>)
 8001dc4:	f001 f88e 	bl	8002ee4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <LCD_IO_Init+0xec>)
 8001dce:	f001 fb41 	bl	8003454 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	4807      	ldr	r0, [pc, #28]	@ (8001df4 <LCD_IO_Init+0xec>)
 8001dd8:	f001 fb3c 	bl	8003454 <HAL_GPIO_WritePin>

    SPI_Init();
 8001ddc:	f7ff fef6 	bl	8001bcc <SPI_Init>
  }
}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20025bdc 	.word	0x20025bdc
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40020800 	.word	0x40020800

08001df8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e02:	2201      	movs	r2, #1
 8001e04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e08:	480a      	ldr	r0, [pc, #40]	@ (8001e34 <LCD_IO_WriteData+0x3c>)
 8001e0a:	f001 fb23 	bl	8003454 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2104      	movs	r1, #4
 8001e12:	4809      	ldr	r0, [pc, #36]	@ (8001e38 <LCD_IO_WriteData+0x40>)
 8001e14:	f001 fb1e 	bl	8003454 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff10 	bl	8001c40 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e20:	2201      	movs	r2, #1
 8001e22:	2104      	movs	r1, #4
 8001e24:	4804      	ldr	r0, [pc, #16]	@ (8001e38 <LCD_IO_WriteData+0x40>)
 8001e26:	f001 fb15 	bl	8003454 <HAL_GPIO_WritePin>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40020800 	.word	0x40020800

08001e3c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e4c:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <LCD_IO_WriteReg+0x3c>)
 8001e4e:	f001 fb01 	bl	8003454 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e52:	2200      	movs	r2, #0
 8001e54:	2104      	movs	r1, #4
 8001e56:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <LCD_IO_WriteReg+0x40>)
 8001e58:	f001 fafc 	bl	8003454 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff feed 	bl	8001c40 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e66:	2201      	movs	r2, #1
 8001e68:	2104      	movs	r1, #4
 8001e6a:	4804      	ldr	r0, [pc, #16]	@ (8001e7c <LCD_IO_WriteReg+0x40>)
 8001e6c:	f001 faf2 	bl	8003454 <HAL_GPIO_WritePin>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40020800 	.word	0x40020800

08001e80 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 ff21 	bl	8002cd0 <HAL_Delay>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 8001e9c:	f004 fb08 	bl	80064b0 <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea0:	f000 fea4 	bl	8002bec <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // TODO: Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 8001ea4:	f000 f844 	bl	8001f30 <SystemClockOverride>

  ApplicationInit();
 8001ea8:	f7fe fb20 	bl	80004ec <ApplicationInit>

  // Orientation of the board: Top left is the x and y axis ORIGIN

  while (1)
	{
	  ApplicationGame();
 8001eac:	f7fe fb3e 	bl	800052c <ApplicationGame>
	  if (getScheduledEvents() == START)
 8001eb0:	f7ff fa58 	bl	8001364 <getScheduledEvents>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d110      	bne.n	8001edc <main+0x44>
	   {
		   removeSchedulerEvent(START);
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f7ff fa3e 	bl	800133c <removeSchedulerEvent>
		   LCD_Clear(0,LCD_COLOR_BLACK);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7fe fdfa 	bl	8000abc <LCD_Clear>
		   LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ec8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ecc:	f7fe fe18 	bl	8000b00 <LCD_SetTextColor>
		   LCD_SetFont(&Font12x12);
 8001ed0:	4816      	ldr	r0, [pc, #88]	@ (8001f2c <main+0x94>)
 8001ed2:	f7fe fe25 	bl	8000b20 <LCD_SetFont>
		   Start_Tetris();
 8001ed6:	f7ff fa51 	bl	800137c <Start_Tetris>
 8001eda:	e7e7      	b.n	8001eac <main+0x14>
	   }
	  else if(getScheduledEvents() == COUNT)
 8001edc:	f7ff fa42 	bl	8001364 <getScheduledEvents>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d105      	bne.n	8001ef2 <main+0x5a>
	  {
		  removeSchedulerEvent(COUNT);
 8001ee6:	2008      	movs	r0, #8
 8001ee8:	f7ff fa28 	bl	800133c <removeSchedulerEvent>
		  Move_Down();
 8001eec:	f7ff fc3c 	bl	8001768 <Move_Down>
 8001ef0:	e7dc      	b.n	8001eac <main+0x14>
	  }
	  else if(getScheduledEvents() == ROTATE_CC)
 8001ef2:	f7ff fa37 	bl	8001364 <getScheduledEvents>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d105      	bne.n	8001f08 <main+0x70>
	  {
		  removeSchedulerEvent(ROTATE_CC);
 8001efc:	2004      	movs	r0, #4
 8001efe:	f7ff fa1d 	bl	800133c <removeSchedulerEvent>
		  Rotate_CC();
 8001f02:	f7ff fb5d 	bl	80015c0 <Rotate_CC>
 8001f06:	e7d1      	b.n	8001eac <main+0x14>
	  }
	  else if(getScheduledEvents() == SHIFT_L)
 8001f08:	f7ff fa2c 	bl	8001364 <getScheduledEvents>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <main+0x82>
	  {
		  removeSchedulerEvent(SHIFT_L);
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7ff fa12 	bl	800133c <removeSchedulerEvent>
 8001f18:	e7c8      	b.n	8001eac <main+0x14>
		  //Rotate_CC();

	  }
	  else if(getScheduledEvents() == SHIFT_R)
 8001f1a:	f7ff fa23 	bl	8001364 <getScheduledEvents>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d1c3      	bne.n	8001eac <main+0x14>
	  {
		  removeSchedulerEvent(SHIFT_R);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff fa09 	bl	800133c <removeSchedulerEvent>
	  ApplicationGame();
 8001f2a:	e7bf      	b.n	8001eac <main+0x14>
 8001f2c:	2000013c 	.word	0x2000013c

08001f30 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b092      	sub	sp, #72	@ 0x48
 8001f34:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <SystemClockOverride+0x7c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <SystemClockOverride+0x7c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <SystemClockOverride+0x7c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f5a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f66:	2308      	movs	r3, #8
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f6a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f70:	2302      	movs	r3, #2
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f74:	2307      	movs	r3, #7
 8001f76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fd4e 	bl	8004a1c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001f80:	230f      	movs	r3, #15
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f84:	2302      	movs	r3, #2
 8001f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f96:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001f98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 ffb4 	bl	8004f0c <HAL_RCC_ClockConfig>
}
 8001fa4:	bf00      	nop
 8001fa6:	3748      	adds	r7, #72	@ 0x48
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800

08001fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb4:	b672      	cpsid	i
}
 8001fb6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */



  __disable_irq();
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <Error_Handler+0x8>

08001fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4a0f      	ldr	r2, [pc, #60]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ffa:	2007      	movs	r0, #7
 8001ffc:	f000 ff3e 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a29      	ldr	r2, [pc, #164]	@ (80020d0 <HAL_I2C_MspInit+0xc4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d14b      	bne.n	80020c6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b28      	ldr	r3, [pc, #160]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a20      	ldr	r2, [pc, #128]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206c:	2312      	movs	r3, #18
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002078:	2304      	movs	r3, #4
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4815      	ldr	r0, [pc, #84]	@ (80020d8 <HAL_I2C_MspInit+0xcc>)
 8002084:	f000 ff2e 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208e:	2312      	movs	r3, #18
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800209a:	2304      	movs	r3, #4
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	480d      	ldr	r0, [pc, #52]	@ (80020dc <HAL_I2C_MspInit+0xd0>)
 80020a6:	f000 ff1d 	bl	8002ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a08      	ldr	r2, [pc, #32]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 80020b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_I2C_MspInit+0xc8>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	@ 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40005c00 	.word	0x40005c00
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020000 	.word	0x40020000

080020e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b09a      	sub	sp, #104	@ 0x68
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fc:	2230      	movs	r2, #48	@ 0x30
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f004 faf7 	bl	80066f4 <memset>
  if(hltdc->Instance==LTDC)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a81      	ldr	r2, [pc, #516]	@ (8002310 <HAL_LTDC_MspInit+0x230>)
 800210c:	4293      	cmp	r3, r2
 800210e:	f040 80fa 	bne.w	8002306 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002112:	2308      	movs	r3, #8
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002116:	2332      	movs	r3, #50	@ 0x32
 8002118:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800211a:	2302      	movs	r3, #2
 800211c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800211e:	2300      	movs	r3, #0
 8002120:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002126:	4618      	mov	r0, r3
 8002128:	f003 f8fc 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002132:	f7ff ff3d 	bl	8001fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
 800213a:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	4a75      	ldr	r2, [pc, #468]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002140:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002144:	6453      	str	r3, [r2, #68]	@ 0x44
 8002146:	4b73      	ldr	r3, [pc, #460]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	4b6f      	ldr	r3, [pc, #444]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	4b68      	ldr	r3, [pc, #416]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a67      	ldr	r2, [pc, #412]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b65      	ldr	r3, [pc, #404]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	4b61      	ldr	r3, [pc, #388]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a60      	ldr	r2, [pc, #384]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b5e      	ldr	r3, [pc, #376]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a59      	ldr	r2, [pc, #356]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b57      	ldr	r3, [pc, #348]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	4a4b      	ldr	r2, [pc, #300]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ee:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <HAL_LTDC_MspInit+0x234>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80021fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800220c:	230e      	movs	r3, #14
 800220e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002214:	4619      	mov	r1, r3
 8002216:	4840      	ldr	r0, [pc, #256]	@ (8002318 <HAL_LTDC_MspInit+0x238>)
 8002218:	f000 fe64 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800221c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002220:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800222e:	230e      	movs	r3, #14
 8002230:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002236:	4619      	mov	r1, r3
 8002238:	4838      	ldr	r0, [pc, #224]	@ (800231c <HAL_LTDC_MspInit+0x23c>)
 800223a:	f000 fe53 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800223e:	2303      	movs	r3, #3
 8002240:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800224e:	2309      	movs	r3, #9
 8002250:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002256:	4619      	mov	r1, r3
 8002258:	4831      	ldr	r0, [pc, #196]	@ (8002320 <HAL_LTDC_MspInit+0x240>)
 800225a:	f000 fe43 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800225e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002262:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002270:	230e      	movs	r3, #14
 8002272:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002278:	4619      	mov	r1, r3
 800227a:	4829      	ldr	r0, [pc, #164]	@ (8002320 <HAL_LTDC_MspInit+0x240>)
 800227c:	f000 fe32 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002280:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002284:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002292:	230e      	movs	r3, #14
 8002294:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002296:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800229a:	4619      	mov	r1, r3
 800229c:	4821      	ldr	r0, [pc, #132]	@ (8002324 <HAL_LTDC_MspInit+0x244>)
 800229e:	f000 fe21 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80022a2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80022a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022b4:	230e      	movs	r3, #14
 80022b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022bc:	4619      	mov	r1, r3
 80022be:	481a      	ldr	r0, [pc, #104]	@ (8002328 <HAL_LTDC_MspInit+0x248>)
 80022c0:	f000 fe10 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80022c4:	2348      	movs	r3, #72	@ 0x48
 80022c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022d4:	230e      	movs	r3, #14
 80022d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022dc:	4619      	mov	r1, r3
 80022de:	4813      	ldr	r0, [pc, #76]	@ (800232c <HAL_LTDC_MspInit+0x24c>)
 80022e0:	f000 fe00 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80022e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022f6:	2309      	movs	r3, #9
 80022f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022fe:	4619      	mov	r1, r3
 8002300:	4808      	ldr	r0, [pc, #32]	@ (8002324 <HAL_LTDC_MspInit+0x244>)
 8002302:	f000 fdef 	bl	8002ee4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002306:	bf00      	nop
 8002308:	3768      	adds	r7, #104	@ 0x68
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40016800 	.word	0x40016800
 8002314:	40023800 	.word	0x40023800
 8002318:	40021400 	.word	0x40021400
 800231c:	40020000 	.word	0x40020000
 8002320:	40020400 	.word	0x40020400
 8002324:	40021800 	.word	0x40021800
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00

08002330 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0b      	ldr	r2, [pc, #44]	@ (800236c <HAL_RNG_MspInit+0x3c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10d      	bne.n	800235e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_RNG_MspInit+0x40>)
 8002348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234a:	4a09      	ldr	r2, [pc, #36]	@ (8002370 <HAL_RNG_MspInit+0x40>)
 800234c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002350:	6353      	str	r3, [r2, #52]	@ 0x34
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <HAL_RNG_MspInit+0x40>)
 8002354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	50060800 	.word	0x50060800
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a19      	ldr	r2, [pc, #100]	@ (80023f8 <HAL_SPI_MspInit+0x84>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d12c      	bne.n	80023f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <HAL_SPI_MspInit+0x88>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	4a17      	ldr	r2, [pc, #92]	@ (80023fc <HAL_SPI_MspInit+0x88>)
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_SPI_MspInit+0x88>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_SPI_MspInit+0x88>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_SPI_MspInit+0x88>)
 80023bc:	f043 0320 	orr.w	r3, r3, #32
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_SPI_MspInit+0x88>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80023ce:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023e0:	2305      	movs	r3, #5
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <HAL_SPI_MspInit+0x8c>)
 80023ec:	f000 fd7a 	bl	8002ee4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	@ 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40015000 	.word	0x40015000
 80023fc:	40023800 	.word	0x40023800
 8002400:	40021400 	.word	0x40021400

08002404 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <HAL_SPI_MspDeInit+0x30>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10a      	bne.n	800242c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_SPI_MspDeInit+0x34>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	4a07      	ldr	r2, [pc, #28]	@ (8002438 <HAL_SPI_MspDeInit+0x34>)
 800241c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002420:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002422:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002426:	4805      	ldr	r0, [pc, #20]	@ (800243c <HAL_SPI_MspDeInit+0x38>)
 8002428:	f000 ff08 	bl	800323c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40015000 	.word	0x40015000
 8002438:	40023800 	.word	0x40023800
 800243c:	40021400 	.word	0x40021400

08002440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_TIM_Base_MspInit+0x3c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10d      	bne.n	800246e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_TIM_Base_MspInit+0x40>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4a09      	ldr	r2, [pc, #36]	@ (8002480 <HAL_TIM_Base_MspInit+0x40>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6413      	str	r3, [r2, #64]	@ 0x40
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <HAL_TIM_Base_MspInit+0x40>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40000c00 	.word	0x40000c00
 8002480:	40023800 	.word	0x40023800

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <NMI_Handler+0x4>

0800248c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <HardFault_Handler+0x4>

08002494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <MemManage_Handler+0x4>

0800249c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <UsageFault_Handler+0x4>

080024ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024da:	f000 fbd9 	bl	8002c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80024e8:	f000 f9ce 	bl	8002888 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80024ec:	f000 f98e 	bl	800280c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80024f0:	2202      	movs	r2, #2
 80024f2:	2103      	movs	r1, #3
 80024f4:	2082      	movs	r0, #130	@ 0x82
 80024f6:	f000 fa1b 	bl	8002930 <I2C3_Write>
    HAL_Delay(5);
 80024fa:	2005      	movs	r0, #5
 80024fc:	f000 fbe8 	bl	8002cd0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002500:	2200      	movs	r2, #0
 8002502:	2103      	movs	r1, #3
 8002504:	2082      	movs	r0, #130	@ 0x82
 8002506:	f000 fa13 	bl	8002930 <I2C3_Write>
    HAL_Delay(2);
 800250a:	2002      	movs	r0, #2
 800250c:	f000 fbe0 	bl	8002cd0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002510:	1cba      	adds	r2, r7, #2
 8002512:	2302      	movs	r3, #2
 8002514:	2100      	movs	r1, #0
 8002516:	2082      	movs	r0, #130	@ 0x82
 8002518:	f000 fa5a 	bl	80029d0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29a      	uxth	r2, r3
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4313      	orrs	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	f640 0211 	movw	r2, #2065	@ 0x811
 8002534:	4293      	cmp	r3, r2
 8002536:	d001      	beq.n	800253c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002538:	2303      	movs	r3, #3
 800253a:	e075      	b.n	8002628 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800253c:	2202      	movs	r2, #2
 800253e:	2103      	movs	r1, #3
 8002540:	2082      	movs	r0, #130	@ 0x82
 8002542:	f000 f9f5 	bl	8002930 <I2C3_Write>
    HAL_Delay(5);
 8002546:	2005      	movs	r0, #5
 8002548:	f000 fbc2 	bl	8002cd0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800254c:	2200      	movs	r2, #0
 800254e:	2103      	movs	r1, #3
 8002550:	2082      	movs	r0, #130	@ 0x82
 8002552:	f000 f9ed 	bl	8002930 <I2C3_Write>
    HAL_Delay(2);
 8002556:	2002      	movs	r0, #2
 8002558:	f000 fbba 	bl	8002cd0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800255c:	2004      	movs	r0, #4
 800255e:	f000 f867 	bl	8002630 <STMPE811_Read>
 8002562:	4603      	mov	r3, r0
 8002564:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002566:	797b      	ldrb	r3, [r7, #5]
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800256e:	797b      	ldrb	r3, [r7, #5]
 8002570:	461a      	mov	r2, r3
 8002572:	2104      	movs	r1, #4
 8002574:	2082      	movs	r0, #130	@ 0x82
 8002576:	f000 f9db 	bl	8002930 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800257a:	2004      	movs	r0, #4
 800257c:	f000 f858 	bl	8002630 <STMPE811_Read>
 8002580:	4603      	mov	r3, r0
 8002582:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002584:	797b      	ldrb	r3, [r7, #5]
 8002586:	f023 0302 	bic.w	r3, r3, #2
 800258a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800258c:	797b      	ldrb	r3, [r7, #5]
 800258e:	461a      	mov	r2, r3
 8002590:	2104      	movs	r1, #4
 8002592:	2082      	movs	r0, #130	@ 0x82
 8002594:	f000 f9cc 	bl	8002930 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002598:	2249      	movs	r2, #73	@ 0x49
 800259a:	2120      	movs	r1, #32
 800259c:	2082      	movs	r0, #130	@ 0x82
 800259e:	f000 f9c7 	bl	8002930 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80025a2:	2002      	movs	r0, #2
 80025a4:	f000 fb94 	bl	8002cd0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80025a8:	2201      	movs	r2, #1
 80025aa:	2121      	movs	r1, #33	@ 0x21
 80025ac:	2082      	movs	r0, #130	@ 0x82
 80025ae:	f000 f9bf 	bl	8002930 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80025b2:	2017      	movs	r0, #23
 80025b4:	f000 f83c 	bl	8002630 <STMPE811_Read>
 80025b8:	4603      	mov	r3, r0
 80025ba:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80025bc:	797b      	ldrb	r3, [r7, #5]
 80025be:	f043 031e 	orr.w	r3, r3, #30
 80025c2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80025c4:	797b      	ldrb	r3, [r7, #5]
 80025c6:	461a      	mov	r2, r3
 80025c8:	2117      	movs	r1, #23
 80025ca:	2082      	movs	r0, #130	@ 0x82
 80025cc:	f000 f9b0 	bl	8002930 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80025d0:	229a      	movs	r2, #154	@ 0x9a
 80025d2:	2141      	movs	r1, #65	@ 0x41
 80025d4:	2082      	movs	r0, #130	@ 0x82
 80025d6:	f000 f9ab 	bl	8002930 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80025da:	2201      	movs	r2, #1
 80025dc:	214a      	movs	r1, #74	@ 0x4a
 80025de:	2082      	movs	r0, #130	@ 0x82
 80025e0:	f000 f9a6 	bl	8002930 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80025e4:	2201      	movs	r2, #1
 80025e6:	214b      	movs	r1, #75	@ 0x4b
 80025e8:	2082      	movs	r0, #130	@ 0x82
 80025ea:	f000 f9a1 	bl	8002930 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80025ee:	2200      	movs	r2, #0
 80025f0:	214b      	movs	r1, #75	@ 0x4b
 80025f2:	2082      	movs	r0, #130	@ 0x82
 80025f4:	f000 f99c 	bl	8002930 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80025f8:	2201      	movs	r2, #1
 80025fa:	2156      	movs	r1, #86	@ 0x56
 80025fc:	2082      	movs	r0, #130	@ 0x82
 80025fe:	f000 f997 	bl	8002930 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002602:	2201      	movs	r2, #1
 8002604:	2158      	movs	r1, #88	@ 0x58
 8002606:	2082      	movs	r0, #130	@ 0x82
 8002608:	f000 f992 	bl	8002930 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800260c:	2203      	movs	r2, #3
 800260e:	2140      	movs	r1, #64	@ 0x40
 8002610:	2082      	movs	r0, #130	@ 0x82
 8002612:	f000 f98d 	bl	8002930 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002616:	22ff      	movs	r2, #255	@ 0xff
 8002618:	210b      	movs	r1, #11
 800261a:	2082      	movs	r0, #130	@ 0x82
 800261c:	f000 f988 	bl	8002930 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002620:	20c8      	movs	r0, #200	@ 0xc8
 8002622:	f000 fb55 	bl	8002cd0 <HAL_Delay>

    return STMPE811_State_Ok;
 8002626:	2302      	movs	r3, #2

}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800263a:	f107 020f 	add.w	r2, r7, #15
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4619      	mov	r1, r3
 8002642:	2082      	movs	r0, #130	@ 0x82
 8002644:	f000 f99e 	bl	8002984 <I2C3_Read>

    return readData;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	791a      	ldrb	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002662:	2040      	movs	r0, #64	@ 0x40
 8002664:	f7ff ffe4 	bl	8002630 <STMPE811_Read>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0e      	blt.n	8002692 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800267a:	2201      	movs	r2, #1
 800267c:	214b      	movs	r1, #75	@ 0x4b
 800267e:	2082      	movs	r0, #130	@ 0x82
 8002680:	f000 f956 	bl	8002930 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002684:	2200      	movs	r2, #0
 8002686:	214b      	movs	r1, #75	@ 0x4b
 8002688:	2082      	movs	r0, #130	@ 0x82
 800268a:	f000 f951 	bl	8002930 <I2C3_Write>

        return STMPE811_State_Released;
 800268e:	2301      	movs	r3, #1
 8002690:	e0a7      	b.n	80027e2 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	799b      	ldrb	r3, [r3, #6]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d117      	bne.n	80026ca <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f9b8 	bl	8002a14 <TM_STMPE811_ReadX>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	885b      	ldrh	r3, [r3, #2]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fa0b 	bl	8002ad0 <TM_STMPE811_ReadY>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80026c0:	3301      	adds	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	805a      	strh	r2, [r3, #2]
 80026c8:	e048      	b.n	800275c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	799b      	ldrb	r3, [r3, #6]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d112      	bne.n	80026f8 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f99c 	bl	8002a14 <TM_STMPE811_ReadX>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	885b      	ldrh	r3, [r3, #2]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f9f1 	bl	8002ad0 <TM_STMPE811_ReadY>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	805a      	strh	r2, [r3, #2]
 80026f6:	e031      	b.n	800275c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	799b      	ldrb	r3, [r3, #6]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d115      	bne.n	800272c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	885b      	ldrh	r3, [r3, #2]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f985 	bl	8002a14 <TM_STMPE811_ReadX>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f9da 	bl	8002ad0 <TM_STMPE811_ReadY>
 800271c:	4603      	mov	r3, r0
 800271e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002722:	3301      	adds	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	e017      	b.n	800275c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	799b      	ldrb	r3, [r3, #6]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d113      	bne.n	800275c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f96b 	bl	8002a14 <TM_STMPE811_ReadX>
 800273e:	4603      	mov	r3, r0
 8002740:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f9be 	bl	8002ad0 <TM_STMPE811_ReadY>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800275c:	2201      	movs	r2, #1
 800275e:	214b      	movs	r1, #75	@ 0x4b
 8002760:	2082      	movs	r0, #130	@ 0x82
 8002762:	f000 f8e5 	bl	8002930 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002766:	2200      	movs	r2, #0
 8002768:	214b      	movs	r1, #75	@ 0x4b
 800276a:	2082      	movs	r0, #130	@ 0x82
 800276c:	f000 f8e0 	bl	8002930 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	799b      	ldrb	r3, [r3, #6]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <STMPE811_ReadTouch+0x12e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	799b      	ldrb	r3, [r3, #6]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d115      	bne.n	80027ac <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d027      	beq.n	80027d8 <STMPE811_ReadTouch+0x186>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	2bee      	cmp	r3, #238	@ 0xee
 800278e:	d823      	bhi.n	80027d8 <STMPE811_ReadTouch+0x186>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	885b      	ldrh	r3, [r3, #2]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01f      	beq.n	80027d8 <STMPE811_ReadTouch+0x186>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	885b      	ldrh	r3, [r3, #2]
 800279c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80027a0:	d81a      	bhi.n	80027d8 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e01a      	b.n	80027e2 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <STMPE811_ReadTouch+0x188>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80027bc:	d80d      	bhi.n	80027da <STMPE811_ReadTouch+0x188>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	885b      	ldrh	r3, [r3, #2]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <STMPE811_ReadTouch+0x188>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	885b      	ldrh	r3, [r3, #2]
 80027ca:	2bee      	cmp	r3, #238	@ 0xee
 80027cc:	d805      	bhi.n	80027da <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e004      	b.n	80027e2 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80027d8:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20025c34 	.word	0x20025c34

0800280c <I2C3_Init>:

static void I2C3_Init()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <I2C3_Init+0x6c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a17      	ldr	r2, [pc, #92]	@ (8002878 <I2C3_Init+0x6c>)
 800281c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <I2C3_Init+0x6c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800282e:	4b13      	ldr	r3, [pc, #76]	@ (800287c <I2C3_Init+0x70>)
 8002830:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <I2C3_Init+0x74>)
 8002832:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <I2C3_Init+0x70>)
 8002836:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <I2C3_Init+0x78>)
 8002838:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800283a:	4b10      	ldr	r3, [pc, #64]	@ (800287c <I2C3_Init+0x70>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002840:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <I2C3_Init+0x70>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <I2C3_Init+0x70>)
 8002848:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800284c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800284e:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <I2C3_Init+0x70>)
 8002850:	2200      	movs	r2, #0
 8002852:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <I2C3_Init+0x70>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800285a:	4808      	ldr	r0, [pc, #32]	@ (800287c <I2C3_Init+0x70>)
 800285c:	f000 fe14 	bl	8003488 <HAL_I2C_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800286a:	bf00      	nop
 800286c:	e7fd      	b.n	800286a <I2C3_Init+0x5e>
    }
    return;
 800286e:	bf00      	nop
}
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	20025be0 	.word	0x20025be0
 8002880:	40005c00 	.word	0x40005c00
 8002884:	000186a0 	.word	0x000186a0

08002888 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <I2C3_MspInit+0x9c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002924 <I2C3_MspInit+0x9c>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <I2C3_MspInit+0x9c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <I2C3_MspInit+0x9c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <I2C3_MspInit+0x9c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <I2C3_MspInit+0x9c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80028d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028dc:	2312      	movs	r3, #18
 80028de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028e8:	2304      	movs	r3, #4
 80028ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	4619      	mov	r1, r3
 80028f2:	480d      	ldr	r0, [pc, #52]	@ (8002928 <I2C3_MspInit+0xa0>)
 80028f4:	f000 faf6 	bl	8002ee4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80028f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028fe:	2312      	movs	r3, #18
 8002900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800290a:	2304      	movs	r3, #4
 800290c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	4619      	mov	r1, r3
 8002914:	4805      	ldr	r0, [pc, #20]	@ (800292c <I2C3_MspInit+0xa4>)
 8002916:	f000 fae5 	bl	8002ee4 <HAL_GPIO_Init>
    
}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40020800 	.word	0x40020800
 800292c:	40020000 	.word	0x40020000

08002930 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af04      	add	r7, sp, #16
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
 800293a:	460b      	mov	r3, r1
 800293c:	717b      	strb	r3, [r7, #5]
 800293e:	4613      	mov	r3, r2
 8002940:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002942:	793b      	ldrb	r3, [r7, #4]
 8002944:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002946:	797b      	ldrb	r3, [r7, #5]
 8002948:	b29a      	uxth	r2, r3
 800294a:	88f9      	ldrh	r1, [r7, #6]
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <I2C3_Write+0x48>)
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	2301      	movs	r3, #1
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	f107 030f 	add.w	r3, r7, #15
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2301      	movs	r3, #1
 800295c:	4807      	ldr	r0, [pc, #28]	@ (800297c <I2C3_Write+0x4c>)
 800295e:	f000 fed7 	bl	8003710 <HAL_I2C_Mem_Write>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <I2C3_Write+0x50>)
 8002968:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800296a:	f7ff ff3f 	bl	80027ec <verifyHAL_I2C_IS_OKAY>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	0003d090 	.word	0x0003d090
 800297c:	20025be0 	.word	0x20025be0
 8002980:	20025c34 	.word	0x20025c34

08002984 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af04      	add	r7, sp, #16
 800298a:	4603      	mov	r3, r0
 800298c:	603a      	str	r2, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	460b      	mov	r3, r1
 8002992:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	b299      	uxth	r1, r3
 8002998:	79bb      	ldrb	r3, [r7, #6]
 800299a:	b29a      	uxth	r2, r3
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <I2C3_Read+0x40>)
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	2301      	movs	r3, #1
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2301      	movs	r3, #1
 80029aa:	4807      	ldr	r0, [pc, #28]	@ (80029c8 <I2C3_Read+0x44>)
 80029ac:	f000 ffaa 	bl	8003904 <HAL_I2C_Mem_Read>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <I2C3_Read+0x48>)
 80029b6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80029b8:	f7ff ff18 	bl	80027ec <verifyHAL_I2C_IS_OKAY>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	0003d090 	.word	0x0003d090
 80029c8:	20025be0 	.word	0x20025be0
 80029cc:	20025c34 	.word	0x20025c34

080029d0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af04      	add	r7, sp, #16
 80029d6:	603a      	str	r2, [r7, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
 80029de:	460b      	mov	r3, r1
 80029e0:	71bb      	strb	r3, [r7, #6]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	b299      	uxth	r1, r3
 80029ea:	79bb      	ldrb	r3, [r7, #6]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <I2C3_MulitByteRead+0x3c>)
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	4804      	ldr	r0, [pc, #16]	@ (8002a10 <I2C3_MulitByteRead+0x40>)
 80029fe:	f000 ff81 	bl	8003904 <HAL_I2C_Mem_Read>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0003d090 	.word	0x0003d090
 8002a10:	20025be0 	.word	0x20025be0

08002a14 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002a1e:	204d      	movs	r0, #77	@ 0x4d
 8002a20:	f7ff fe06 	bl	8002630 <STMPE811_Read>
 8002a24:	4603      	mov	r3, r0
 8002a26:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002a28:	204e      	movs	r0, #78	@ 0x4e
 8002a2a:	f7ff fe01 	bl	8002630 <STMPE811_Read>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002a32:	7a7b      	ldrb	r3, [r7, #9]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	7a3b      	ldrb	r3, [r7, #8]
 8002a3a:	b21b      	sxth	r3, r3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a44:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	dc06      	bgt.n	8002a5a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002a52:	330c      	adds	r3, #12
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	81fb      	strh	r3, [r7, #14]
 8002a58:	e005      	b.n	8002a66 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 8002a5c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002a60:	3308      	adds	r3, #8
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a6a:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <TM_STMPE811_ReadX+0xb8>)
 8002a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a70:	441a      	add	r2, r3
 8002a72:	10d2      	asrs	r2, r2, #3
 8002a74:	17db      	asrs	r3, r3, #31
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002a7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a7e:	2bef      	cmp	r3, #239	@ 0xef
 8002a80:	dd02      	ble.n	8002a88 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002a82:	23ef      	movs	r3, #239	@ 0xef
 8002a84:	81fb      	strh	r3, [r7, #14]
 8002a86:	e005      	b.n	8002a94 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002a88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da01      	bge.n	8002a94 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002a94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	dd05      	ble.n	8002aaa <TM_STMPE811_ReadX+0x96>
 8002a9e:	89fa      	ldrh	r2, [r7, #14]
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b21b      	sxth	r3, r3
 8002aa8:	e004      	b.n	8002ab4 <TM_STMPE811_ReadX+0xa0>
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002ab6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	dd01      	ble.n	8002ac2 <TM_STMPE811_ReadX+0xae>
        return val;
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	e000      	b.n	8002ac4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	88888889 	.word	0x88888889

08002ad0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002ada:	204f      	movs	r0, #79	@ 0x4f
 8002adc:	f7ff fda8 	bl	8002630 <STMPE811_Read>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002ae4:	2050      	movs	r0, #80	@ 0x50
 8002ae6:	f7ff fda3 	bl	8002630 <STMPE811_Read>
 8002aea:	4603      	mov	r3, r0
 8002aec:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002aee:	7a7b      	ldrb	r3, [r7, #9]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	b21a      	sxth	r2, r3
 8002af4:	7a3b      	ldrb	r3, [r7, #8]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002afc:	89fb      	ldrh	r3, [r7, #14]
 8002afe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b0a:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <TM_STMPE811_ReadY+0xa0>)
 8002b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b10:	1052      	asrs	r2, r2, #1
 8002b12:	17db      	asrs	r3, r3, #31
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	dc02      	bgt.n	8002b26 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	81fb      	strh	r3, [r7, #14]
 8002b24:	e007      	b.n	8002b36 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b2e:	db02      	blt.n	8002b36 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002b30:	f240 133f 	movw	r3, #319	@ 0x13f
 8002b34:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002b36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dd05      	ble.n	8002b4c <TM_STMPE811_ReadY+0x7c>
 8002b40:	89fa      	ldrh	r2, [r7, #14]
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	e004      	b.n	8002b56 <TM_STMPE811_ReadY+0x86>
 8002b4c:	89fb      	ldrh	r3, [r7, #14]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002b58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	dd01      	ble.n	8002b64 <TM_STMPE811_ReadY+0x94>
        return val;
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	e000      	b.n	8002b66 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002b64:	88fb      	ldrh	r3, [r7, #6]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2e8ba2e9 	.word	0x2e8ba2e9

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <SystemInit+0x20>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7e:	4a05      	ldr	r2, [pc, #20]	@ (8002b94 <SystemInit+0x20>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b9c:	f7ff ffea 	bl	8002b74 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ba0:	480c      	ldr	r0, [pc, #48]	@ (8002bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ba2:	490d      	ldr	r1, [pc, #52]	@ (8002bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bc6:	f003 fda3 	bl	8006710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bca:	f7ff f965 	bl	8001e98 <main>
  bx  lr    
 8002bce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bd0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd8:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002bdc:	080085a4 	.word	0x080085a4
  ldr r2, =_sbss
 8002be0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002be4:	20025e30 	.word	0x20025e30

08002be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <ADC_IRQHandler>
	...

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c2c <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <HAL_Init+0x40>)
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <HAL_Init+0x40>)
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_Init+0x40>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c14:	2003      	movs	r0, #3
 8002c16:	f000 f931 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f000 f808 	bl	8002c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c20:	f7ff f9cc 	bl	8001fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023c00 	.word	0x40023c00

08002c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_InitTick+0x54>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_InitTick+0x58>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f93b 	bl	8002eca <HAL_SYSTICK_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00e      	b.n	8002c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d80a      	bhi.n	8002c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c64:	2200      	movs	r2, #0
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c6c:	f000 f911 	bl	8002e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c70:	4a06      	ldr	r2, [pc, #24]	@ (8002c8c <HAL_InitTick+0x5c>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000148 	.word	0x20000148
 8002c88:	20000150 	.word	0x20000150
 8002c8c:	2000014c 	.word	0x2000014c

08002c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_IncTick+0x20>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_IncTick+0x24>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	@ (8002cb4 <HAL_IncTick+0x24>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000150 	.word	0x20000150
 8002cb4:	20025c38 	.word	0x20025c38

08002cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return uwTick;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_GetTick+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20025c38 	.word	0x20025c38

08002cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff ffee 	bl	8002cb8 <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ce8:	d005      	beq.n	8002cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <HAL_Delay+0x44>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cf6:	bf00      	nop
 8002cf8:	f7ff ffde 	bl	8002cb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d8f7      	bhi.n	8002cf8 <HAL_Delay+0x28>
  {
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000150 	.word	0x20000150

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	@ (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	@ (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	@ 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e5c:	f7ff ff8e 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff47 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff5c 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff8e 	bl	8002dd0 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5d 	bl	8002d7c <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffb0 	bl	8002e38 <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	@ 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e177      	b.n	80031f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f040 8166 	bne.w	80031ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d005      	beq.n	8002f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d130      	bne.n	8002f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	2203      	movs	r2, #3
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 0201 	and.w	r2, r3, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d017      	beq.n	8002fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d123      	bne.n	8003028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	08da      	lsrs	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3208      	adds	r2, #8
 8002fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3208      	adds	r2, #8
 8003022:	69b9      	ldr	r1, [r7, #24]
 8003024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0203 	and.w	r2, r3, #3
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80c0 	beq.w	80031ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4b66      	ldr	r3, [pc, #408]	@ (8003208 <HAL_GPIO_Init+0x324>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	4a65      	ldr	r2, [pc, #404]	@ (8003208 <HAL_GPIO_Init+0x324>)
 8003074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003078:	6453      	str	r3, [r2, #68]	@ 0x44
 800307a:	4b63      	ldr	r3, [pc, #396]	@ (8003208 <HAL_GPIO_Init+0x324>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003086:	4a61      	ldr	r2, [pc, #388]	@ (800320c <HAL_GPIO_Init+0x328>)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a58      	ldr	r2, [pc, #352]	@ (8003210 <HAL_GPIO_Init+0x32c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d037      	beq.n	8003122 <HAL_GPIO_Init+0x23e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_GPIO_Init+0x330>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_GPIO_Init+0x23a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a56      	ldr	r2, [pc, #344]	@ (8003218 <HAL_GPIO_Init+0x334>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x236>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a55      	ldr	r2, [pc, #340]	@ (800321c <HAL_GPIO_Init+0x338>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x232>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a54      	ldr	r2, [pc, #336]	@ (8003220 <HAL_GPIO_Init+0x33c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x22e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a53      	ldr	r2, [pc, #332]	@ (8003224 <HAL_GPIO_Init+0x340>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x22a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a52      	ldr	r2, [pc, #328]	@ (8003228 <HAL_GPIO_Init+0x344>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x226>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a51      	ldr	r2, [pc, #324]	@ (800322c <HAL_GPIO_Init+0x348>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x222>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a50      	ldr	r2, [pc, #320]	@ (8003230 <HAL_GPIO_Init+0x34c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x21e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003234 <HAL_GPIO_Init+0x350>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x21a>
 80030fa:	2309      	movs	r3, #9
 80030fc:	e012      	b.n	8003124 <HAL_GPIO_Init+0x240>
 80030fe:	230a      	movs	r3, #10
 8003100:	e010      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003102:	2308      	movs	r3, #8
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003106:	2307      	movs	r3, #7
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003134:	4935      	ldr	r1, [pc, #212]	@ (800320c <HAL_GPIO_Init+0x328>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003142:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003166:	4a34      	ldr	r2, [pc, #208]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800316c:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <HAL_GPIO_Init+0x354>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003190:	4a29      	ldr	r2, [pc, #164]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003196:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <HAL_GPIO_Init+0x354>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <HAL_GPIO_Init+0x354>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e4:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <HAL_GPIO_Init+0x354>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae84 	bls.w	8002f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3724      	adds	r7, #36	@ 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40013800 	.word	0x40013800
 8003210:	40020000 	.word	0x40020000
 8003214:	40020400 	.word	0x40020400
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40021400 	.word	0x40021400
 8003228:	40021800 	.word	0x40021800
 800322c:	40021c00 	.word	0x40021c00
 8003230:	40022000 	.word	0x40022000
 8003234:	40022400 	.word	0x40022400
 8003238:	40013c00 	.word	0x40013c00

0800323c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e0d9      	b.n	800340c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003258:	2201      	movs	r2, #1
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	f040 80c9 	bne.w	8003406 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003274:	4a6b      	ldr	r2, [pc, #428]	@ (8003424 <HAL_GPIO_DeInit+0x1e8>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003280:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a63      	ldr	r2, [pc, #396]	@ (8003428 <HAL_GPIO_DeInit+0x1ec>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d037      	beq.n	800330e <HAL_GPIO_DeInit+0xd2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a62      	ldr	r2, [pc, #392]	@ (800342c <HAL_GPIO_DeInit+0x1f0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d031      	beq.n	800330a <HAL_GPIO_DeInit+0xce>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a61      	ldr	r2, [pc, #388]	@ (8003430 <HAL_GPIO_DeInit+0x1f4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d02b      	beq.n	8003306 <HAL_GPIO_DeInit+0xca>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a60      	ldr	r2, [pc, #384]	@ (8003434 <HAL_GPIO_DeInit+0x1f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d025      	beq.n	8003302 <HAL_GPIO_DeInit+0xc6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003438 <HAL_GPIO_DeInit+0x1fc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01f      	beq.n	80032fe <HAL_GPIO_DeInit+0xc2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a5e      	ldr	r2, [pc, #376]	@ (800343c <HAL_GPIO_DeInit+0x200>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d019      	beq.n	80032fa <HAL_GPIO_DeInit+0xbe>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003440 <HAL_GPIO_DeInit+0x204>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_GPIO_DeInit+0xba>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003444 <HAL_GPIO_DeInit+0x208>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00d      	beq.n	80032f2 <HAL_GPIO_DeInit+0xb6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003448 <HAL_GPIO_DeInit+0x20c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <HAL_GPIO_DeInit+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a5a      	ldr	r2, [pc, #360]	@ (800344c <HAL_GPIO_DeInit+0x210>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_GPIO_DeInit+0xae>
 80032e6:	2309      	movs	r3, #9
 80032e8:	e012      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 80032ea:	230a      	movs	r3, #10
 80032ec:	e010      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 80032ee:	2308      	movs	r3, #8
 80032f0:	e00e      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 80032f2:	2307      	movs	r3, #7
 80032f4:	e00c      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 80032f6:	2306      	movs	r3, #6
 80032f8:	e00a      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 80032fa:	2305      	movs	r3, #5
 80032fc:	e008      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 80032fe:	2304      	movs	r3, #4
 8003300:	e006      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 8003302:	2303      	movs	r3, #3
 8003304:	e004      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 8003306:	2302      	movs	r3, #2
 8003308:	e002      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_GPIO_DeInit+0xd4>
 800330e:	2300      	movs	r3, #0
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	f002 0203 	and.w	r2, r2, #3
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4093      	lsls	r3, r2
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d132      	bne.n	8003386 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003320:	4b4b      	ldr	r3, [pc, #300]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	4949      	ldr	r1, [pc, #292]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 800332a:	4013      	ands	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800332e:	4b48      	ldr	r3, [pc, #288]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43db      	mvns	r3, r3
 8003336:	4946      	ldr	r1, [pc, #280]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 8003338:	4013      	ands	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800333c:	4b44      	ldr	r3, [pc, #272]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43db      	mvns	r3, r3
 8003344:	4942      	ldr	r1, [pc, #264]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 8003346:	4013      	ands	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800334a:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	43db      	mvns	r3, r3
 8003352:	493f      	ldr	r1, [pc, #252]	@ (8003450 <HAL_GPIO_DeInit+0x214>)
 8003354:	4013      	ands	r3, r2
 8003356:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003368:	4a2e      	ldr	r2, [pc, #184]	@ (8003424 <HAL_GPIO_DeInit+0x1e8>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	3302      	adds	r3, #2
 8003370:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	43da      	mvns	r2, r3
 8003378:	482a      	ldr	r0, [pc, #168]	@ (8003424 <HAL_GPIO_DeInit+0x1e8>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	400a      	ands	r2, r1
 8003380:	3302      	adds	r3, #2
 8003382:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2103      	movs	r1, #3
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	401a      	ands	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	08d2      	lsrs	r2, r2, #3
 80033bc:	4019      	ands	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2103      	movs	r1, #3
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	401a      	ands	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	2101      	movs	r1, #1
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	401a      	ands	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2103      	movs	r1, #3
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	401a      	ands	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	f67f af22 	bls.w	8003258 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40013800 	.word	0x40013800
 8003428:	40020000 	.word	0x40020000
 800342c:	40020400 	.word	0x40020400
 8003430:	40020800 	.word	0x40020800
 8003434:	40020c00 	.word	0x40020c00
 8003438:	40021000 	.word	0x40021000
 800343c:	40021400 	.word	0x40021400
 8003440:	40021800 	.word	0x40021800
 8003444:	40021c00 	.word	0x40021c00
 8003448:	40022000 	.word	0x40022000
 800344c:	40022400 	.word	0x40022400
 8003450:	40013c00 	.word	0x40013c00

08003454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	807b      	strh	r3, [r7, #2]
 8003460:	4613      	mov	r3, r2
 8003462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003464:	787b      	ldrb	r3, [r7, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346a:	887a      	ldrh	r2, [r7, #2]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003470:	e003      	b.n	800347a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	041a      	lsls	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e12b      	b.n	80036f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe fdac 	bl	800200c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034ec:	f001 ff06 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 80034f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4a81      	ldr	r2, [pc, #516]	@ (80036fc <HAL_I2C_Init+0x274>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d807      	bhi.n	800350c <HAL_I2C_Init+0x84>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a80      	ldr	r2, [pc, #512]	@ (8003700 <HAL_I2C_Init+0x278>)
 8003500:	4293      	cmp	r3, r2
 8003502:	bf94      	ite	ls
 8003504:	2301      	movls	r3, #1
 8003506:	2300      	movhi	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e006      	b.n	800351a <HAL_I2C_Init+0x92>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a7d      	ldr	r2, [pc, #500]	@ (8003704 <HAL_I2C_Init+0x27c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	bf94      	ite	ls
 8003514:	2301      	movls	r3, #1
 8003516:	2300      	movhi	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0e7      	b.n	80036f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a78      	ldr	r2, [pc, #480]	@ (8003708 <HAL_I2C_Init+0x280>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0c9b      	lsrs	r3, r3, #18
 800352c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4a6a      	ldr	r2, [pc, #424]	@ (80036fc <HAL_I2C_Init+0x274>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d802      	bhi.n	800355c <HAL_I2C_Init+0xd4>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	e009      	b.n	8003570 <HAL_I2C_Init+0xe8>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	4a69      	ldr	r2, [pc, #420]	@ (800370c <HAL_I2C_Init+0x284>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	3301      	adds	r3, #1
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003582:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	495c      	ldr	r1, [pc, #368]	@ (80036fc <HAL_I2C_Init+0x274>)
 800358c:	428b      	cmp	r3, r1
 800358e:	d819      	bhi.n	80035c4 <HAL_I2C_Init+0x13c>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e59      	subs	r1, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fbb1 f3f3 	udiv	r3, r1, r3
 800359e:	1c59      	adds	r1, r3, #1
 80035a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035a4:	400b      	ands	r3, r1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_I2C_Init+0x138>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e59      	subs	r1, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	e051      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 80035c0:	2304      	movs	r3, #4
 80035c2:	e04f      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d111      	bne.n	80035f0 <HAL_I2C_Init+0x168>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	440b      	add	r3, r1
 80035da:	fbb0 f3f3 	udiv	r3, r0, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e012      	b.n	8003616 <HAL_I2C_Init+0x18e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e58      	subs	r0, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	0099      	lsls	r1, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Init+0x196>
 800361a:	2301      	movs	r3, #1
 800361c:	e022      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <HAL_I2C_Init+0x1bc>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1e58      	subs	r0, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	440b      	add	r3, r1
 8003634:	fbb0 f3f3 	udiv	r3, r0, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003642:	e00f      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e58      	subs	r0, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	0099      	lsls	r1, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	6809      	ldr	r1, [r1, #0]
 8003668:	4313      	orrs	r3, r2
 800366a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6911      	ldr	r1, [r2, #16]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68d2      	ldr	r2, [r2, #12]
 800369e:	4311      	orrs	r1, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	000186a0 	.word	0x000186a0
 8003700:	001e847f 	.word	0x001e847f
 8003704:	003d08ff 	.word	0x003d08ff
 8003708:	431bde83 	.word	0x431bde83
 800370c:	10624dd3 	.word	0x10624dd3

08003710 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	460b      	mov	r3, r1
 8003724:	813b      	strh	r3, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800372a:	f7ff fac5 	bl	8002cb8 <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	f040 80d9 	bne.w	80038f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2319      	movs	r3, #25
 8003744:	2201      	movs	r2, #1
 8003746:	496d      	ldr	r1, [pc, #436]	@ (80038fc <HAL_I2C_Mem_Write+0x1ec>)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fc8b 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	e0cc      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Mem_Write+0x56>
 8003762:	2302      	movs	r3, #2
 8003764:	e0c5      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d007      	beq.n	800378c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2221      	movs	r2, #33	@ 0x21
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	@ 0x40
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003900 <HAL_I2C_Mem_Write+0x1f0>)
 80037cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ce:	88f8      	ldrh	r0, [r7, #6]
 80037d0:	893a      	ldrh	r2, [r7, #8]
 80037d2:	8979      	ldrh	r1, [r7, #10]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	4603      	mov	r3, r0
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fac2 	bl	8003d68 <I2C_RequestMemoryWrite>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d052      	beq.n	8003890 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e081      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fd50 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	2b04      	cmp	r3, #4
 8003804:	d107      	bne.n	8003816 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06b      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d11b      	bne.n	8003890 <HAL_I2C_Mem_Write+0x180>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d017      	beq.n	8003890 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1aa      	bne.n	80037ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fd43 	bl	8004328 <I2C_WaitOnBTFFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d107      	bne.n	80038c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e016      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	00100002 	.word	0x00100002
 8003900:	ffff0000 	.word	0xffff0000

08003904 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	@ 0x30
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	461a      	mov	r2, r3
 8003912:	4603      	mov	r3, r0
 8003914:	817b      	strh	r3, [r7, #10]
 8003916:	460b      	mov	r3, r1
 8003918:	813b      	strh	r3, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800391e:	f7ff f9cb 	bl	8002cb8 <HAL_GetTick>
 8003922:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b20      	cmp	r3, #32
 800392e:	f040 8214 	bne.w	8003d5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2319      	movs	r3, #25
 8003938:	2201      	movs	r2, #1
 800393a:	497b      	ldr	r1, [pc, #492]	@ (8003b28 <HAL_I2C_Mem_Read+0x224>)
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fb91 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
 800394a:	e207      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_I2C_Mem_Read+0x56>
 8003956:	2302      	movs	r3, #2
 8003958:	e200      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d007      	beq.n	8003980 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2222      	movs	r2, #34	@ 0x22
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	@ 0x40
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a5b      	ldr	r2, [pc, #364]	@ (8003b2c <HAL_I2C_Mem_Read+0x228>)
 80039c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039c2:	88f8      	ldrh	r0, [r7, #6]
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	8979      	ldrh	r1, [r7, #10]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4603      	mov	r3, r0
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fa5e 	bl	8003e94 <I2C_RequestMemoryRead>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e1bc      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d113      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	623b      	str	r3, [r7, #32]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	623b      	str	r3, [r7, #32]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	623b      	str	r3, [r7, #32]
 80039fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e190      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d11b      	bne.n	8003a52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e170      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d11b      	bne.n	8003a92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	e150      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003aa8:	e144      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f200 80f1 	bhi.w	8003c96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d123      	bne.n	8003b04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003abe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fc79 	bl	80043b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e145      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b02:	e117      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d14e      	bne.n	8003baa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b12:	2200      	movs	r2, #0
 8003b14:	4906      	ldr	r1, [pc, #24]	@ (8003b30 <HAL_I2C_Mem_Read+0x22c>)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 faa4 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e11a      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
 8003b26:	bf00      	nop
 8003b28:	00100002 	.word	0x00100002
 8003b2c:	ffff0000 	.word	0xffff0000
 8003b30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ba8:	e0c4      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	496c      	ldr	r1, [pc, #432]	@ (8003d64 <HAL_I2C_Mem_Read+0x460>)
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fa55 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0cb      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4955      	ldr	r1, [pc, #340]	@ (8003d64 <HAL_I2C_Mem_Read+0x460>)
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fa27 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e09d      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c94:	e04e      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fb8c 	bl	80043b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e058      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d124      	bne.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d107      	bne.n	8003d02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f47f aeb6 	bne.w	8003aaa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3728      	adds	r7, #40	@ 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	00010004 	.word	0x00010004

08003d68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	813b      	strh	r3, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f960 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db8:	d103      	bne.n	8003dc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e05f      	b.n	8003e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	492d      	ldr	r1, [pc, #180]	@ (8003e90 <I2C_RequestMemoryWrite+0x128>)
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f9bb 	bl	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e04c      	b.n	8003e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e04:	6a39      	ldr	r1, [r7, #32]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fa46 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d107      	bne.n	8003e2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e02b      	b.n	8003e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d105      	bne.n	8003e40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	e021      	b.n	8003e84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	6a39      	ldr	r1, [r7, #32]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fa20 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d107      	bne.n	8003e76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e005      	b.n	8003e86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	00010002 	.word	0x00010002

08003e94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	817b      	strh	r3, [r7, #10]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	813b      	strh	r3, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f8c2 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef4:	d103      	bne.n	8003efe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003efc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0aa      	b.n	8004058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	4952      	ldr	r1, [pc, #328]	@ (8004060 <I2C_RequestMemoryRead+0x1cc>)
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f91d 	bl	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e097      	b.n	8004058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f9a8 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d107      	bne.n	8003f66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e076      	b.n	8004058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d105      	bne.n	8003f7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	e021      	b.n	8003fc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f7c:	893b      	ldrh	r3, [r7, #8]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f982 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e050      	b.n	8004058 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb6:	893b      	ldrh	r3, [r7, #8]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc2:	6a39      	ldr	r1, [r7, #32]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f967 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d107      	bne.n	8003fe8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e035      	b.n	8004058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	2200      	movs	r2, #0
 8004004:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f82b 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004022:	d103      	bne.n	800402c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e013      	b.n	8004058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004030:	897b      	ldrh	r3, [r7, #10]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	6a3a      	ldr	r2, [r7, #32]
 8004044:	4906      	ldr	r1, [pc, #24]	@ (8004060 <I2C_RequestMemoryRead+0x1cc>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f886 	bl	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	00010002 	.word	0x00010002

08004064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004074:	e048      	b.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800407c:	d044      	beq.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7fe fe1b 	bl	8002cb8 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d139      	bne.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	43da      	mvns	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	e00c      	b.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	43da      	mvns	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d116      	bne.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e023      	b.n	8004150 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d10d      	bne.n	800412e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	43da      	mvns	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4013      	ands	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	e00c      	b.n	8004148 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	429a      	cmp	r2, r3
 800414c:	d093      	beq.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004166:	e071      	b.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d123      	bne.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004186:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e067      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041c6:	d041      	beq.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c8:	f7fe fd76 	bl	8002cb8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d136      	bne.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10c      	bne.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	43da      	mvns	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e00b      	b.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	43da      	mvns	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e021      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	0c1b      	lsrs	r3, r3, #16
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10c      	bne.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e00b      	b.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f af6d 	bne.w	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a4:	e034      	b.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f8e3 	bl	8004472 <I2C_IsAcknowledgeFailed>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e034      	b.n	8004320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042bc:	d028      	beq.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe fcfb 	bl	8002cb8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11d      	bne.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b80      	cmp	r3, #128	@ 0x80
 80042e0:	d016      	beq.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e007      	b.n	8004320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b80      	cmp	r3, #128	@ 0x80
 800431c:	d1c3      	bne.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004334:	e034      	b.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f89b 	bl	8004472 <I2C_IsAcknowledgeFailed>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e034      	b.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800434c:	d028      	beq.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fe fcb3 	bl	8002cb8 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11d      	bne.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d016      	beq.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e007      	b.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d1c3      	bne.n	8004336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043c4:	e049      	b.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d119      	bne.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0210 	mvn.w	r2, #16
 80043dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e030      	b.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004408:	f7fe fc56 	bl	8002cb8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11d      	bne.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b40      	cmp	r3, #64	@ 0x40
 800442a:	d016      	beq.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e007      	b.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004464:	2b40      	cmp	r3, #64	@ 0x40
 8004466:	d1ae      	bne.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004488:	d11b      	bne.n	80044c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004492:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f043 0204 	orr.w	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0bf      	b.n	8004662 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd fdf2 	bl	80020e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004512:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6999      	ldr	r1, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004528:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6899      	ldr	r1, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b4a      	ldr	r3, [pc, #296]	@ (800466c <HAL_LTDC_Init+0x19c>)
 8004544:	400b      	ands	r3, r1
 8004546:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6899      	ldr	r1, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68d9      	ldr	r1, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b3e      	ldr	r3, [pc, #248]	@ (800466c <HAL_LTDC_Init+0x19c>)
 8004572:	400b      	ands	r3, r1
 8004574:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68d9      	ldr	r1, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b33      	ldr	r3, [pc, #204]	@ (800466c <HAL_LTDC_Init+0x19c>)
 80045a0:	400b      	ands	r3, r1
 80045a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6919      	ldr	r1, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6959      	ldr	r1, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b27      	ldr	r3, [pc, #156]	@ (800466c <HAL_LTDC_Init+0x19c>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6959      	ldr	r1, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0206 	orr.w	r2, r2, #6
 800463e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	f000f800 	.word	0xf000f800

08004670 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004670:	b5b0      	push	{r4, r5, r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_LTDC_ConfigLayer+0x1a>
 8004686:	2302      	movs	r3, #2
 8004688:	e02c      	b.n	80046e4 <HAL_LTDC_ConfigLayer+0x74>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2134      	movs	r1, #52	@ 0x34
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4614      	mov	r4, r2
 80046ae:	461d      	mov	r5, r3
 80046b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f811 	bl	80046ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdb0      	pop	{r4, r5, r7, pc}

080046ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	@ 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	4413      	add	r3, r2
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	01db      	lsls	r3, r3, #7
 8004718:	4413      	add	r3, r2
 800471a:	3384      	adds	r3, #132	@ 0x84
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	4611      	mov	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	01d2      	lsls	r2, r2, #7
 8004728:	440a      	add	r2, r1
 800472a:	3284      	adds	r2, #132	@ 0x84
 800472c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004730:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004742:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004744:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4619      	mov	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	01db      	lsls	r3, r3, #7
 8004750:	440b      	add	r3, r1
 8004752:	3384      	adds	r3, #132	@ 0x84
 8004754:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800475a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800476a:	4413      	add	r3, r2
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	01db      	lsls	r3, r3, #7
 800477a:	4413      	add	r3, r2
 800477c:	3384      	adds	r3, #132	@ 0x84
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	4611      	mov	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	01d2      	lsls	r2, r2, #7
 800478a:	440a      	add	r2, r1
 800478c:	3284      	adds	r2, #132	@ 0x84
 800478e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004792:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047a2:	4413      	add	r3, r2
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4619      	mov	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	01db      	lsls	r3, r3, #7
 80047b0:	440b      	add	r3, r1
 80047b2:	3384      	adds	r3, #132	@ 0x84
 80047b4:	4619      	mov	r1, r3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	01db      	lsls	r3, r3, #7
 80047c6:	4413      	add	r3, r2
 80047c8:	3384      	adds	r3, #132	@ 0x84
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	4611      	mov	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	01d2      	lsls	r2, r2, #7
 80047d6:	440a      	add	r2, r1
 80047d8:	3284      	adds	r2, #132	@ 0x84
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	01db      	lsls	r3, r3, #7
 80047ea:	4413      	add	r3, r2
 80047ec:	3384      	adds	r3, #132	@ 0x84
 80047ee:	461a      	mov	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004806:	041b      	lsls	r3, r3, #16
 8004808:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	061b      	lsls	r3, r3, #24
 8004810:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	01db      	lsls	r3, r3, #7
 800481c:	4413      	add	r3, r2
 800481e:	3384      	adds	r3, #132	@ 0x84
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	01db      	lsls	r3, r3, #7
 800482c:	4413      	add	r3, r2
 800482e:	3384      	adds	r3, #132	@ 0x84
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800483c:	461a      	mov	r2, r3
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	431a      	orrs	r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	01db      	lsls	r3, r3, #7
 8004850:	440b      	add	r3, r1
 8004852:	3384      	adds	r3, #132	@ 0x84
 8004854:	4619      	mov	r1, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	01db      	lsls	r3, r3, #7
 8004866:	4413      	add	r3, r2
 8004868:	3384      	adds	r3, #132	@ 0x84
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	4611      	mov	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	01d2      	lsls	r2, r2, #7
 8004876:	440a      	add	r2, r1
 8004878:	3284      	adds	r2, #132	@ 0x84
 800487a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800487e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	01db      	lsls	r3, r3, #7
 800488a:	4413      	add	r3, r2
 800488c:	3384      	adds	r3, #132	@ 0x84
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	01db      	lsls	r3, r3, #7
 80048a0:	4413      	add	r3, r2
 80048a2:	3384      	adds	r3, #132	@ 0x84
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4611      	mov	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	01d2      	lsls	r2, r2, #7
 80048b0:	440a      	add	r2, r1
 80048b2:	3284      	adds	r2, #132	@ 0x84
 80048b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80048b8:	f023 0307 	bic.w	r3, r3, #7
 80048bc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	6809      	ldr	r1, [r1, #0]
 80048ca:	4608      	mov	r0, r1
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	01c9      	lsls	r1, r1, #7
 80048d0:	4401      	add	r1, r0
 80048d2:	3184      	adds	r1, #132	@ 0x84
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	01db      	lsls	r3, r3, #7
 80048e2:	4413      	add	r3, r2
 80048e4:	3384      	adds	r3, #132	@ 0x84
 80048e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	01db      	lsls	r3, r3, #7
 80048f2:	4413      	add	r3, r2
 80048f4:	3384      	adds	r3, #132	@ 0x84
 80048f6:	461a      	mov	r2, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	01db      	lsls	r3, r3, #7
 8004906:	4413      	add	r3, r2
 8004908:	3384      	adds	r3, #132	@ 0x84
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800491a:	2304      	movs	r3, #4
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	e01b      	b.n	8004958 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d102      	bne.n	800492e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004928:	2303      	movs	r3, #3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e014      	b.n	8004958 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d00b      	beq.n	800494e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800493a:	2b02      	cmp	r3, #2
 800493c:	d007      	beq.n	800494e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004942:	2b03      	cmp	r3, #3
 8004944:	d003      	beq.n	800494e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800494a:	2b07      	cmp	r3, #7
 800494c:	d102      	bne.n	8004954 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800494e:	2302      	movs	r3, #2
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e001      	b.n	8004958 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004954:	2301      	movs	r3, #1
 8004956:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	01db      	lsls	r3, r3, #7
 8004962:	4413      	add	r3, r2
 8004964:	3384      	adds	r3, #132	@ 0x84
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	4611      	mov	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	01d2      	lsls	r2, r2, #7
 8004972:	440a      	add	r2, r1
 8004974:	3284      	adds	r2, #132	@ 0x84
 8004976:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800497a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	1acb      	subs	r3, r1, r3
 8004992:	69f9      	ldr	r1, [r7, #28]
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6809      	ldr	r1, [r1, #0]
 800499e:	4608      	mov	r0, r1
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	01c9      	lsls	r1, r1, #7
 80049a4:	4401      	add	r1, r0
 80049a6:	3184      	adds	r1, #132	@ 0x84
 80049a8:	4313      	orrs	r3, r2
 80049aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	01db      	lsls	r3, r3, #7
 80049b6:	4413      	add	r3, r2
 80049b8:	3384      	adds	r3, #132	@ 0x84
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	4611      	mov	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	01d2      	lsls	r2, r2, #7
 80049c6:	440a      	add	r2, r1
 80049c8:	3284      	adds	r2, #132	@ 0x84
 80049ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80049ce:	f023 0307 	bic.w	r3, r3, #7
 80049d2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	01db      	lsls	r3, r3, #7
 80049de:	4413      	add	r3, r2
 80049e0:	3384      	adds	r3, #132	@ 0x84
 80049e2:	461a      	mov	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	4413      	add	r3, r2
 80049f6:	3384      	adds	r3, #132	@ 0x84
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	4611      	mov	r1, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	01d2      	lsls	r2, r2, #7
 8004a04:	440a      	add	r2, r1
 8004a06:	3284      	adds	r2, #132	@ 0x84
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6013      	str	r3, [r2, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	3724      	adds	r7, #36	@ 0x24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e267      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d075      	beq.n	8004b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a3a:	4b88      	ldr	r3, [pc, #544]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d00c      	beq.n	8004a60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a46:	4b85      	ldr	r3, [pc, #532]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d112      	bne.n	8004a78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a52:	4b82      	ldr	r3, [pc, #520]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a5e:	d10b      	bne.n	8004a78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	4b7e      	ldr	r3, [pc, #504]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d05b      	beq.n	8004b24 <HAL_RCC_OscConfig+0x108>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d157      	bne.n	8004b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e242      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x74>
 8004a82:	4b76      	ldr	r3, [pc, #472]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a75      	ldr	r2, [pc, #468]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e01d      	b.n	8004acc <HAL_RCC_OscConfig+0xb0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x98>
 8004a9a:	4b70      	ldr	r3, [pc, #448]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6f      	ldr	r2, [pc, #444]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a6c      	ldr	r2, [pc, #432]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0xb0>
 8004ab4:	4b69      	ldr	r3, [pc, #420]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a68      	ldr	r2, [pc, #416]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b66      	ldr	r3, [pc, #408]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a65      	ldr	r2, [pc, #404]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d013      	beq.n	8004afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fe f8f0 	bl	8002cb8 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fe f8ec 	bl	8002cb8 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	@ 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e207      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b5b      	ldr	r3, [pc, #364]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0xc0>
 8004afa:	e014      	b.n	8004b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe f8dc 	bl	8002cb8 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fe f8d8 	bl	8002cb8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	@ 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1f3      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	4b51      	ldr	r3, [pc, #324]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0xe8>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d063      	beq.n	8004bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b32:	4b4a      	ldr	r3, [pc, #296]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3e:	4b47      	ldr	r3, [pc, #284]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d11c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b4a:	4b44      	ldr	r3, [pc, #272]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d116      	bne.n	8004b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b56:	4b41      	ldr	r3, [pc, #260]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_RCC_OscConfig+0x152>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e1c7      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4937      	ldr	r1, [pc, #220]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	e03a      	b.n	8004bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d020      	beq.n	8004bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8c:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <HAL_RCC_OscConfig+0x244>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fe f891 	bl	8002cb8 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9a:	f7fe f88d 	bl	8002cb8 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e1a8      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bac:	4b2b      	ldr	r3, [pc, #172]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb8:	4b28      	ldr	r3, [pc, #160]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4925      	ldr	r1, [pc, #148]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]
 8004bcc:	e015      	b.n	8004bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bce:	4b24      	ldr	r3, [pc, #144]	@ (8004c60 <HAL_RCC_OscConfig+0x244>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fe f870 	bl	8002cb8 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bdc:	f7fe f86c 	bl	8002cb8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e187      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bee:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d036      	beq.n	8004c74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d016      	beq.n	8004c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <HAL_RCC_OscConfig+0x248>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fe f850 	bl	8002cb8 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1c:	f7fe f84c 	bl	8002cb8 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e167      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_RCC_OscConfig+0x240>)
 8004c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x200>
 8004c3a:	e01b      	b.n	8004c74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c3c:	4b09      	ldr	r3, [pc, #36]	@ (8004c64 <HAL_RCC_OscConfig+0x248>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c42:	f7fe f839 	bl	8002cb8 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c48:	e00e      	b.n	8004c68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7fe f835 	bl	8002cb8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d907      	bls.n	8004c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e150      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	42470000 	.word	0x42470000
 8004c64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c68:	4b88      	ldr	r3, [pc, #544]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ea      	bne.n	8004c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8097 	beq.w	8004db0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c82:	2300      	movs	r3, #0
 8004c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c86:	4b81      	ldr	r3, [pc, #516]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10f      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	4b7d      	ldr	r3, [pc, #500]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb2:	4b77      	ldr	r3, [pc, #476]	@ (8004e90 <HAL_RCC_OscConfig+0x474>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d118      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cbe:	4b74      	ldr	r3, [pc, #464]	@ (8004e90 <HAL_RCC_OscConfig+0x474>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a73      	ldr	r2, [pc, #460]	@ (8004e90 <HAL_RCC_OscConfig+0x474>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cca:	f7fd fff5 	bl	8002cb8 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd2:	f7fd fff1 	bl	8002cb8 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e10c      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e90 <HAL_RCC_OscConfig+0x474>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCC_OscConfig+0x2ea>
 8004cf8:	4b64      	ldr	r3, [pc, #400]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a63      	ldr	r2, [pc, #396]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d04:	e01c      	b.n	8004d40 <HAL_RCC_OscConfig+0x324>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b05      	cmp	r3, #5
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x30c>
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d12:	4a5e      	ldr	r2, [pc, #376]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d14:	f043 0304 	orr.w	r3, r3, #4
 8004d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d26:	e00b      	b.n	8004d40 <HAL_RCC_OscConfig+0x324>
 8004d28:	4b58      	ldr	r3, [pc, #352]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2c:	4a57      	ldr	r2, [pc, #348]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d34:	4b55      	ldr	r3, [pc, #340]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	4a54      	ldr	r2, [pc, #336]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d3a:	f023 0304 	bic.w	r3, r3, #4
 8004d3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d015      	beq.n	8004d74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fd ffb6 	bl	8002cb8 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d50:	f7fd ffb2 	bl	8002cb8 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e0cb      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	4b49      	ldr	r3, [pc, #292]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0ee      	beq.n	8004d50 <HAL_RCC_OscConfig+0x334>
 8004d72:	e014      	b.n	8004d9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d74:	f7fd ffa0 	bl	8002cb8 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fd ff9c 	bl	8002cb8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0b5      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d92:	4b3e      	ldr	r3, [pc, #248]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ee      	bne.n	8004d7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4b39      	ldr	r3, [pc, #228]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	4a38      	ldr	r2, [pc, #224]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a1 	beq.w	8004efc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dba:	4b34      	ldr	r3, [pc, #208]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d05c      	beq.n	8004e80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d141      	bne.n	8004e52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dce:	4b31      	ldr	r3, [pc, #196]	@ (8004e94 <HAL_RCC_OscConfig+0x478>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd4:	f7fd ff70 	bl	8002cb8 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fd ff6c 	bl	8002cb8 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e087      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dee:	4b27      	ldr	r3, [pc, #156]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69da      	ldr	r2, [r3, #28]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	019b      	lsls	r3, r3, #6
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	3b01      	subs	r3, #1
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	061b      	lsls	r3, r3, #24
 8004e1e:	491b      	ldr	r1, [pc, #108]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e24:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <HAL_RCC_OscConfig+0x478>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fd ff45 	bl	8002cb8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd ff41 	bl	8002cb8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e05c      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x416>
 8004e50:	e054      	b.n	8004efc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e52:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <HAL_RCC_OscConfig+0x478>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fd ff2e 	bl	8002cb8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fd ff2a 	bl	8002cb8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e045      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_RCC_OscConfig+0x470>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x444>
 8004e7e:	e03d      	b.n	8004efc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e038      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40007000 	.word	0x40007000
 8004e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	@ (8004f08 <HAL_RCC_OscConfig+0x4ec>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d028      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d121      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d11a      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d111      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800

08004f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0cc      	b.n	80050ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b68      	ldr	r3, [pc, #416]	@ (80050c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d90c      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b65      	ldr	r3, [pc, #404]	@ (80050c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b63      	ldr	r3, [pc, #396]	@ (80050c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0b8      	b.n	80050ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f60:	4b59      	ldr	r3, [pc, #356]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a58      	ldr	r2, [pc, #352]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f78:	4b53      	ldr	r3, [pc, #332]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4a52      	ldr	r2, [pc, #328]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f84:	4b50      	ldr	r3, [pc, #320]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	494d      	ldr	r1, [pc, #308]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d044      	beq.n	800502c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d107      	bne.n	8004fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004faa:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d119      	bne.n	8004fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e07f      	b.n	80050ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d003      	beq.n	8004fca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d107      	bne.n	8004fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fca:	4b3f      	ldr	r3, [pc, #252]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e06f      	b.n	80050ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fda:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e067      	b.n	80050ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fea:	4b37      	ldr	r3, [pc, #220]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f023 0203 	bic.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4934      	ldr	r1, [pc, #208]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ffc:	f7fd fe5c 	bl	8002cb8 <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	e00a      	b.n	800501a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005004:	f7fd fe58 	bl	8002cb8 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e04f      	b.n	80050ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501a:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 020c 	and.w	r2, r3, #12
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	429a      	cmp	r2, r3
 800502a:	d1eb      	bne.n	8005004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800502c:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <HAL_RCC_ClockConfig+0x1b8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d20c      	bcs.n	8005054 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b22      	ldr	r3, [pc, #136]	@ (80050c4 <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b20      	ldr	r3, [pc, #128]	@ (80050c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e032      	b.n	80050ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005060:	4b19      	ldr	r3, [pc, #100]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4916      	ldr	r1, [pc, #88]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800507e:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	490e      	ldr	r1, [pc, #56]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005092:	f000 f821 	bl	80050d8 <HAL_RCC_GetSysClockFreq>
 8005096:	4602      	mov	r2, r0
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	490a      	ldr	r1, [pc, #40]	@ (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 80050a4:	5ccb      	ldrb	r3, [r1, r3]
 80050a6:	fa22 f303 	lsr.w	r3, r2, r3
 80050aa:	4a09      	ldr	r2, [pc, #36]	@ (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050ae:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fd fdbc 	bl	8002c30 <HAL_InitTick>

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40023c00 	.word	0x40023c00
 80050c8:	40023800 	.word	0x40023800
 80050cc:	08008560 	.word	0x08008560
 80050d0:	20000148 	.word	0x20000148
 80050d4:	2000014c 	.word	0x2000014c

080050d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050dc:	b094      	sub	sp, #80	@ 0x50
 80050de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050f0:	4b79      	ldr	r3, [pc, #484]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d00d      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x40>
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	f200 80e1 	bhi.w	80052c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x34>
 8005106:	2b04      	cmp	r3, #4
 8005108:	d003      	beq.n	8005112 <HAL_RCC_GetSysClockFreq+0x3a>
 800510a:	e0db      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800510c:	4b73      	ldr	r3, [pc, #460]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x204>)
 800510e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005110:	e0db      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005112:	4b73      	ldr	r3, [pc, #460]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005114:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005116:	e0d8      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005118:	4b6f      	ldr	r3, [pc, #444]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005120:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005122:	4b6d      	ldr	r3, [pc, #436]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d063      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800512e:	4b6a      	ldr	r3, [pc, #424]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	099b      	lsrs	r3, r3, #6
 8005134:	2200      	movs	r2, #0
 8005136:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005138:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005140:	633b      	str	r3, [r7, #48]	@ 0x30
 8005142:	2300      	movs	r3, #0
 8005144:	637b      	str	r3, [r7, #52]	@ 0x34
 8005146:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800514a:	4622      	mov	r2, r4
 800514c:	462b      	mov	r3, r5
 800514e:	f04f 0000 	mov.w	r0, #0
 8005152:	f04f 0100 	mov.w	r1, #0
 8005156:	0159      	lsls	r1, r3, #5
 8005158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800515c:	0150      	lsls	r0, r2, #5
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4621      	mov	r1, r4
 8005164:	1a51      	subs	r1, r2, r1
 8005166:	6139      	str	r1, [r7, #16]
 8005168:	4629      	mov	r1, r5
 800516a:	eb63 0301 	sbc.w	r3, r3, r1
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800517c:	4659      	mov	r1, fp
 800517e:	018b      	lsls	r3, r1, #6
 8005180:	4651      	mov	r1, sl
 8005182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005186:	4651      	mov	r1, sl
 8005188:	018a      	lsls	r2, r1, #6
 800518a:	4651      	mov	r1, sl
 800518c:	ebb2 0801 	subs.w	r8, r2, r1
 8005190:	4659      	mov	r1, fp
 8005192:	eb63 0901 	sbc.w	r9, r3, r1
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051aa:	4690      	mov	r8, r2
 80051ac:	4699      	mov	r9, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	eb18 0303 	adds.w	r3, r8, r3
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	462b      	mov	r3, r5
 80051b8:	eb49 0303 	adc.w	r3, r9, r3
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051ca:	4629      	mov	r1, r5
 80051cc:	024b      	lsls	r3, r1, #9
 80051ce:	4621      	mov	r1, r4
 80051d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051d4:	4621      	mov	r1, r4
 80051d6:	024a      	lsls	r2, r1, #9
 80051d8:	4610      	mov	r0, r2
 80051da:	4619      	mov	r1, r3
 80051dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051de:	2200      	movs	r2, #0
 80051e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051e8:	f7fb f808 	bl	80001fc <__aeabi_uldivmod>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4613      	mov	r3, r2
 80051f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f4:	e058      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f6:	4b38      	ldr	r3, [pc, #224]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	2200      	movs	r2, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	4611      	mov	r1, r2
 8005202:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005206:	623b      	str	r3, [r7, #32]
 8005208:	2300      	movs	r3, #0
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
 800520c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	f04f 0000 	mov.w	r0, #0
 8005218:	f04f 0100 	mov.w	r1, #0
 800521c:	0159      	lsls	r1, r3, #5
 800521e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005222:	0150      	lsls	r0, r2, #5
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4641      	mov	r1, r8
 800522a:	ebb2 0a01 	subs.w	sl, r2, r1
 800522e:	4649      	mov	r1, r9
 8005230:	eb63 0b01 	sbc.w	fp, r3, r1
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005240:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005244:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005248:	ebb2 040a 	subs.w	r4, r2, sl
 800524c:	eb63 050b 	sbc.w	r5, r3, fp
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	00eb      	lsls	r3, r5, #3
 800525a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800525e:	00e2      	lsls	r2, r4, #3
 8005260:	4614      	mov	r4, r2
 8005262:	461d      	mov	r5, r3
 8005264:	4643      	mov	r3, r8
 8005266:	18e3      	adds	r3, r4, r3
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	464b      	mov	r3, r9
 800526c:	eb45 0303 	adc.w	r3, r5, r3
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800527e:	4629      	mov	r1, r5
 8005280:	028b      	lsls	r3, r1, #10
 8005282:	4621      	mov	r1, r4
 8005284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005288:	4621      	mov	r1, r4
 800528a:	028a      	lsls	r2, r1, #10
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005292:	2200      	movs	r2, #0
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	61fa      	str	r2, [r7, #28]
 8005298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800529c:	f7fa ffae 	bl	80001fc <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	3301      	adds	r3, #1
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052c2:	e002      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x204>)
 80052c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3750      	adds	r7, #80	@ 0x50
 80052d0:	46bd      	mov	sp, r7
 80052d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d6:	bf00      	nop
 80052d8:	40023800 	.word	0x40023800
 80052dc:	00f42400 	.word	0x00f42400
 80052e0:	007a1200 	.word	0x007a1200

080052e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e8:	4b03      	ldr	r3, [pc, #12]	@ (80052f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000148 	.word	0x20000148

080052fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005300:	f7ff fff0 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	@ (800531c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	0a9b      	lsrs	r3, r3, #10
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4903      	ldr	r1, [pc, #12]	@ (8005320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40023800 	.word	0x40023800
 8005320:	08008570 	.word	0x08008570

08005324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d075      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005358:	4b91      	ldr	r3, [pc, #580]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800535e:	f7fd fcab 	bl	8002cb8 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005366:	f7fd fca7 	bl	8002cb8 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e189      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005378:	4b8a      	ldr	r3, [pc, #552]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	019a      	lsls	r2, r3, #6
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	071b      	lsls	r3, r3, #28
 800539c:	4981      	ldr	r1, [pc, #516]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01f      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053b0:	4b7c      	ldr	r3, [pc, #496]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b6:	0f1b      	lsrs	r3, r3, #28
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	019a      	lsls	r2, r3, #6
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	071b      	lsls	r3, r3, #28
 80053d0:	4974      	ldr	r1, [pc, #464]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053d8:	4b72      	ldr	r3, [pc, #456]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053de:	f023 021f 	bic.w	r2, r3, #31
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	496e      	ldr	r1, [pc, #440]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	019a      	lsls	r2, r3, #6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	071b      	lsls	r3, r3, #28
 8005410:	4964      	ldr	r1, [pc, #400]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005418:	4b61      	ldr	r3, [pc, #388]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800541e:	f7fd fc4b 	bl	8002cb8 <HAL_GetTick>
 8005422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005426:	f7fd fc47 	bl	8002cb8 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e129      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005438:	4b5a      	ldr	r3, [pc, #360]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d079      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800545c:	4b52      	ldr	r3, [pc, #328]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005462:	f7fd fc29 	bl	8002cb8 <HAL_GetTick>
 8005466:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005468:	e008      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800546a:	f7fd fc25 	bl	8002cb8 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e107      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800547c:	4b49      	ldr	r3, [pc, #292]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005488:	d0ef      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d020      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005496:	4b43      	ldr	r3, [pc, #268]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	0f1b      	lsrs	r3, r3, #28
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	019a      	lsls	r2, r3, #6
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	061b      	lsls	r3, r3, #24
 80054b0:	431a      	orrs	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	071b      	lsls	r3, r3, #28
 80054b6:	493b      	ldr	r1, [pc, #236]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054be:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	4934      	ldr	r1, [pc, #208]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01e      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054e4:	4b2f      	ldr	r3, [pc, #188]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	0e1b      	lsrs	r3, r3, #24
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	019a      	lsls	r2, r3, #6
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	071b      	lsls	r3, r3, #28
 8005504:	4927      	ldr	r1, [pc, #156]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005512:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	4922      	ldr	r1, [pc, #136]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005522:	4b21      	ldr	r3, [pc, #132]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005528:	f7fd fbc6 	bl	8002cb8 <HAL_GetTick>
 800552c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005530:	f7fd fbc2 	bl	8002cb8 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e0a4      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005542:	4b18      	ldr	r3, [pc, #96]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800554e:	d1ef      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 808b 	beq.w	8005674 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	4a0f      	ldr	r2, [pc, #60]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556c:	6413      	str	r3, [r2, #64]	@ 0x40
 800556e:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a0b      	ldr	r2, [pc, #44]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005584:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005586:	f7fd fb97 	bl	8002cb8 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800558c:	e010      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558e:	f7fd fb93 	bl	8002cb8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d909      	bls.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e075      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80055a0:	42470068 	.word	0x42470068
 80055a4:	40023800 	.word	0x40023800
 80055a8:	42470070 	.word	0x42470070
 80055ac:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055b0:	4b38      	ldr	r3, [pc, #224]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0e8      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055bc:	4b36      	ldr	r3, [pc, #216]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02f      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d028      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055da:	4b2f      	ldr	r3, [pc, #188]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055e4:	4b2d      	ldr	r3, [pc, #180]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ea:	4b2c      	ldr	r3, [pc, #176]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055f0:	4a29      	ldr	r2, [pc, #164]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055f6:	4b28      	ldr	r3, [pc, #160]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d114      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005602:	f7fd fb59 	bl	8002cb8 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005608:	e00a      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560a:	f7fd fb55 	bl	8002cb8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e035      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005620:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ee      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005638:	d10d      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800563a:	4b17      	ldr	r3, [pc, #92]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800564a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564e:	4912      	ldr	r1, [pc, #72]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005650:	4313      	orrs	r3, r2
 8005652:	608b      	str	r3, [r1, #8]
 8005654:	e005      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005656:	4b10      	ldr	r3, [pc, #64]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	4a0f      	ldr	r2, [pc, #60]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800565c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005664:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566e:	490a      	ldr	r1, [pc, #40]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005670:	4313      	orrs	r3, r2
 8005672:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005686:	4b06      	ldr	r3, [pc, #24]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005688:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40007000 	.word	0x40007000
 8005698:	40023800 	.word	0x40023800
 800569c:	42470e40 	.word	0x42470e40
 80056a0:	424711e0 	.word	0x424711e0

080056a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e01c      	b.n	80056f0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	795b      	ldrb	r3, [r3, #5]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc fe32 	bl	8002330 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0204 	orr.w	r2, r2, #4
 80056e0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	791b      	ldrb	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_RNG_GenerateRandomNumber+0x1a>
 800570e:	2302      	movs	r3, #2
 8005710:	e044      	b.n	800579c <HAL_RNG_GenerateRandomNumber+0xa4>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	795b      	ldrb	r3, [r3, #5]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d133      	bne.n	800578a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005728:	f7fd fac6 	bl	8002cb8 <HAL_GetTick>
 800572c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800572e:	e018      	b.n	8005762 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005730:	f7fd fac2 	bl	8002cb8 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d911      	bls.n	8005762 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d00a      	beq.n	8005762 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e01c      	b.n	800579c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d1df      	bne.n	8005730 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	715a      	strb	r2, [r3, #5]
 8005788:	e004      	b.n	8005794 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2204      	movs	r2, #4
 800578e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	711a      	strb	r2, [r3, #4]

  return status;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07b      	b.n	80058ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d108      	bne.n	80057d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057c6:	d009      	beq.n	80057dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	61da      	str	r2, [r3, #28]
 80057ce:	e005      	b.n	80057dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fc fdbc 	bl	8002374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005812:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005860:	ea42 0103 	orr.w	r1, r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	f003 0104 	and.w	r1, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	f003 0210 	and.w	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800589c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e01a      	b.n	80058fe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fc fd8f 	bl	8002404 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b088      	sub	sp, #32
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005916:	f7fd f9cf 	bl	8002cb8 <HAL_GetTick>
 800591a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
 800592e:	e12a      	b.n	8005b86 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_Transmit+0x36>
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e122      	b.n	8005b86 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_SPI_Transmit+0x48>
 800594a:	2302      	movs	r3, #2
 800594c:	e11b      	b.n	8005b86 <HAL_SPI_Transmit+0x280>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2203      	movs	r2, #3
 800595a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800599c:	d10f      	bne.n	80059be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d007      	beq.n	80059dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059e4:	d152      	bne.n	8005a8c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_SPI_Transmit+0xee>
 80059ee:	8b7b      	ldrh	r3, [r7, #26]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d145      	bne.n	8005a80 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	881a      	ldrh	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	1c9a      	adds	r2, r3, #2
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a18:	e032      	b.n	8005a80 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d112      	bne.n	8005a4e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	1c9a      	adds	r2, r3, #2
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a4c:	e018      	b.n	8005a80 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4e:	f7fd f933 	bl	8002cb8 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d803      	bhi.n	8005a66 <HAL_SPI_Transmit+0x160>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a64:	d102      	bne.n	8005a6c <HAL_SPI_Transmit+0x166>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d109      	bne.n	8005a80 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e082      	b.n	8005b86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1c7      	bne.n	8005a1a <HAL_SPI_Transmit+0x114>
 8005a8a:	e053      	b.n	8005b34 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_Transmit+0x194>
 8005a94:	8b7b      	ldrh	r3, [r7, #26]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d147      	bne.n	8005b2a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ac0:	e033      	b.n	8005b2a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d113      	bne.n	8005af8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005af6:	e018      	b.n	8005b2a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af8:	f7fd f8de 	bl	8002cb8 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d803      	bhi.n	8005b10 <HAL_SPI_Transmit+0x20a>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b0e:	d102      	bne.n	8005b16 <HAL_SPI_Transmit+0x210>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e02d      	b.n	8005b86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1c6      	bne.n	8005ac2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f8bf 	bl	8005cbc <SPI_EndRxTxTransaction>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b9c:	b2db      	uxtb	r3, r3
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bbc:	f7fd f87c 	bl	8002cb8 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4413      	add	r3, r2
 8005bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bcc:	f7fd f874 	bl	8002cb8 <HAL_GetTick>
 8005bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bd2:	4b39      	ldr	r3, [pc, #228]	@ (8005cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	015b      	lsls	r3, r3, #5
 8005bd8:	0d1b      	lsrs	r3, r3, #20
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005be2:	e054      	b.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bea:	d050      	beq.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bec:	f7fd f864 	bl	8002cb8 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d902      	bls.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d13d      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c1a:	d111      	bne.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c24:	d004      	beq.n	8005c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c2e:	d107      	bne.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c48:	d10f      	bne.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e017      	b.n	8005cae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4013      	ands	r3, r2
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d19b      	bne.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000148 	.word	0x20000148

08005cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff ff6a 	bl	8005bac <SPI_WaitFlagStateUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e032      	b.n	8005d54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cee:	4b1b      	ldr	r3, [pc, #108]	@ (8005d5c <SPI_EndRxTxTransaction+0xa0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <SPI_EndRxTxTransaction+0xa4>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	0d5b      	lsrs	r3, r3, #21
 8005cfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d0c:	d112      	bne.n	8005d34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2200      	movs	r2, #0
 8005d16:	2180      	movs	r1, #128	@ 0x80
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ff47 	bl	8005bac <SPI_WaitFlagStateUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d016      	beq.n	8005d52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e00f      	b.n	8005d54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4a:	2b80      	cmp	r3, #128	@ 0x80
 8005d4c:	d0f2      	beq.n	8005d34 <SPI_EndRxTxTransaction+0x78>
 8005d4e:	e000      	b.n	8005d52 <SPI_EndRxTxTransaction+0x96>
        break;
 8005d50:	bf00      	nop
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000148 	.word	0x20000148
 8005d60:	165e9f81 	.word	0x165e9f81

08005d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e041      	b.n	8005dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fc fb58 	bl	8002440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4619      	mov	r1, r3
 8005da2:	4610      	mov	r0, r2
 8005da4:	f000 f8ce 	bl	8005f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d001      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e04e      	b.n	8005eba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a23      	ldr	r2, [pc, #140]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d022      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e46:	d01d      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d018      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a19      	ldr	r2, [pc, #100]	@ (8005edc <HAL_TIM_Base_Start_IT+0xd8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d111      	bne.n	8005ea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b06      	cmp	r3, #6
 8005e94:	d010      	beq.n	8005eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0201 	orr.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea6:	e007      	b.n	8005eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40010400 	.word	0x40010400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40001800 	.word	0x40001800

08005ee4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a1a      	ldr	r2, [r3, #32]
 8005f02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10f      	bne.n	8005f2c <HAL_TIM_Base_Stop_IT+0x48>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_Base_Stop_IT+0x48>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a46      	ldr	r2, [pc, #280]	@ (8006070 <TIM_Base_SetConfig+0x12c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f62:	d00f      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a43      	ldr	r2, [pc, #268]	@ (8006074 <TIM_Base_SetConfig+0x130>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a42      	ldr	r2, [pc, #264]	@ (8006078 <TIM_Base_SetConfig+0x134>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d007      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a41      	ldr	r2, [pc, #260]	@ (800607c <TIM_Base_SetConfig+0x138>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a40      	ldr	r2, [pc, #256]	@ (8006080 <TIM_Base_SetConfig+0x13c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d108      	bne.n	8005f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a35      	ldr	r2, [pc, #212]	@ (8006070 <TIM_Base_SetConfig+0x12c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d02b      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa4:	d027      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a32      	ldr	r2, [pc, #200]	@ (8006074 <TIM_Base_SetConfig+0x130>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d023      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a31      	ldr	r2, [pc, #196]	@ (8006078 <TIM_Base_SetConfig+0x134>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01f      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a30      	ldr	r2, [pc, #192]	@ (800607c <TIM_Base_SetConfig+0x138>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01b      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8006080 <TIM_Base_SetConfig+0x13c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d017      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006084 <TIM_Base_SetConfig+0x140>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006088 <TIM_Base_SetConfig+0x144>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00f      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800608c <TIM_Base_SetConfig+0x148>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8006090 <TIM_Base_SetConfig+0x14c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8006094 <TIM_Base_SetConfig+0x150>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a29      	ldr	r2, [pc, #164]	@ (8006098 <TIM_Base_SetConfig+0x154>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d108      	bne.n	8006008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a10      	ldr	r2, [pc, #64]	@ (8006070 <TIM_Base_SetConfig+0x12c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_Base_SetConfig+0xf8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a12      	ldr	r2, [pc, #72]	@ (8006080 <TIM_Base_SetConfig+0x13c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d103      	bne.n	8006044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	d105      	bne.n	8006062 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	611a      	str	r2, [r3, #16]
  }
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800
 800607c:	40000c00 	.word	0x40000c00
 8006080:	40010400 	.word	0x40010400
 8006084:	40014000 	.word	0x40014000
 8006088:	40014400 	.word	0x40014400
 800608c:	40014800 	.word	0x40014800
 8006090:	40001800 	.word	0x40001800
 8006094:	40001c00 	.word	0x40001c00
 8006098:	40002000 	.word	0x40002000

0800609c <findslot>:
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <findslot+0x2c>)
 800609e:	b510      	push	{r4, lr}
 80060a0:	4604      	mov	r4, r0
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	b118      	cbz	r0, 80060ae <findslot+0x12>
 80060a6:	6a03      	ldr	r3, [r0, #32]
 80060a8:	b90b      	cbnz	r3, 80060ae <findslot+0x12>
 80060aa:	f000 faed 	bl	8006688 <__sinit>
 80060ae:	2c13      	cmp	r4, #19
 80060b0:	d807      	bhi.n	80060c2 <findslot+0x26>
 80060b2:	4806      	ldr	r0, [pc, #24]	@ (80060cc <findslot+0x30>)
 80060b4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80060b8:	3201      	adds	r2, #1
 80060ba:	d002      	beq.n	80060c2 <findslot+0x26>
 80060bc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	2000      	movs	r0, #0
 80060c4:	e7fc      	b.n	80060c0 <findslot+0x24>
 80060c6:	bf00      	nop
 80060c8:	20000168 	.word	0x20000168
 80060cc:	20025c48 	.word	0x20025c48

080060d0 <error>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	4604      	mov	r4, r0
 80060d4:	f000 fb16 	bl	8006704 <__errno>
 80060d8:	2613      	movs	r6, #19
 80060da:	4605      	mov	r5, r0
 80060dc:	2700      	movs	r7, #0
 80060de:	4630      	mov	r0, r6
 80060e0:	4639      	mov	r1, r7
 80060e2:	beab      	bkpt	0x00ab
 80060e4:	4606      	mov	r6, r0
 80060e6:	602e      	str	r6, [r5, #0]
 80060e8:	4620      	mov	r0, r4
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060ec <checkerror>:
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d101      	bne.n	80060f4 <checkerror+0x8>
 80060f0:	f7ff bfee 	b.w	80060d0 <error>
 80060f4:	4770      	bx	lr

080060f6 <_swiread>:
 80060f6:	b530      	push	{r4, r5, lr}
 80060f8:	b085      	sub	sp, #20
 80060fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80060fe:	9203      	str	r2, [sp, #12]
 8006100:	2406      	movs	r4, #6
 8006102:	ad01      	add	r5, sp, #4
 8006104:	4620      	mov	r0, r4
 8006106:	4629      	mov	r1, r5
 8006108:	beab      	bkpt	0x00ab
 800610a:	4604      	mov	r4, r0
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff ffed 	bl	80060ec <checkerror>
 8006112:	b005      	add	sp, #20
 8006114:	bd30      	pop	{r4, r5, pc}

08006116 <_read>:
 8006116:	b570      	push	{r4, r5, r6, lr}
 8006118:	460e      	mov	r6, r1
 800611a:	4614      	mov	r4, r2
 800611c:	f7ff ffbe 	bl	800609c <findslot>
 8006120:	4605      	mov	r5, r0
 8006122:	b930      	cbnz	r0, 8006132 <_read+0x1c>
 8006124:	f000 faee 	bl	8006704 <__errno>
 8006128:	2309      	movs	r3, #9
 800612a:	6003      	str	r3, [r0, #0]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	6800      	ldr	r0, [r0, #0]
 8006134:	4622      	mov	r2, r4
 8006136:	4631      	mov	r1, r6
 8006138:	f7ff ffdd 	bl	80060f6 <_swiread>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d0f5      	beq.n	800612c <_read+0x16>
 8006140:	686b      	ldr	r3, [r5, #4]
 8006142:	1a20      	subs	r0, r4, r0
 8006144:	4403      	add	r3, r0
 8006146:	606b      	str	r3, [r5, #4]
 8006148:	e7f2      	b.n	8006130 <_read+0x1a>

0800614a <_swilseek>:
 800614a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	4616      	mov	r6, r2
 8006150:	f7ff ffa4 	bl	800609c <findslot>
 8006154:	4605      	mov	r5, r0
 8006156:	b940      	cbnz	r0, 800616a <_swilseek+0x20>
 8006158:	f000 fad4 	bl	8006704 <__errno>
 800615c:	2309      	movs	r3, #9
 800615e:	6003      	str	r3, [r0, #0]
 8006160:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006164:	4620      	mov	r0, r4
 8006166:	b003      	add	sp, #12
 8006168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616a:	2e02      	cmp	r6, #2
 800616c:	d903      	bls.n	8006176 <_swilseek+0x2c>
 800616e:	f000 fac9 	bl	8006704 <__errno>
 8006172:	2316      	movs	r3, #22
 8006174:	e7f3      	b.n	800615e <_swilseek+0x14>
 8006176:	2e01      	cmp	r6, #1
 8006178:	d112      	bne.n	80061a0 <_swilseek+0x56>
 800617a:	6843      	ldr	r3, [r0, #4]
 800617c:	18e4      	adds	r4, r4, r3
 800617e:	d4f6      	bmi.n	800616e <_swilseek+0x24>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	260a      	movs	r6, #10
 8006184:	e9cd 3400 	strd	r3, r4, [sp]
 8006188:	466f      	mov	r7, sp
 800618a:	4630      	mov	r0, r6
 800618c:	4639      	mov	r1, r7
 800618e:	beab      	bkpt	0x00ab
 8006190:	4606      	mov	r6, r0
 8006192:	4630      	mov	r0, r6
 8006194:	f7ff ffaa 	bl	80060ec <checkerror>
 8006198:	2800      	cmp	r0, #0
 800619a:	dbe1      	blt.n	8006160 <_swilseek+0x16>
 800619c:	606c      	str	r4, [r5, #4]
 800619e:	e7e1      	b.n	8006164 <_swilseek+0x1a>
 80061a0:	2e02      	cmp	r6, #2
 80061a2:	6803      	ldr	r3, [r0, #0]
 80061a4:	d1ec      	bne.n	8006180 <_swilseek+0x36>
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	260c      	movs	r6, #12
 80061aa:	466f      	mov	r7, sp
 80061ac:	4630      	mov	r0, r6
 80061ae:	4639      	mov	r1, r7
 80061b0:	beab      	bkpt	0x00ab
 80061b2:	4606      	mov	r6, r0
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7ff ff99 	bl	80060ec <checkerror>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d0d0      	beq.n	8006160 <_swilseek+0x16>
 80061be:	4404      	add	r4, r0
 80061c0:	e7de      	b.n	8006180 <_swilseek+0x36>

080061c2 <_lseek>:
 80061c2:	f7ff bfc2 	b.w	800614a <_swilseek>

080061c6 <_swiwrite>:
 80061c6:	b530      	push	{r4, r5, lr}
 80061c8:	b085      	sub	sp, #20
 80061ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80061ce:	9203      	str	r2, [sp, #12]
 80061d0:	2405      	movs	r4, #5
 80061d2:	ad01      	add	r5, sp, #4
 80061d4:	4620      	mov	r0, r4
 80061d6:	4629      	mov	r1, r5
 80061d8:	beab      	bkpt	0x00ab
 80061da:	4604      	mov	r4, r0
 80061dc:	4620      	mov	r0, r4
 80061de:	f7ff ff85 	bl	80060ec <checkerror>
 80061e2:	b005      	add	sp, #20
 80061e4:	bd30      	pop	{r4, r5, pc}

080061e6 <_write>:
 80061e6:	b570      	push	{r4, r5, r6, lr}
 80061e8:	460e      	mov	r6, r1
 80061ea:	4615      	mov	r5, r2
 80061ec:	f7ff ff56 	bl	800609c <findslot>
 80061f0:	4604      	mov	r4, r0
 80061f2:	b930      	cbnz	r0, 8006202 <_write+0x1c>
 80061f4:	f000 fa86 	bl	8006704 <__errno>
 80061f8:	2309      	movs	r3, #9
 80061fa:	6003      	str	r3, [r0, #0]
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006200:	bd70      	pop	{r4, r5, r6, pc}
 8006202:	6800      	ldr	r0, [r0, #0]
 8006204:	462a      	mov	r2, r5
 8006206:	4631      	mov	r1, r6
 8006208:	f7ff ffdd 	bl	80061c6 <_swiwrite>
 800620c:	1e03      	subs	r3, r0, #0
 800620e:	dbf5      	blt.n	80061fc <_write+0x16>
 8006210:	6862      	ldr	r2, [r4, #4]
 8006212:	1ae8      	subs	r0, r5, r3
 8006214:	4402      	add	r2, r0
 8006216:	42ab      	cmp	r3, r5
 8006218:	6062      	str	r2, [r4, #4]
 800621a:	d1f1      	bne.n	8006200 <_write+0x1a>
 800621c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006220:	2000      	movs	r0, #0
 8006222:	f7ff bf55 	b.w	80060d0 <error>

08006226 <_swiclose>:
 8006226:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006228:	2402      	movs	r4, #2
 800622a:	9001      	str	r0, [sp, #4]
 800622c:	ad01      	add	r5, sp, #4
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	beab      	bkpt	0x00ab
 8006234:	4604      	mov	r4, r0
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff ff58 	bl	80060ec <checkerror>
 800623c:	b003      	add	sp, #12
 800623e:	bd30      	pop	{r4, r5, pc}

08006240 <_close>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4605      	mov	r5, r0
 8006244:	f7ff ff2a 	bl	800609c <findslot>
 8006248:	4604      	mov	r4, r0
 800624a:	b930      	cbnz	r0, 800625a <_close+0x1a>
 800624c:	f000 fa5a 	bl	8006704 <__errno>
 8006250:	2309      	movs	r3, #9
 8006252:	6003      	str	r3, [r0, #0]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	3d01      	subs	r5, #1
 800625c:	2d01      	cmp	r5, #1
 800625e:	d809      	bhi.n	8006274 <_close+0x34>
 8006260:	4b07      	ldr	r3, [pc, #28]	@ (8006280 <_close+0x40>)
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	429a      	cmp	r2, r3
 8006268:	d104      	bne.n	8006274 <_close+0x34>
 800626a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	2000      	movs	r0, #0
 8006272:	e7f1      	b.n	8006258 <_close+0x18>
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	f7ff ffd6 	bl	8006226 <_swiclose>
 800627a:	2800      	cmp	r0, #0
 800627c:	d0f5      	beq.n	800626a <_close+0x2a>
 800627e:	e7eb      	b.n	8006258 <_close+0x18>
 8006280:	20025c48 	.word	0x20025c48

08006284 <_swistat>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	460c      	mov	r4, r1
 8006288:	f7ff ff08 	bl	800609c <findslot>
 800628c:	4605      	mov	r5, r0
 800628e:	b930      	cbnz	r0, 800629e <_swistat+0x1a>
 8006290:	f000 fa38 	bl	8006704 <__errno>
 8006294:	2309      	movs	r3, #9
 8006296:	6003      	str	r3, [r0, #0]
 8006298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062aa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80062ac:	260c      	movs	r6, #12
 80062ae:	4630      	mov	r0, r6
 80062b0:	4629      	mov	r1, r5
 80062b2:	beab      	bkpt	0x00ab
 80062b4:	4605      	mov	r5, r0
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7ff ff18 	bl	80060ec <checkerror>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d0eb      	beq.n	8006298 <_swistat+0x14>
 80062c0:	6120      	str	r0, [r4, #16]
 80062c2:	2000      	movs	r0, #0
 80062c4:	e7ea      	b.n	800629c <_swistat+0x18>

080062c6 <_stat>:
 80062c6:	b538      	push	{r3, r4, r5, lr}
 80062c8:	460d      	mov	r5, r1
 80062ca:	4604      	mov	r4, r0
 80062cc:	2258      	movs	r2, #88	@ 0x58
 80062ce:	2100      	movs	r1, #0
 80062d0:	4628      	mov	r0, r5
 80062d2:	f000 fa0f 	bl	80066f4 <memset>
 80062d6:	4620      	mov	r0, r4
 80062d8:	2100      	movs	r1, #0
 80062da:	f000 f811 	bl	8006300 <_swiopen>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	4604      	mov	r4, r0
 80062e2:	d00b      	beq.n	80062fc <_stat+0x36>
 80062e4:	686b      	ldr	r3, [r5, #4]
 80062e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80062ea:	606b      	str	r3, [r5, #4]
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7ff ffc9 	bl	8006284 <_swistat>
 80062f2:	4605      	mov	r5, r0
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff ffa3 	bl	8006240 <_close>
 80062fa:	462c      	mov	r4, r5
 80062fc:	4620      	mov	r0, r4
 80062fe:	bd38      	pop	{r3, r4, r5, pc}

08006300 <_swiopen>:
 8006300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006304:	4f29      	ldr	r7, [pc, #164]	@ (80063ac <_swiopen+0xac>)
 8006306:	b096      	sub	sp, #88	@ 0x58
 8006308:	4682      	mov	sl, r0
 800630a:	460e      	mov	r6, r1
 800630c:	2400      	movs	r4, #0
 800630e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8006312:	3301      	adds	r3, #1
 8006314:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006318:	d00c      	beq.n	8006334 <_swiopen+0x34>
 800631a:	3401      	adds	r4, #1
 800631c:	2c14      	cmp	r4, #20
 800631e:	d1f6      	bne.n	800630e <_swiopen+0xe>
 8006320:	f000 f9f0 	bl	8006704 <__errno>
 8006324:	2318      	movs	r3, #24
 8006326:	6003      	str	r3, [r0, #0]
 8006328:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800632c:	4620      	mov	r0, r4
 800632e:	b016      	add	sp, #88	@ 0x58
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006338:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800633c:	46e9      	mov	r9, sp
 800633e:	d109      	bne.n	8006354 <_swiopen+0x54>
 8006340:	4649      	mov	r1, r9
 8006342:	4650      	mov	r0, sl
 8006344:	f7ff ffbf 	bl	80062c6 <_stat>
 8006348:	3001      	adds	r0, #1
 800634a:	d003      	beq.n	8006354 <_swiopen+0x54>
 800634c:	f000 f9da 	bl	8006704 <__errno>
 8006350:	2311      	movs	r3, #17
 8006352:	e7e8      	b.n	8006326 <_swiopen+0x26>
 8006354:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006358:	f240 6301 	movw	r3, #1537	@ 0x601
 800635c:	07b2      	lsls	r2, r6, #30
 800635e:	bf48      	it	mi
 8006360:	f045 0502 	orrmi.w	r5, r5, #2
 8006364:	421e      	tst	r6, r3
 8006366:	bf18      	it	ne
 8006368:	f045 0504 	orrne.w	r5, r5, #4
 800636c:	0733      	lsls	r3, r6, #28
 800636e:	bf48      	it	mi
 8006370:	f025 0504 	bicmi.w	r5, r5, #4
 8006374:	4650      	mov	r0, sl
 8006376:	bf48      	it	mi
 8006378:	f045 0508 	orrmi.w	r5, r5, #8
 800637c:	f8cd a000 	str.w	sl, [sp]
 8006380:	f7f9 ff34 	bl	80001ec <strlen>
 8006384:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006388:	2501      	movs	r5, #1
 800638a:	4628      	mov	r0, r5
 800638c:	4649      	mov	r1, r9
 800638e:	beab      	bkpt	0x00ab
 8006390:	4605      	mov	r5, r0
 8006392:	2d00      	cmp	r5, #0
 8006394:	db05      	blt.n	80063a2 <_swiopen+0xa2>
 8006396:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800639a:	4447      	add	r7, r8
 800639c:	2300      	movs	r3, #0
 800639e:	607b      	str	r3, [r7, #4]
 80063a0:	e7c4      	b.n	800632c <_swiopen+0x2c>
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7ff fe94 	bl	80060d0 <error>
 80063a8:	4604      	mov	r4, r0
 80063aa:	e7bf      	b.n	800632c <_swiopen+0x2c>
 80063ac:	20025c48 	.word	0x20025c48

080063b0 <_get_semihosting_exts>:
 80063b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063b4:	4606      	mov	r6, r0
 80063b6:	460f      	mov	r7, r1
 80063b8:	4829      	ldr	r0, [pc, #164]	@ (8006460 <_get_semihosting_exts+0xb0>)
 80063ba:	2100      	movs	r1, #0
 80063bc:	4615      	mov	r5, r2
 80063be:	f7ff ff9f 	bl	8006300 <_swiopen>
 80063c2:	462a      	mov	r2, r5
 80063c4:	4604      	mov	r4, r0
 80063c6:	2100      	movs	r1, #0
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 f993 	bl	80066f4 <memset>
 80063ce:	1c63      	adds	r3, r4, #1
 80063d0:	d014      	beq.n	80063fc <_get_semihosting_exts+0x4c>
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff fe62 	bl	800609c <findslot>
 80063d8:	f04f 080c 	mov.w	r8, #12
 80063dc:	4681      	mov	r9, r0
 80063de:	4640      	mov	r0, r8
 80063e0:	4649      	mov	r1, r9
 80063e2:	beab      	bkpt	0x00ab
 80063e4:	4680      	mov	r8, r0
 80063e6:	4640      	mov	r0, r8
 80063e8:	f7ff fe80 	bl	80060ec <checkerror>
 80063ec:	2803      	cmp	r0, #3
 80063ee:	dd02      	ble.n	80063f6 <_get_semihosting_exts+0x46>
 80063f0:	1ec3      	subs	r3, r0, #3
 80063f2:	42ab      	cmp	r3, r5
 80063f4:	dc07      	bgt.n	8006406 <_get_semihosting_exts+0x56>
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff ff22 	bl	8006240 <_close>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006400:	b003      	add	sp, #12
 8006402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006406:	2204      	movs	r2, #4
 8006408:	eb0d 0102 	add.w	r1, sp, r2
 800640c:	4620      	mov	r0, r4
 800640e:	f7ff fe82 	bl	8006116 <_read>
 8006412:	2803      	cmp	r0, #3
 8006414:	ddef      	ble.n	80063f6 <_get_semihosting_exts+0x46>
 8006416:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800641a:	2b53      	cmp	r3, #83	@ 0x53
 800641c:	d1eb      	bne.n	80063f6 <_get_semihosting_exts+0x46>
 800641e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006422:	2b48      	cmp	r3, #72	@ 0x48
 8006424:	d1e7      	bne.n	80063f6 <_get_semihosting_exts+0x46>
 8006426:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800642a:	2b46      	cmp	r3, #70	@ 0x46
 800642c:	d1e3      	bne.n	80063f6 <_get_semihosting_exts+0x46>
 800642e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006432:	2b42      	cmp	r3, #66	@ 0x42
 8006434:	d1df      	bne.n	80063f6 <_get_semihosting_exts+0x46>
 8006436:	2201      	movs	r2, #1
 8006438:	4639      	mov	r1, r7
 800643a:	4620      	mov	r0, r4
 800643c:	f7ff fe85 	bl	800614a <_swilseek>
 8006440:	2800      	cmp	r0, #0
 8006442:	dbd8      	blt.n	80063f6 <_get_semihosting_exts+0x46>
 8006444:	462a      	mov	r2, r5
 8006446:	4631      	mov	r1, r6
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fe64 	bl	8006116 <_read>
 800644e:	4605      	mov	r5, r0
 8006450:	4620      	mov	r0, r4
 8006452:	f7ff fef5 	bl	8006240 <_close>
 8006456:	4628      	mov	r0, r5
 8006458:	f7ff fe48 	bl	80060ec <checkerror>
 800645c:	e7d0      	b.n	8006400 <_get_semihosting_exts+0x50>
 800645e:	bf00      	nop
 8006460:	08008578 	.word	0x08008578

08006464 <initialise_semihosting_exts>:
 8006464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006466:	4d0a      	ldr	r5, [pc, #40]	@ (8006490 <initialise_semihosting_exts+0x2c>)
 8006468:	4c0a      	ldr	r4, [pc, #40]	@ (8006494 <initialise_semihosting_exts+0x30>)
 800646a:	2100      	movs	r1, #0
 800646c:	2201      	movs	r2, #1
 800646e:	a801      	add	r0, sp, #4
 8006470:	6029      	str	r1, [r5, #0]
 8006472:	6022      	str	r2, [r4, #0]
 8006474:	f7ff ff9c 	bl	80063b0 <_get_semihosting_exts>
 8006478:	2800      	cmp	r0, #0
 800647a:	dd07      	ble.n	800648c <initialise_semihosting_exts+0x28>
 800647c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006480:	f003 0201 	and.w	r2, r3, #1
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	602a      	str	r2, [r5, #0]
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	b003      	add	sp, #12
 800648e:	bd30      	pop	{r4, r5, pc}
 8006490:	20000158 	.word	0x20000158
 8006494:	20000154 	.word	0x20000154

08006498 <_has_ext_stdout_stderr>:
 8006498:	b510      	push	{r4, lr}
 800649a:	4c04      	ldr	r4, [pc, #16]	@ (80064ac <_has_ext_stdout_stderr+0x14>)
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	da01      	bge.n	80064a6 <_has_ext_stdout_stderr+0xe>
 80064a2:	f7ff ffdf 	bl	8006464 <initialise_semihosting_exts>
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	bf00      	nop
 80064ac:	20000154 	.word	0x20000154

080064b0 <initialise_monitor_handles>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	b085      	sub	sp, #20
 80064b6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006568 <initialise_monitor_handles+0xb8>
 80064ba:	f8cd 9004 	str.w	r9, [sp, #4]
 80064be:	2303      	movs	r3, #3
 80064c0:	2400      	movs	r4, #0
 80064c2:	9303      	str	r3, [sp, #12]
 80064c4:	af01      	add	r7, sp, #4
 80064c6:	9402      	str	r4, [sp, #8]
 80064c8:	2501      	movs	r5, #1
 80064ca:	4628      	mov	r0, r5
 80064cc:	4639      	mov	r1, r7
 80064ce:	beab      	bkpt	0x00ab
 80064d0:	4605      	mov	r5, r0
 80064d2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800656c <initialise_monitor_handles+0xbc>
 80064d6:	4623      	mov	r3, r4
 80064d8:	4c20      	ldr	r4, [pc, #128]	@ (800655c <initialise_monitor_handles+0xac>)
 80064da:	f8c8 5000 	str.w	r5, [r8]
 80064de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064e2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80064e6:	3301      	adds	r3, #1
 80064e8:	2b14      	cmp	r3, #20
 80064ea:	d1fa      	bne.n	80064e2 <initialise_monitor_handles+0x32>
 80064ec:	f7ff ffd4 	bl	8006498 <_has_ext_stdout_stderr>
 80064f0:	4d1b      	ldr	r5, [pc, #108]	@ (8006560 <initialise_monitor_handles+0xb0>)
 80064f2:	b1d0      	cbz	r0, 800652a <initialise_monitor_handles+0x7a>
 80064f4:	f04f 0a03 	mov.w	sl, #3
 80064f8:	2304      	movs	r3, #4
 80064fa:	f8cd 9004 	str.w	r9, [sp, #4]
 80064fe:	2601      	movs	r6, #1
 8006500:	f8cd a00c 	str.w	sl, [sp, #12]
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	4630      	mov	r0, r6
 8006508:	4639      	mov	r1, r7
 800650a:	beab      	bkpt	0x00ab
 800650c:	4683      	mov	fp, r0
 800650e:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <initialise_monitor_handles+0xb4>)
 8006510:	f8cd 9004 	str.w	r9, [sp, #4]
 8006514:	f8c3 b000 	str.w	fp, [r3]
 8006518:	2308      	movs	r3, #8
 800651a:	f8cd a00c 	str.w	sl, [sp, #12]
 800651e:	9302      	str	r3, [sp, #8]
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	beab      	bkpt	0x00ab
 8006526:	4606      	mov	r6, r0
 8006528:	602e      	str	r6, [r5, #0]
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	bf02      	ittt	eq
 8006530:	4b0c      	ldreq	r3, [pc, #48]	@ (8006564 <initialise_monitor_handles+0xb4>)
 8006532:	681b      	ldreq	r3, [r3, #0]
 8006534:	602b      	streq	r3, [r5, #0]
 8006536:	2600      	movs	r6, #0
 8006538:	f8d8 3000 	ldr.w	r3, [r8]
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	6066      	str	r6, [r4, #4]
 8006540:	f7ff ffaa 	bl	8006498 <_has_ext_stdout_stderr>
 8006544:	b130      	cbz	r0, 8006554 <initialise_monitor_handles+0xa4>
 8006546:	4b07      	ldr	r3, [pc, #28]	@ (8006564 <initialise_monitor_handles+0xb4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006554:	b005      	add	sp, #20
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	bf00      	nop
 800655c:	20025c48 	.word	0x20025c48
 8006560:	20025c3c 	.word	0x20025c3c
 8006564:	20025c40 	.word	0x20025c40
 8006568:	0800858e 	.word	0x0800858e
 800656c:	20025c44 	.word	0x20025c44

08006570 <std>:
 8006570:	2300      	movs	r3, #0
 8006572:	b510      	push	{r4, lr}
 8006574:	4604      	mov	r4, r0
 8006576:	e9c0 3300 	strd	r3, r3, [r0]
 800657a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800657e:	6083      	str	r3, [r0, #8]
 8006580:	8181      	strh	r1, [r0, #12]
 8006582:	6643      	str	r3, [r0, #100]	@ 0x64
 8006584:	81c2      	strh	r2, [r0, #14]
 8006586:	6183      	str	r3, [r0, #24]
 8006588:	4619      	mov	r1, r3
 800658a:	2208      	movs	r2, #8
 800658c:	305c      	adds	r0, #92	@ 0x5c
 800658e:	f000 f8b1 	bl	80066f4 <memset>
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <std+0x58>)
 8006594:	6263      	str	r3, [r4, #36]	@ 0x24
 8006596:	4b0d      	ldr	r3, [pc, #52]	@ (80065cc <std+0x5c>)
 8006598:	62a3      	str	r3, [r4, #40]	@ 0x28
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <std+0x60>)
 800659c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800659e:	4b0d      	ldr	r3, [pc, #52]	@ (80065d4 <std+0x64>)
 80065a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80065a2:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <std+0x68>)
 80065a4:	6224      	str	r4, [r4, #32]
 80065a6:	429c      	cmp	r4, r3
 80065a8:	d006      	beq.n	80065b8 <std+0x48>
 80065aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065ae:	4294      	cmp	r4, r2
 80065b0:	d002      	beq.n	80065b8 <std+0x48>
 80065b2:	33d0      	adds	r3, #208	@ 0xd0
 80065b4:	429c      	cmp	r4, r3
 80065b6:	d105      	bne.n	80065c4 <std+0x54>
 80065b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c0:	f000 b8ca 	b.w	8006758 <__retarget_lock_init_recursive>
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	bf00      	nop
 80065c8:	080068d1 	.word	0x080068d1
 80065cc:	080068f3 	.word	0x080068f3
 80065d0:	0800692b 	.word	0x0800692b
 80065d4:	0800694f 	.word	0x0800694f
 80065d8:	20025ce8 	.word	0x20025ce8

080065dc <stdio_exit_handler>:
 80065dc:	4a02      	ldr	r2, [pc, #8]	@ (80065e8 <stdio_exit_handler+0xc>)
 80065de:	4903      	ldr	r1, [pc, #12]	@ (80065ec <stdio_exit_handler+0x10>)
 80065e0:	4803      	ldr	r0, [pc, #12]	@ (80065f0 <stdio_exit_handler+0x14>)
 80065e2:	f000 b869 	b.w	80066b8 <_fwalk_sglue>
 80065e6:	bf00      	nop
 80065e8:	2000015c 	.word	0x2000015c
 80065ec:	08006869 	.word	0x08006869
 80065f0:	2000016c 	.word	0x2000016c

080065f4 <cleanup_stdio>:
 80065f4:	6841      	ldr	r1, [r0, #4]
 80065f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <cleanup_stdio+0x34>)
 80065f8:	4299      	cmp	r1, r3
 80065fa:	b510      	push	{r4, lr}
 80065fc:	4604      	mov	r4, r0
 80065fe:	d001      	beq.n	8006604 <cleanup_stdio+0x10>
 8006600:	f000 f932 	bl	8006868 <_fflush_r>
 8006604:	68a1      	ldr	r1, [r4, #8]
 8006606:	4b09      	ldr	r3, [pc, #36]	@ (800662c <cleanup_stdio+0x38>)
 8006608:	4299      	cmp	r1, r3
 800660a:	d002      	beq.n	8006612 <cleanup_stdio+0x1e>
 800660c:	4620      	mov	r0, r4
 800660e:	f000 f92b 	bl	8006868 <_fflush_r>
 8006612:	68e1      	ldr	r1, [r4, #12]
 8006614:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <cleanup_stdio+0x3c>)
 8006616:	4299      	cmp	r1, r3
 8006618:	d004      	beq.n	8006624 <cleanup_stdio+0x30>
 800661a:	4620      	mov	r0, r4
 800661c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006620:	f000 b922 	b.w	8006868 <_fflush_r>
 8006624:	bd10      	pop	{r4, pc}
 8006626:	bf00      	nop
 8006628:	20025ce8 	.word	0x20025ce8
 800662c:	20025d50 	.word	0x20025d50
 8006630:	20025db8 	.word	0x20025db8

08006634 <global_stdio_init.part.0>:
 8006634:	b510      	push	{r4, lr}
 8006636:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <global_stdio_init.part.0+0x30>)
 8006638:	4c0b      	ldr	r4, [pc, #44]	@ (8006668 <global_stdio_init.part.0+0x34>)
 800663a:	4a0c      	ldr	r2, [pc, #48]	@ (800666c <global_stdio_init.part.0+0x38>)
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	4620      	mov	r0, r4
 8006640:	2200      	movs	r2, #0
 8006642:	2104      	movs	r1, #4
 8006644:	f7ff ff94 	bl	8006570 <std>
 8006648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800664c:	2201      	movs	r2, #1
 800664e:	2109      	movs	r1, #9
 8006650:	f7ff ff8e 	bl	8006570 <std>
 8006654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006658:	2202      	movs	r2, #2
 800665a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665e:	2112      	movs	r1, #18
 8006660:	f7ff bf86 	b.w	8006570 <std>
 8006664:	20025e20 	.word	0x20025e20
 8006668:	20025ce8 	.word	0x20025ce8
 800666c:	080065dd 	.word	0x080065dd

08006670 <__sfp_lock_acquire>:
 8006670:	4801      	ldr	r0, [pc, #4]	@ (8006678 <__sfp_lock_acquire+0x8>)
 8006672:	f000 b872 	b.w	800675a <__retarget_lock_acquire_recursive>
 8006676:	bf00      	nop
 8006678:	20025e25 	.word	0x20025e25

0800667c <__sfp_lock_release>:
 800667c:	4801      	ldr	r0, [pc, #4]	@ (8006684 <__sfp_lock_release+0x8>)
 800667e:	f000 b86d 	b.w	800675c <__retarget_lock_release_recursive>
 8006682:	bf00      	nop
 8006684:	20025e25 	.word	0x20025e25

08006688 <__sinit>:
 8006688:	b510      	push	{r4, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	f7ff fff0 	bl	8006670 <__sfp_lock_acquire>
 8006690:	6a23      	ldr	r3, [r4, #32]
 8006692:	b11b      	cbz	r3, 800669c <__sinit+0x14>
 8006694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006698:	f7ff bff0 	b.w	800667c <__sfp_lock_release>
 800669c:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <__sinit+0x28>)
 800669e:	6223      	str	r3, [r4, #32]
 80066a0:	4b04      	ldr	r3, [pc, #16]	@ (80066b4 <__sinit+0x2c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f5      	bne.n	8006694 <__sinit+0xc>
 80066a8:	f7ff ffc4 	bl	8006634 <global_stdio_init.part.0>
 80066ac:	e7f2      	b.n	8006694 <__sinit+0xc>
 80066ae:	bf00      	nop
 80066b0:	080065f5 	.word	0x080065f5
 80066b4:	20025e20 	.word	0x20025e20

080066b8 <_fwalk_sglue>:
 80066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	4607      	mov	r7, r0
 80066be:	4688      	mov	r8, r1
 80066c0:	4614      	mov	r4, r2
 80066c2:	2600      	movs	r6, #0
 80066c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066c8:	f1b9 0901 	subs.w	r9, r9, #1
 80066cc:	d505      	bpl.n	80066da <_fwalk_sglue+0x22>
 80066ce:	6824      	ldr	r4, [r4, #0]
 80066d0:	2c00      	cmp	r4, #0
 80066d2:	d1f7      	bne.n	80066c4 <_fwalk_sglue+0xc>
 80066d4:	4630      	mov	r0, r6
 80066d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d907      	bls.n	80066f0 <_fwalk_sglue+0x38>
 80066e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e4:	3301      	adds	r3, #1
 80066e6:	d003      	beq.n	80066f0 <_fwalk_sglue+0x38>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4638      	mov	r0, r7
 80066ec:	47c0      	blx	r8
 80066ee:	4306      	orrs	r6, r0
 80066f0:	3568      	adds	r5, #104	@ 0x68
 80066f2:	e7e9      	b.n	80066c8 <_fwalk_sglue+0x10>

080066f4 <memset>:
 80066f4:	4402      	add	r2, r0
 80066f6:	4603      	mov	r3, r0
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d100      	bne.n	80066fe <memset+0xa>
 80066fc:	4770      	bx	lr
 80066fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006702:	e7f9      	b.n	80066f8 <memset+0x4>

08006704 <__errno>:
 8006704:	4b01      	ldr	r3, [pc, #4]	@ (800670c <__errno+0x8>)
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000168 	.word	0x20000168

08006710 <__libc_init_array>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4d0d      	ldr	r5, [pc, #52]	@ (8006748 <__libc_init_array+0x38>)
 8006714:	4c0d      	ldr	r4, [pc, #52]	@ (800674c <__libc_init_array+0x3c>)
 8006716:	1b64      	subs	r4, r4, r5
 8006718:	10a4      	asrs	r4, r4, #2
 800671a:	2600      	movs	r6, #0
 800671c:	42a6      	cmp	r6, r4
 800671e:	d109      	bne.n	8006734 <__libc_init_array+0x24>
 8006720:	4d0b      	ldr	r5, [pc, #44]	@ (8006750 <__libc_init_array+0x40>)
 8006722:	4c0c      	ldr	r4, [pc, #48]	@ (8006754 <__libc_init_array+0x44>)
 8006724:	f000 f9a8 	bl	8006a78 <_init>
 8006728:	1b64      	subs	r4, r4, r5
 800672a:	10a4      	asrs	r4, r4, #2
 800672c:	2600      	movs	r6, #0
 800672e:	42a6      	cmp	r6, r4
 8006730:	d105      	bne.n	800673e <__libc_init_array+0x2e>
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	f855 3b04 	ldr.w	r3, [r5], #4
 8006738:	4798      	blx	r3
 800673a:	3601      	adds	r6, #1
 800673c:	e7ee      	b.n	800671c <__libc_init_array+0xc>
 800673e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006742:	4798      	blx	r3
 8006744:	3601      	adds	r6, #1
 8006746:	e7f2      	b.n	800672e <__libc_init_array+0x1e>
 8006748:	0800859c 	.word	0x0800859c
 800674c:	0800859c 	.word	0x0800859c
 8006750:	0800859c 	.word	0x0800859c
 8006754:	080085a0 	.word	0x080085a0

08006758 <__retarget_lock_init_recursive>:
 8006758:	4770      	bx	lr

0800675a <__retarget_lock_acquire_recursive>:
 800675a:	4770      	bx	lr

0800675c <__retarget_lock_release_recursive>:
 800675c:	4770      	bx	lr
	...

08006760 <__sflush_r>:
 8006760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	0716      	lsls	r6, r2, #28
 800676a:	4605      	mov	r5, r0
 800676c:	460c      	mov	r4, r1
 800676e:	d454      	bmi.n	800681a <__sflush_r+0xba>
 8006770:	684b      	ldr	r3, [r1, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dc02      	bgt.n	800677c <__sflush_r+0x1c>
 8006776:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	dd48      	ble.n	800680e <__sflush_r+0xae>
 800677c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800677e:	2e00      	cmp	r6, #0
 8006780:	d045      	beq.n	800680e <__sflush_r+0xae>
 8006782:	2300      	movs	r3, #0
 8006784:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006788:	682f      	ldr	r7, [r5, #0]
 800678a:	6a21      	ldr	r1, [r4, #32]
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	d030      	beq.n	80067f2 <__sflush_r+0x92>
 8006790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	0759      	lsls	r1, r3, #29
 8006796:	d505      	bpl.n	80067a4 <__sflush_r+0x44>
 8006798:	6863      	ldr	r3, [r4, #4]
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800679e:	b10b      	cbz	r3, 80067a4 <__sflush_r+0x44>
 80067a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	2300      	movs	r3, #0
 80067a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067a8:	6a21      	ldr	r1, [r4, #32]
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b0      	blx	r6
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	d106      	bne.n	80067c2 <__sflush_r+0x62>
 80067b4:	6829      	ldr	r1, [r5, #0]
 80067b6:	291d      	cmp	r1, #29
 80067b8:	d82b      	bhi.n	8006812 <__sflush_r+0xb2>
 80067ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006864 <__sflush_r+0x104>)
 80067bc:	410a      	asrs	r2, r1
 80067be:	07d6      	lsls	r6, r2, #31
 80067c0:	d427      	bmi.n	8006812 <__sflush_r+0xb2>
 80067c2:	2200      	movs	r2, #0
 80067c4:	6062      	str	r2, [r4, #4]
 80067c6:	04d9      	lsls	r1, r3, #19
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	6022      	str	r2, [r4, #0]
 80067cc:	d504      	bpl.n	80067d8 <__sflush_r+0x78>
 80067ce:	1c42      	adds	r2, r0, #1
 80067d0:	d101      	bne.n	80067d6 <__sflush_r+0x76>
 80067d2:	682b      	ldr	r3, [r5, #0]
 80067d4:	b903      	cbnz	r3, 80067d8 <__sflush_r+0x78>
 80067d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80067d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067da:	602f      	str	r7, [r5, #0]
 80067dc:	b1b9      	cbz	r1, 800680e <__sflush_r+0xae>
 80067de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067e2:	4299      	cmp	r1, r3
 80067e4:	d002      	beq.n	80067ec <__sflush_r+0x8c>
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 f8fc 	bl	80069e4 <_free_r>
 80067ec:	2300      	movs	r3, #0
 80067ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80067f0:	e00d      	b.n	800680e <__sflush_r+0xae>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b0      	blx	r6
 80067f8:	4602      	mov	r2, r0
 80067fa:	1c50      	adds	r0, r2, #1
 80067fc:	d1c9      	bne.n	8006792 <__sflush_r+0x32>
 80067fe:	682b      	ldr	r3, [r5, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0c6      	beq.n	8006792 <__sflush_r+0x32>
 8006804:	2b1d      	cmp	r3, #29
 8006806:	d001      	beq.n	800680c <__sflush_r+0xac>
 8006808:	2b16      	cmp	r3, #22
 800680a:	d11e      	bne.n	800684a <__sflush_r+0xea>
 800680c:	602f      	str	r7, [r5, #0]
 800680e:	2000      	movs	r0, #0
 8006810:	e022      	b.n	8006858 <__sflush_r+0xf8>
 8006812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006816:	b21b      	sxth	r3, r3
 8006818:	e01b      	b.n	8006852 <__sflush_r+0xf2>
 800681a:	690f      	ldr	r7, [r1, #16]
 800681c:	2f00      	cmp	r7, #0
 800681e:	d0f6      	beq.n	800680e <__sflush_r+0xae>
 8006820:	0793      	lsls	r3, r2, #30
 8006822:	680e      	ldr	r6, [r1, #0]
 8006824:	bf08      	it	eq
 8006826:	694b      	ldreq	r3, [r1, #20]
 8006828:	600f      	str	r7, [r1, #0]
 800682a:	bf18      	it	ne
 800682c:	2300      	movne	r3, #0
 800682e:	eba6 0807 	sub.w	r8, r6, r7
 8006832:	608b      	str	r3, [r1, #8]
 8006834:	f1b8 0f00 	cmp.w	r8, #0
 8006838:	dde9      	ble.n	800680e <__sflush_r+0xae>
 800683a:	6a21      	ldr	r1, [r4, #32]
 800683c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800683e:	4643      	mov	r3, r8
 8006840:	463a      	mov	r2, r7
 8006842:	4628      	mov	r0, r5
 8006844:	47b0      	blx	r6
 8006846:	2800      	cmp	r0, #0
 8006848:	dc08      	bgt.n	800685c <__sflush_r+0xfc>
 800684a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800684e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800685c:	4407      	add	r7, r0
 800685e:	eba8 0800 	sub.w	r8, r8, r0
 8006862:	e7e7      	b.n	8006834 <__sflush_r+0xd4>
 8006864:	dfbffffe 	.word	0xdfbffffe

08006868 <_fflush_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	4605      	mov	r5, r0
 800686e:	460c      	mov	r4, r1
 8006870:	b913      	cbnz	r3, 8006878 <_fflush_r+0x10>
 8006872:	2500      	movs	r5, #0
 8006874:	4628      	mov	r0, r5
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	b118      	cbz	r0, 8006882 <_fflush_r+0x1a>
 800687a:	6a03      	ldr	r3, [r0, #32]
 800687c:	b90b      	cbnz	r3, 8006882 <_fflush_r+0x1a>
 800687e:	f7ff ff03 	bl	8006688 <__sinit>
 8006882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f3      	beq.n	8006872 <_fflush_r+0xa>
 800688a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800688c:	07d0      	lsls	r0, r2, #31
 800688e:	d404      	bmi.n	800689a <_fflush_r+0x32>
 8006890:	0599      	lsls	r1, r3, #22
 8006892:	d402      	bmi.n	800689a <_fflush_r+0x32>
 8006894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006896:	f7ff ff60 	bl	800675a <__retarget_lock_acquire_recursive>
 800689a:	4628      	mov	r0, r5
 800689c:	4621      	mov	r1, r4
 800689e:	f7ff ff5f 	bl	8006760 <__sflush_r>
 80068a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068a4:	07da      	lsls	r2, r3, #31
 80068a6:	4605      	mov	r5, r0
 80068a8:	d4e4      	bmi.n	8006874 <_fflush_r+0xc>
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	059b      	lsls	r3, r3, #22
 80068ae:	d4e1      	bmi.n	8006874 <_fflush_r+0xc>
 80068b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068b2:	f7ff ff53 	bl	800675c <__retarget_lock_release_recursive>
 80068b6:	e7dd      	b.n	8006874 <_fflush_r+0xc>

080068b8 <__malloc_lock>:
 80068b8:	4801      	ldr	r0, [pc, #4]	@ (80068c0 <__malloc_lock+0x8>)
 80068ba:	f7ff bf4e 	b.w	800675a <__retarget_lock_acquire_recursive>
 80068be:	bf00      	nop
 80068c0:	20025e24 	.word	0x20025e24

080068c4 <__malloc_unlock>:
 80068c4:	4801      	ldr	r0, [pc, #4]	@ (80068cc <__malloc_unlock+0x8>)
 80068c6:	f7ff bf49 	b.w	800675c <__retarget_lock_release_recursive>
 80068ca:	bf00      	nop
 80068cc:	20025e24 	.word	0x20025e24

080068d0 <__sread>:
 80068d0:	b510      	push	{r4, lr}
 80068d2:	460c      	mov	r4, r1
 80068d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d8:	f000 f860 	bl	800699c <_read_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	bfab      	itete	ge
 80068e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068e2:	89a3      	ldrhlt	r3, [r4, #12]
 80068e4:	181b      	addge	r3, r3, r0
 80068e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068ea:	bfac      	ite	ge
 80068ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068ee:	81a3      	strhlt	r3, [r4, #12]
 80068f0:	bd10      	pop	{r4, pc}

080068f2 <__swrite>:
 80068f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f6:	461f      	mov	r7, r3
 80068f8:	898b      	ldrh	r3, [r1, #12]
 80068fa:	05db      	lsls	r3, r3, #23
 80068fc:	4605      	mov	r5, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	4616      	mov	r6, r2
 8006902:	d505      	bpl.n	8006910 <__swrite+0x1e>
 8006904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006908:	2302      	movs	r3, #2
 800690a:	2200      	movs	r2, #0
 800690c:	f000 f834 	bl	8006978 <_lseek_r>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	4632      	mov	r2, r6
 800691e:	463b      	mov	r3, r7
 8006920:	4628      	mov	r0, r5
 8006922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006926:	f000 b84b 	b.w	80069c0 <_write_r>

0800692a <__sseek>:
 800692a:	b510      	push	{r4, lr}
 800692c:	460c      	mov	r4, r1
 800692e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006932:	f000 f821 	bl	8006978 <_lseek_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	bf15      	itete	ne
 800693c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800693e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006946:	81a3      	strheq	r3, [r4, #12]
 8006948:	bf18      	it	ne
 800694a:	81a3      	strhne	r3, [r4, #12]
 800694c:	bd10      	pop	{r4, pc}

0800694e <__sclose>:
 800694e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006952:	f000 b801 	b.w	8006958 <_close_r>
	...

08006958 <_close_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4d06      	ldr	r5, [pc, #24]	@ (8006974 <_close_r+0x1c>)
 800695c:	2300      	movs	r3, #0
 800695e:	4604      	mov	r4, r0
 8006960:	4608      	mov	r0, r1
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	f7ff fc6c 	bl	8006240 <_close>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_close_r+0x1a>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_close_r+0x1a>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20025e2c 	.word	0x20025e2c

08006978 <_lseek_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d07      	ldr	r5, [pc, #28]	@ (8006998 <_lseek_r+0x20>)
 800697c:	4604      	mov	r4, r0
 800697e:	4608      	mov	r0, r1
 8006980:	4611      	mov	r1, r2
 8006982:	2200      	movs	r2, #0
 8006984:	602a      	str	r2, [r5, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f7ff fc1b 	bl	80061c2 <_lseek>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_lseek_r+0x1e>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_lseek_r+0x1e>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	20025e2c 	.word	0x20025e2c

0800699c <_read_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	@ (80069bc <_read_r+0x20>)
 80069a0:	4604      	mov	r4, r0
 80069a2:	4608      	mov	r0, r1
 80069a4:	4611      	mov	r1, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7ff fbb3 	bl	8006116 <_read>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_read_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_read_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20025e2c 	.word	0x20025e2c

080069c0 <_write_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d07      	ldr	r5, [pc, #28]	@ (80069e0 <_write_r+0x20>)
 80069c4:	4604      	mov	r4, r0
 80069c6:	4608      	mov	r0, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	2200      	movs	r2, #0
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f7ff fc09 	bl	80061e6 <_write>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_write_r+0x1e>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_write_r+0x1e>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20025e2c 	.word	0x20025e2c

080069e4 <_free_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4605      	mov	r5, r0
 80069e8:	2900      	cmp	r1, #0
 80069ea:	d041      	beq.n	8006a70 <_free_r+0x8c>
 80069ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f0:	1f0c      	subs	r4, r1, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bfb8      	it	lt
 80069f6:	18e4      	addlt	r4, r4, r3
 80069f8:	f7ff ff5e 	bl	80068b8 <__malloc_lock>
 80069fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a74 <_free_r+0x90>)
 80069fe:	6813      	ldr	r3, [r2, #0]
 8006a00:	b933      	cbnz	r3, 8006a10 <_free_r+0x2c>
 8006a02:	6063      	str	r3, [r4, #4]
 8006a04:	6014      	str	r4, [r2, #0]
 8006a06:	4628      	mov	r0, r5
 8006a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a0c:	f7ff bf5a 	b.w	80068c4 <__malloc_unlock>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d908      	bls.n	8006a26 <_free_r+0x42>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	1821      	adds	r1, r4, r0
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	bf01      	itttt	eq
 8006a1c:	6819      	ldreq	r1, [r3, #0]
 8006a1e:	685b      	ldreq	r3, [r3, #4]
 8006a20:	1809      	addeq	r1, r1, r0
 8006a22:	6021      	streq	r1, [r4, #0]
 8006a24:	e7ed      	b.n	8006a02 <_free_r+0x1e>
 8006a26:	461a      	mov	r2, r3
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	b10b      	cbz	r3, 8006a30 <_free_r+0x4c>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d9fa      	bls.n	8006a26 <_free_r+0x42>
 8006a30:	6811      	ldr	r1, [r2, #0]
 8006a32:	1850      	adds	r0, r2, r1
 8006a34:	42a0      	cmp	r0, r4
 8006a36:	d10b      	bne.n	8006a50 <_free_r+0x6c>
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	4401      	add	r1, r0
 8006a3c:	1850      	adds	r0, r2, r1
 8006a3e:	4283      	cmp	r3, r0
 8006a40:	6011      	str	r1, [r2, #0]
 8006a42:	d1e0      	bne.n	8006a06 <_free_r+0x22>
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	6053      	str	r3, [r2, #4]
 8006a4a:	4408      	add	r0, r1
 8006a4c:	6010      	str	r0, [r2, #0]
 8006a4e:	e7da      	b.n	8006a06 <_free_r+0x22>
 8006a50:	d902      	bls.n	8006a58 <_free_r+0x74>
 8006a52:	230c      	movs	r3, #12
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	e7d6      	b.n	8006a06 <_free_r+0x22>
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	1821      	adds	r1, r4, r0
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	bf04      	itt	eq
 8006a60:	6819      	ldreq	r1, [r3, #0]
 8006a62:	685b      	ldreq	r3, [r3, #4]
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	bf04      	itt	eq
 8006a68:	1809      	addeq	r1, r1, r0
 8006a6a:	6021      	streq	r1, [r4, #0]
 8006a6c:	6054      	str	r4, [r2, #4]
 8006a6e:	e7ca      	b.n	8006a06 <_free_r+0x22>
 8006a70:	bd38      	pop	{r3, r4, r5, pc}
 8006a72:	bf00      	nop
 8006a74:	20025e28 	.word	0x20025e28

08006a78 <_init>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr

08006a84 <_fini>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	bf00      	nop
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr
