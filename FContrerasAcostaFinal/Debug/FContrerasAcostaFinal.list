
FContrerasAcostaFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008324  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b78  080084d4  080084d4  000094d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a04c  0800a04c  0000c1b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a04c  0800a04c  0000b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a054  0800a054  0000c1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a054  0800a054  0000b054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a058  0800a058  0000b058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  0800a05c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1b8  2**0
                  CONTENTS
 10 .bss          00025ca4  200001b8  200001b8  0000c1b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20025e5c  20025e5c  0000c1b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ae9  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003462  00000000  00000000  0001ecd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00022138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f05  00000000  00000000  000234e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a71  00000000  00000000  000243e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019179  00000000  00000000  0004be56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2340  00000000  00000000  00064fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014730f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c44  00000000  00000000  00147354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0014cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001b8 	.word	0x200001b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080084bc 	.word	0x080084bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001bc 	.word	0x200001bc
 80001ec:	080084bc 	.word	0x080084bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f006 ff8a 	bl	80074ac <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f000 faf0 	bl	8000b7c <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 faad 	bl	8000afc <LTCD_Layer_Init>
    // POLLING TOUCH SCREEN:
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a2:	f000 fc3f 	bl	8000e24 <InitializeLCDTouch>

	First_Screen();
 80005a6:	f000 f815 	bl	80005d4 <First_Screen>

	Tim_Init();
 80005aa:	f000 f819 	bl	80005e0 <Tim_Init>
	IRQ_ENABLE(TIM2_IRQ_NUMBER);
 80005ae:	201c      	movs	r0, #28
 80005b0:	f000 f94e 	bl	8000850 <IRQ_ENABLE>
	IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 80005b4:	2006      	movs	r0, #6
 80005b6:	f000 f94b 	bl	8000850 <IRQ_ENABLE>
	BUTT_Init_IT();
 80005ba:	f000 f817 	bl	80005ec <BUTT_Init_IT>
	Random_Init();
 80005be:	f000 f81b 	bl	80005f8 <Random_Init>

	// This is the orientation for the board to be directly up where the buttons are
	// vertically above the screen Top left would be low x value, high y value. Bottom
	// right would be low x value, low y value.

	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005c2:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <ApplicationInit+0x40>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
		LCDTouchScreenInterruptGPIOInit();
 80005c8:	f000 f848 	bl	800065c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED



	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001d8 	.word	0x200001d8

080005d4 <First_Screen>:
}
#endif // Example Code
// ************** Write your functions here **************

void First_Screen(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	Start_Screen();
 80005d8:	f000 fc5a 	bl	8000e90 <Start_Screen>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Tim_Init>:
//{
//	Game_Screen();
//}

void Tim_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	TIMER_Init();
 80005e4:	f001 ff1e 	bl	8002424 <TIMER_Init>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BUTT_Init_IT>:

void BUTT_Init_IT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	BUTTON_Init_Interupt();
 80005f0:	f000 f90a 	bl	8000808 <BUTTON_Init_Interupt>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Random_Init>:

void Random_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	RNG_Init();
 80005fc:	f000 ff3c 	bl	8001478 <RNG_Init>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	 IRQ_DISABLE(TIM2_IRQ_NUMBER);
 8000608:	201c      	movs	r0, #28
 800060a:	f000 f947 	bl	800089c <IRQ_DISABLE>
	 IRQ_CLEAR(TIM2_IRQ_NUMBER);
 800060e:	201c      	movs	r0, #28
 8000610:	f000 f96c 	bl	80008ec <IRQ_CLEAR>
	 TIM2->SR &= ~(0x1 << UIF_OFFSET); // Lowering the Flag
 8000614:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061e:	f023 0301 	bic.w	r3, r3, #1
 8000622:	6113      	str	r3, [r2, #16]

	 addSchedulerEvent(COUNT);
 8000624:	2008      	movs	r0, #8
 8000626:	f000 ff71 	bl	800150c <addSchedulerEvent>

	 IRQ_ENABLE(TIM2_IRQ_NUMBER);
 800062a:	201c      	movs	r0, #28
 800062c:	f000 f910 	bl	8000850 <IRQ_ENABLE>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) // : need to loewr the flag in the nvic
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	 IRQ_DISABLE(EXTI0_IRQ_NUMBER);
 8000638:	2006      	movs	r0, #6
 800063a:	f000 f92f 	bl	800089c <IRQ_DISABLE>
	 IRQ_CLEAR(EXTI0_IRQ_NUMBER);
 800063e:	2006      	movs	r0, #6
 8000640:	f000 f954 	bl	80008ec <IRQ_CLEAR>

	 addSchedulerEvent(ROTATE_CC);
 8000644:	2004      	movs	r0, #4
 8000646:	f000 ff61 	bl	800150c <addSchedulerEvent>

	 CLEAR_EXTI(B_PIN);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f976 	bl	800093c <CLEAR_EXTI>
	 IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 8000650:	2006      	movs	r0, #6
 8000652:	f000 f8fd 	bl	8000850 <IRQ_ENABLE>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000674:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000676:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800067a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006a6:	f003 fb7d 	bl	8003da4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006aa:	2028      	movs	r0, #40	@ 0x28
 80006ac:	f003 fb2b 	bl	8003d06 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006b2:	4a06      	ldr	r2, [pc, #24]	@ (80006cc <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006b4:	601a      	str	r2, [r3, #0]

}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	200001e0 	.word	0x200001e0
 80006cc:	0600000f 	.word	0x0600000f

080006d0 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006d6:	2028      	movs	r0, #40	@ 0x28
 80006d8:	f003 fb23 	bl	8003d22 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006dc:	2300      	movs	r3, #0
 80006de:	71fb      	strb	r3, [r7, #7]
	//while(count == 0){
	//	count = STMPE811_Read(STMPE811_FIFO_SIZE);
	//}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f000 fbb5 	bl	8000e50 <ReadRegisterFromTouchModule>
 80006e6:	4603      	mov	r3, r0
 80006e8:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80006ea:	2100      	movs	r1, #0
 80006ec:	200a      	movs	r0, #10
 80006ee:	f000 fbbd 	bl	8000e6c <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80006f2:	200b      	movs	r0, #11
 80006f4:	f000 fbac 	bl	8000e50 <ReadRegisterFromTouchModule>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b30      	ldr	r3, [pc, #192]	@ (80007c0 <EXTI15_10_IRQHandler+0xf0>)
 80006fe:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000700:	4b2f      	ldr	r3, [pc, #188]	@ (80007c0 <EXTI15_10_IRQHandler+0xf0>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	4619      	mov	r1, r3
 800070e:	200b      	movs	r0, #11
 8000710:	f000 fbac 	bl	8000e6c <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000714:	2040      	movs	r0, #64	@ 0x40
 8000716:	f000 fb9b 	bl	8000e50 <ReadRegisterFromTouchModule>
 800071a:	4603      	mov	r3, r0
 800071c:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 800071e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	da01      	bge.n	800072a <EXTI15_10_IRQHandler+0x5a>
	{
		isTouchDetected = true;
 8000726:	2301      	movs	r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d026      	beq.n	800077e <EXTI15_10_IRQHandler+0xae>
	{
		//printf("\nPressed");
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 8000730:	4824      	ldr	r0, [pc, #144]	@ (80007c4 <EXTI15_10_IRQHandler+0xf4>)
 8000732:	f000 fb82 	bl	8000e3a <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <EXTI15_10_IRQHandler+0xf4>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <EXTI15_10_IRQHandler+0xf4>)
 800073e:	885b      	ldrh	r3, [r3, #2]
 8000740:	461a      	mov	r2, r3
 8000742:	4821      	ldr	r0, [pc, #132]	@ (80007c8 <EXTI15_10_IRQHandler+0xf8>)
 8000744:	f007 f84e 	bl	80077e4 <iprintf>

		if(START_FLAG == 1)
 8000748:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <EXTI15_10_IRQHandler+0xfc>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b01      	cmp	r3, #1
 8000750:	d10f      	bne.n	8000772 <EXTI15_10_IRQHandler+0xa2>
		{
			if(StaticTouchData.y<160)
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <EXTI15_10_IRQHandler+0xf4>)
 8000754:	885b      	ldrh	r3, [r3, #2]
 8000756:	2b9f      	cmp	r3, #159	@ 0x9f
 8000758:	d803      	bhi.n	8000762 <EXTI15_10_IRQHandler+0x92>
			{
				addSchedulerEvent(SHIFT_L);
 800075a:	2002      	movs	r0, #2
 800075c:	f000 fed6 	bl	800150c <addSchedulerEvent>
 8000760:	e00d      	b.n	800077e <EXTI15_10_IRQHandler+0xae>
			}

			else if(StaticTouchData.y>160)
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <EXTI15_10_IRQHandler+0xf4>)
 8000764:	885b      	ldrh	r3, [r3, #2]
 8000766:	2ba0      	cmp	r3, #160	@ 0xa0
 8000768:	d909      	bls.n	800077e <EXTI15_10_IRQHandler+0xae>
			{
				addSchedulerEvent(SHIFT_R);
 800076a:	2001      	movs	r0, #1
 800076c:	f000 fece 	bl	800150c <addSchedulerEvent>
 8000770:	e005      	b.n	800077e <EXTI15_10_IRQHandler+0xae>
			}
		}
		else
		{
			START_FLAG = 1;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <EXTI15_10_IRQHandler+0xfc>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
			addSchedulerEvent(START);
 8000778:	2010      	movs	r0, #16
 800077a:	f000 fec7 	bl	800150c <addSchedulerEvent>
		//printf("\nNot pressed \n");
		//LCD_Clear(0, LCD_COLOR_GREEN);

	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800077e:	2101      	movs	r1, #1
 8000780:	204b      	movs	r0, #75	@ 0x4b
 8000782:	f002 fdfd 	bl	8003380 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000786:	2100      	movs	r1, #0
 8000788:	204b      	movs	r0, #75	@ 0x4b
 800078a:	f002 fdf9 	bl	8003380 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	4619      	mov	r1, r3
 8000792:	200a      	movs	r0, #10
 8000794:	f000 fb6a 	bl	8000e6c <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000798:	2103      	movs	r1, #3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <EXTI15_10_IRQHandler+0x100>)
 800079c:	f003 faea 	bl	8003d74 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80007a0:	2028      	movs	r0, #40	@ 0x28
 80007a2:	f003 fad8 	bl	8003d56 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a6:	2028      	movs	r0, #40	@ 0x28
 80007a8:	f003 faad 	bl	8003d06 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80007ac:	797b      	ldrb	r3, [r7, #5]
 80007ae:	4619      	mov	r1, r3
 80007b0:	200b      	movs	r0, #11
 80007b2:	f000 fb5b 	bl	8000e6c <WriteDataToTouchModule>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200001e8 	.word	0x200001e8
 80007c4:	200001d8 	.word	0x200001d8
 80007c8:	080084d4 	.word	0x080084d4
 80007cc:	200001d4 	.word	0x200001d4
 80007d0:	200001e0 	.word	0x200001e0

080007d4 <BUTTON_ClockControl>:
	HAL_GPIO_Init(GPIOA, &BUTTONPinConfig);

}

void BUTTON_ClockControl(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <BUTTON_ClockControl+0x30>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <BUTTON_ClockControl+0x30>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <BUTTON_ClockControl+0x30>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <BUTTON_Init_Interupt>:
		return false;
	}
}

void BUTTON_Init_Interupt(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

	BUTTON_ClockControl();
 800080e:	f7ff ffe1 	bl	80007d4 <BUTTON_ClockControl>
	GPIO_InitTypeDef BUTTONPinConfig= {RESET};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
	BUTTONPinConfig.Pin = GPIO_PIN_0;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
	BUTTONPinConfig.Mode = GPIO_MODE_IT_RISING; // Configure as Rising Edge Int
 8000824:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000828:	60bb      	str	r3, [r7, #8]
	BUTTONPinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2302      	movs	r3, #2
 800082c:	613b      	str	r3, [r7, #16]
	BUTTONPinConfig.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
	//BUTTONPinConfig.Alternate = GPIO_PUPDR_NONE;

	HAL_GPIO_Init(GPIOA, &BUTTONPinConfig);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <BUTTON_Init_Interupt+0x44>)
 8000838:	f003 fab4 	bl	8003da4 <HAL_GPIO_Init>
	//HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);

	IRQ_ENABLE(EXTI0_IRQ_NUMBER);
 800083c:	2006      	movs	r0, #6
 800083e:	f000 f807 	bl	8000850 <IRQ_ENABLE>

}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020000 	.word	0x40020000

08000850 <IRQ_ENABLE>:
#define check 32
static uint8_t reg_select;
static uint32_t bit_select;

void IRQ_ENABLE(uint8_t number)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	095b      	lsrs	r3, r3, #5
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <IRQ_ENABLE+0x44>)
 8000862:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <IRQ_ENABLE+0x48>)
 800086c:	6013      	str	r3, [r2, #0]
	*(NVIC_ISER0+reg_select) = (0x1 << bit_select);
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <IRQ_ENABLE+0x48>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2201      	movs	r2, #1
 8000874:	409a      	lsls	r2, r3
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <IRQ_ENABLE+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000880:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000884:	601a      	str	r2, [r3, #0]

}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200001e9 	.word	0x200001e9
 8000898:	200001ec 	.word	0x200001ec

0800089c <IRQ_DISABLE>:

void IRQ_DISABLE(uint8_t number)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	095b      	lsrs	r3, r3, #5
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <IRQ_DISABLE+0x44>)
 80008ae:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <IRQ_DISABLE+0x48>)
 80008b8:	6013      	str	r3, [r2, #0]
	*(NVIC_ICER0+reg_select) = (0x1 << bit_select);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <IRQ_DISABLE+0x48>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2201      	movs	r2, #1
 80008c0:	fa02 f103 	lsl.w	r1, r2, r3
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <IRQ_DISABLE+0x44>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	009a      	lsls	r2, r3, #2
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <IRQ_DISABLE+0x4c>)
 80008cc:	4413      	add	r3, r2
 80008ce:	460a      	mov	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200001e9 	.word	0x200001e9
 80008e4:	200001ec 	.word	0x200001ec
 80008e8:	e000e180 	.word	0xe000e180

080008ec <IRQ_CLEAR>:

void IRQ_CLEAR(uint8_t number) // N ee
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	reg_select = number / check;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <IRQ_CLEAR+0x44>)
 80008fe:	701a      	strb	r2, [r3, #0]
	bit_select = number % check;
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 031f 	and.w	r3, r3, #31
 8000906:	4a0b      	ldr	r2, [pc, #44]	@ (8000934 <IRQ_CLEAR+0x48>)
 8000908:	6013      	str	r3, [r2, #0]
	*(NVIC_ICPR0+reg_select) = (0x1 << bit_select);
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <IRQ_CLEAR+0x48>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2201      	movs	r2, #1
 8000910:	fa02 f103 	lsl.w	r1, r2, r3
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <IRQ_CLEAR+0x44>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	009a      	lsls	r2, r3, #2
 800091a:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <IRQ_CLEAR+0x4c>)
 800091c:	4413      	add	r3, r2
 800091e:	460a      	mov	r2, r1
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200001e9 	.word	0x200001e9
 8000934:	200001ec 	.word	0x200001ec
 8000938:	e000e280 	.word	0xe000e280

0800093c <CLEAR_EXTI>:
	bit_select = number % check;
	*(NVIC_ISPR0+reg_select) = (0x1 << bit_select);
}

void CLEAR_EXTI(uint8_t number) // EXTI is for external hardware don't apply to clocks since internal hardware
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0x1 << number);
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <CLEAR_EXTI+0x2c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	2101      	movs	r1, #1
 800094e:	fa01 f202 	lsl.w	r2, r1, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <CLEAR_EXTI+0x2c>)
 8000956:	430b      	orrs	r3, r1
 8000958:	6153      	str	r3, [r2, #20]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40013c00 	.word	0x40013c00

0800096c <LCD_GPIO_Init>:
// However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	@ 0x30
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a59      	ldr	r2, [pc, #356]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 800097c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b57      	ldr	r3, [pc, #348]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b53      	ldr	r3, [pc, #332]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a52      	ldr	r2, [pc, #328]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b50      	ldr	r3, [pc, #320]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a4b      	ldr	r2, [pc, #300]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b49      	ldr	r3, [pc, #292]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b45      	ldr	r3, [pc, #276]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a44      	ldr	r2, [pc, #272]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b42      	ldr	r3, [pc, #264]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a3d      	ldr	r2, [pc, #244]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b37      	ldr	r3, [pc, #220]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a36      	ldr	r2, [pc, #216]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <LCD_GPIO_Init+0x174>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000a36:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000a3a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a48:	230e      	movs	r3, #14
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4824      	ldr	r0, [pc, #144]	@ (8000ae4 <LCD_GPIO_Init+0x178>)
 8000a54:	f003 f9a6 	bl	8003da4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a58:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a5c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4820      	ldr	r0, [pc, #128]	@ (8000ae8 <LCD_GPIO_Init+0x17c>)
 8000a66:	f003 f99d 	bl	8003da4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a6a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	481d      	ldr	r0, [pc, #116]	@ (8000aec <LCD_GPIO_Init+0x180>)
 8000a78:	f003 f994 	bl	8003da4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000a7c:	2348      	movs	r3, #72	@ 0x48
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	481a      	ldr	r0, [pc, #104]	@ (8000af0 <LCD_GPIO_Init+0x184>)
 8000a88:	f003 f98c 	bl	8003da4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4816      	ldr	r0, [pc, #88]	@ (8000af4 <LCD_GPIO_Init+0x188>)
 8000a9a:	f003 f983 	bl	8003da4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a9e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000aa2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <LCD_GPIO_Init+0x18c>)
 8000aac:	f003 f97a 	bl	8003da4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000ab4:	2309      	movs	r3, #9
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	480a      	ldr	r0, [pc, #40]	@ (8000ae8 <LCD_GPIO_Init+0x17c>)
 8000ac0:	f003 f970 	bl	8003da4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000ac4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <LCD_GPIO_Init+0x18c>)
 8000ad2:	f003 f967 	bl	8003da4 <HAL_GPIO_Init>
}
 8000ad6:	bf00      	nop
 8000ad8:	3730      	adds	r7, #48	@ 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40021400 	.word	0x40021400
 8000af8:	40021800 	.word	0x40021800

08000afc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b090      	sub	sp, #64	@ 0x40
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b0a:	23f0      	movs	r3, #240	@ 0xf0
 8000b0c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b12:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b16:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!!
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
	// IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format.
	// 2 bytes for each pixel
	pLayerCfg.Alpha = 255;
 8000b1c:	23ff      	movs	r3, #255	@ 0xff
 8000b1e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <LTCD_Layer_Init+0x78>)
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000b38:	23f0      	movs	r3, #240	@ 0xf0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000b3c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <LTCD_Layer_Init+0x7c>)
 8000b5e:	f004 fce7 	bl	8005530 <HAL_LTDC_ConfigLayer>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000b68:	f000 f956 	bl	8000e18 <LCD_Error_Handler>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	3740      	adds	r7, #64	@ 0x40
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200002cc 	.word	0x200002cc
 8000b78:	200001f0 	.word	0x200001f0

08000b7c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <LTCD__Init+0xb0>)
 8000b82:	4a2b      	ldr	r2, [pc, #172]	@ (8000c30 <LTCD__Init+0xb4>)
 8000b84:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000b86:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <LTCD__Init+0xb0>)
 8000b88:	2209      	movs	r2, #9
 8000b8a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <LTCD__Init+0xb0>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000b92:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <LTCD__Init+0xb0>)
 8000b94:	221d      	movs	r2, #29
 8000b96:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000b98:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <LTCD__Init+0xb0>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <LTCD__Init+0xb0>)
 8000ba0:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ba4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <LTCD__Init+0xb0>)
 8000ba8:	f240 1243 	movw	r2, #323	@ 0x143
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <LTCD__Init+0xb0>)
 8000bb0:	f240 1217 	movw	r2, #279	@ 0x117
 8000bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <LTCD__Init+0xb0>)
 8000bb8:	f240 1247 	movw	r2, #327	@ 0x147
 8000bbc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <LTCD__Init+0xb0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <LTCD__Init+0xb0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <LTCD__Init+0xb0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <LTCD__Init+0xb8>)
 8000bd8:	2208      	movs	r2, #8
 8000bda:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <LTCD__Init+0xb8>)
 8000bde:	22c0      	movs	r2, #192	@ 0xc0
 8000be0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <LTCD__Init+0xb8>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <LTCD__Init+0xb8>)
 8000bea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bee:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000bf0:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <LTCD__Init+0xb8>)
 8000bf2:	f005 faf7 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <LTCD__Init+0xb0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <LTCD__Init+0xb0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <LTCD__Init+0xb0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <LTCD__Init+0xb0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000c0e:	f7ff fead 	bl	800096c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c12:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <LTCD__Init+0xb0>)
 8000c14:	f004 fbbc 	bl	8005390 <HAL_LTDC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000c1e:	f000 f8fb 	bl	8000e18 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000c22:	f001 fcc1 	bl	80025a8 <ili9341_Init>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001f0 	.word	0x200001f0
 8000c30:	40016800 	.word	0x40016800
 8000c34:	20000298 	.word	0x20000298

08000c38 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	460b      	mov	r3, r1
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000c4a:	88ba      	ldrh	r2, [r7, #4]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	1a9b      	subs	r3, r3, r2
 8000c52:	011b      	lsls	r3, r3, #4
 8000c54:	461a      	mov	r2, r3
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4905      	ldr	r1, [pc, #20]	@ (8000c70 <LCD_Draw_Pixel+0x38>)
 8000c5c:	887a      	ldrh	r2, [r7, #2]
 8000c5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200002cc 	.word	0x200002cc

08000c74 <LCD_Clear>:
  }
}
#endif

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10e      	bne.n	8000ca8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e007      	b.n	8000ca0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000c90:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <LCD_Clear+0x40>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	88ba      	ldrh	r2, [r7, #4]
 8000c96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000ca6:	d3f3      	bcc.n	8000c90 <LCD_Clear+0x1c>
		}
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	200002cc 	.word	0x200002cc

08000cb8 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <LCD_SetTextColor+0x1c>)
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	8013      	strh	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <LCD_SetFont+0x1c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200002c8 	.word	0x200002c8

08000cf8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	603a      	str	r2, [r7, #0]
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	460b      	mov	r3, r1
 8000d06:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e04c      	b.n	8000db0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	e03f      	b.n	8000d9c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <LCD_Draw_Char+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	889b      	ldrh	r3, [r3, #4]
 8000d2e:	4a27      	ldr	r2, [pc, #156]	@ (8000dcc <LCD_Draw_Char+0xd4>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	2280      	movs	r2, #128	@ 0x80
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	fa42 f303 	asr.w	r3, r2, r3
 8000d44:	400b      	ands	r3, r1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d104      	bne.n	8000d54 <LCD_Draw_Char+0x5c>
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <LCD_Draw_Char+0xd0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	889b      	ldrh	r3, [r3, #4]
 8000d50:	2b0c      	cmp	r3, #12
 8000d52:	d920      	bls.n	8000d96 <LCD_Draw_Char+0x9e>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	fa42 f303 	asr.w	r3, r2, r3
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <LCD_Draw_Char+0x80>
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <LCD_Draw_Char+0xd0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	889b      	ldrh	r3, [r3, #4]
 8000d74:	2b0c      	cmp	r3, #12
 8000d76:	d80e      	bhi.n	8000d96 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b298      	uxth	r0, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <LCD_Draw_Char+0xd8>)
 8000d8e:	8812      	ldrh	r2, [r2, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff ff51 	bl	8000c38 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <LCD_Draw_Char+0xd0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	889b      	ldrh	r3, [r3, #4]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d3b8      	bcc.n	8000d1c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <LCD_Draw_Char+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	88db      	ldrh	r3, [r3, #6]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d3ab      	bcc.n	8000d16 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200002c8 	.word	0x200002c8
 8000dcc:	aaaaaaab 	.word	0xaaaaaaab
 8000dd0:	20000000 	.word	0x20000000

08000dd4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
 8000dde:	460b      	mov	r3, r1
 8000de0:	80bb      	strh	r3, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	3b20      	subs	r3, #32
 8000dea:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <LCD_DisplayChar+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <LCD_DisplayChar+0x40>)
 8000df6:	6809      	ldr	r1, [r1, #0]
 8000df8:	88c9      	ldrh	r1, [r1, #6]
 8000dfa:	fb01 f303 	mul.w	r3, r1, r3
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	441a      	add	r2, r3
 8000e02:	88b9      	ldrh	r1, [r7, #4]
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff76 	bl	8000cf8 <LCD_Draw_Char>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200002c8 	.word	0x200002c8

08000e18 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <LCD_Error_Handler+0x8>

08000e24 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000e28:	f002 f9d2 	bl	80031d0 <STMPE811_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d001      	beq.n	8000e36 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000e32:	bf00      	nop
 8000e34:	e7fd      	b.n	8000e32 <InitializeLCDTouch+0xe>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f002 faae 	bl	80033a4 <STMPE811_DetermineTouchPosition>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fa7e 	bl	800335e <STMPE811_Read>
 8000e62:	4603      	mov	r3, r0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000e7c:	79ba      	ldrb	r2, [r7, #6]
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fa7c 	bl	8003380 <STMPE811_Write>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Start_Screen>:

// ************** Write your functions here **************


void Start_Screen(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff feec 	bl	8000c74 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000e9c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ea0:	f7ff ff0a 	bl	8000cb8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000ea4:	4841      	ldr	r0, [pc, #260]	@ (8000fac <Start_Screen+0x11c>)
 8000ea6:	f7ff ff17 	bl	8000cd8 <LCD_SetFont>
	LCD_DisplayChar(35,10,'T');
 8000eaa:	2254      	movs	r2, #84	@ 0x54
 8000eac:	210a      	movs	r1, #10
 8000eae:	2023      	movs	r0, #35	@ 0x23
 8000eb0:	f7ff ff90 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(65,10,'E');
 8000eb4:	2245      	movs	r2, #69	@ 0x45
 8000eb6:	210a      	movs	r1, #10
 8000eb8:	2041      	movs	r0, #65	@ 0x41
 8000eba:	f7ff ff8b 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(95,10,'T');
 8000ebe:	2254      	movs	r2, #84	@ 0x54
 8000ec0:	210a      	movs	r1, #10
 8000ec2:	205f      	movs	r0, #95	@ 0x5f
 8000ec4:	f7ff ff86 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(125,10,'R');
 8000ec8:	2252      	movs	r2, #82	@ 0x52
 8000eca:	210a      	movs	r1, #10
 8000ecc:	207d      	movs	r0, #125	@ 0x7d
 8000ece:	f7ff ff81 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(155,10,'I');
 8000ed2:	2249      	movs	r2, #73	@ 0x49
 8000ed4:	210a      	movs	r1, #10
 8000ed6:	209b      	movs	r0, #155	@ 0x9b
 8000ed8:	f7ff ff7c 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(185,10,'S');
 8000edc:	2253      	movs	r2, #83	@ 0x53
 8000ede:	210a      	movs	r1, #10
 8000ee0:	20b9      	movs	r0, #185	@ 0xb9
 8000ee2:	f7ff ff77 	bl	8000dd4 <LCD_DisplayChar>

	O_Shape(0, 60, 60, LCD_COLOR_YELLOW);
 8000ee6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000eea:	223c      	movs	r2, #60	@ 0x3c
 8000eec:	213c      	movs	r1, #60	@ 0x3c
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f85e 	bl	8000fb0 <O_Shape>

	I_Shape(210, 0, 120, LCD_COLOR_CYAN);
 8000ef4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000ef8:	2278      	movs	r2, #120	@ 0x78
 8000efa:	2100      	movs	r1, #0
 8000efc:	20d2      	movs	r0, #210	@ 0xd2
 8000efe:	f000 f88b 	bl	8001018 <I_Shape>

	S_Shape(90, 90, 90, LCD_COLOR_RED);
 8000f02:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f06:	225a      	movs	r2, #90	@ 0x5a
 8000f08:	215a      	movs	r1, #90	@ 0x5a
 8000f0a:	205a      	movs	r0, #90	@ 0x5a
 8000f0c:	f000 f8ba 	bl	8001084 <S_Shape>

	Z_Shape(0, 150 ,90, LCD_COLOR_GREEN);
 8000f10:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f14:	225a      	movs	r2, #90	@ 0x5a
 8000f16:	2196      	movs	r1, #150	@ 0x96
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f905 	bl	8001128 <Z_Shape>

	L_Shape(0, 210, 90, LCD_COLOR_BLUE);
 8000f1e:	231f      	movs	r3, #31
 8000f20:	225a      	movs	r2, #90	@ 0x5a
 8000f22:	21d2      	movs	r1, #210	@ 0xd2
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 f951 	bl	80011cc <L_Shape>

	J_Shape(210, 210, 90, LCD_COLOR_MAGENTA);
 8000f2a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000f2e:	225a      	movs	r2, #90	@ 0x5a
 8000f30:	21d2      	movs	r1, #210	@ 0xd2
 8000f32:	20d2      	movs	r0, #210	@ 0xd2
 8000f34:	f000 f9b6 	bl	80012a4 <J_Shape>

	T_Shape(150, 150, 90, LCD_COLOR_BLUE2);
 8000f38:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f3c:	225a      	movs	r2, #90	@ 0x5a
 8000f3e:	2196      	movs	r1, #150	@ 0x96
 8000f40:	2096      	movs	r0, #150	@ 0x96
 8000f42:	f000 fa1b 	bl	800137c <T_Shape>

	LCD_DisplayChar(35, 250, 'T');
 8000f46:	2254      	movs	r2, #84	@ 0x54
 8000f48:	21fa      	movs	r1, #250	@ 0xfa
 8000f4a:	2023      	movs	r0, #35	@ 0x23
 8000f4c:	f7ff ff42 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(65, 250, 'A');
 8000f50:	2241      	movs	r2, #65	@ 0x41
 8000f52:	21fa      	movs	r1, #250	@ 0xfa
 8000f54:	2041      	movs	r0, #65	@ 0x41
 8000f56:	f7ff ff3d 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(95, 250, 'P');
 8000f5a:	2250      	movs	r2, #80	@ 0x50
 8000f5c:	21fa      	movs	r1, #250	@ 0xfa
 8000f5e:	205f      	movs	r0, #95	@ 0x5f
 8000f60:	f7ff ff38 	bl	8000dd4 <LCD_DisplayChar>

	LCD_DisplayChar(155, 250, 'T');
 8000f64:	2254      	movs	r2, #84	@ 0x54
 8000f66:	21fa      	movs	r1, #250	@ 0xfa
 8000f68:	209b      	movs	r0, #155	@ 0x9b
 8000f6a:	f7ff ff33 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(185, 250, 'O');
 8000f6e:	224f      	movs	r2, #79	@ 0x4f
 8000f70:	21fa      	movs	r1, #250	@ 0xfa
 8000f72:	20b9      	movs	r0, #185	@ 0xb9
 8000f74:	f7ff ff2e 	bl	8000dd4 <LCD_DisplayChar>

	LCD_DisplayChar(65, 280, 'P');
 8000f78:	2250      	movs	r2, #80	@ 0x50
 8000f7a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000f7e:	2041      	movs	r0, #65	@ 0x41
 8000f80:	f7ff ff28 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(95, 280, 'L');
 8000f84:	224c      	movs	r2, #76	@ 0x4c
 8000f86:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000f8a:	205f      	movs	r0, #95	@ 0x5f
 8000f8c:	f7ff ff22 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(125, 280, 'A');
 8000f90:	2241      	movs	r2, #65	@ 0x41
 8000f92:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000f96:	207d      	movs	r0, #125	@ 0x7d
 8000f98:	f7ff ff1c 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(155, 280, 'Y');
 8000f9c:	2259      	movs	r2, #89	@ 0x59
 8000f9e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000fa2:	209b      	movs	r0, #155	@ 0x9b
 8000fa4:	f7ff ff16 	bl	8000dd4 <LCD_DisplayChar>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000134 	.word	0x20000134

08000fb0 <O_Shape>:
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)

*/

void O_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	80fb      	strh	r3, [r7, #6]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	81fb      	strh	r3, [r7, #14]
 8000fd2:	e018      	b.n	8001006 <O_Shape+0x56>
	{
		for (uint16_t ii = 0; ii < len; ii++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	81bb      	strh	r3, [r7, #12]
 8000fd8:	e00e      	b.n	8000ff8 <O_Shape+0x48>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 8000fda:	89fa      	ldrh	r2, [r7, #14]
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b298      	uxth	r0, r3
 8000fe2:	89ba      	ldrh	r2, [r7, #12]
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	883a      	ldrh	r2, [r7, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fe23 	bl	8000c38 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < len; ii++)
 8000ff2:	89bb      	ldrh	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	81bb      	strh	r3, [r7, #12]
 8000ff8:	89ba      	ldrh	r2, [r7, #12]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3ec      	bcc.n	8000fda <O_Shape+0x2a>
	for (uint16_t i = 0; i < len; i++)
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	3301      	adds	r3, #1
 8001004:	81fb      	strh	r3, [r7, #14]
 8001006:	89fa      	ldrh	r2, [r7, #14]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	429a      	cmp	r2, r3
 800100c:	d3e2      	bcc.n	8000fd4 <O_Shape+0x24>
		}
	}

}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}

08001018 <I_Shape>:
void I_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	4611      	mov	r1, r2
 8001024:	461a      	mov	r2, r3
 8001026:	4623      	mov	r3, r4
 8001028:	80fb      	strh	r3, [r7, #6]
 800102a:	4603      	mov	r3, r0
 800102c:	80bb      	strh	r3, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]
 8001032:	4613      	mov	r3, r2
 8001034:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len/4; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	81fb      	strh	r3, [r7, #14]
 800103a:	e018      	b.n	800106e <I_Shape+0x56>
	{
		for (uint16_t ii = 0; ii < len; ii++)
 800103c:	2300      	movs	r3, #0
 800103e:	81bb      	strh	r3, [r7, #12]
 8001040:	e00e      	b.n	8001060 <I_Shape+0x48>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 8001042:	89fa      	ldrh	r2, [r7, #14]
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	4413      	add	r3, r2
 8001048:	b298      	uxth	r0, r3
 800104a:	89ba      	ldrh	r2, [r7, #12]
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	883a      	ldrh	r2, [r7, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fdef 	bl	8000c38 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < len; ii++)
 800105a:	89bb      	ldrh	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	81bb      	strh	r3, [r7, #12]
 8001060:	89ba      	ldrh	r2, [r7, #12]
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	429a      	cmp	r2, r3
 8001066:	d3ec      	bcc.n	8001042 <I_Shape+0x2a>
	for (uint16_t i = 0; i < len/4; i++)
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	3301      	adds	r3, #1
 800106c:	81fb      	strh	r3, [r7, #14]
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	b29b      	uxth	r3, r3
 8001074:	89fa      	ldrh	r2, [r7, #14]
 8001076:	429a      	cmp	r2, r3
 8001078:	d3e0      	bcc.n	800103c <I_Shape+0x24>
		}
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}

08001084 <S_Shape>:
void S_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	4604      	mov	r4, r0
 800108c:	4608      	mov	r0, r1
 800108e:	4611      	mov	r1, r2
 8001090:	461a      	mov	r2, r3
 8001092:	4623      	mov	r3, r4
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	4603      	mov	r3, r0
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	807b      	strh	r3, [r7, #2]
 800109e:	4613      	mov	r3, r2
 80010a0:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < 2; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	81fb      	strh	r3, [r7, #14]
 80010a6:	e033      	b.n	8001110 <S_Shape+0x8c>
	{
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	81bb      	strh	r3, [r7, #12]
 80010ac:	e01d      	b.n	80010ea <S_Shape+0x66>
		{
			for (uint16_t iii = 0; iii < len/3; iii++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	817b      	strh	r3, [r7, #10]
 80010b2:	e00e      	b.n	80010d2 <S_Shape+0x4e>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 80010b4:	89ba      	ldrh	r2, [r7, #12]
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	4413      	add	r3, r2
 80010ba:	b298      	uxth	r0, r3
 80010bc:	897a      	ldrh	r2, [r7, #10]
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	883a      	ldrh	r2, [r7, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fdb6 	bl	8000c38 <LCD_Draw_Pixel>
			for (uint16_t iii = 0; iii < len/3; iii++)
 80010cc:	897b      	ldrh	r3, [r7, #10]
 80010ce:	3301      	adds	r3, #1
 80010d0:	817b      	strh	r3, [r7, #10]
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <S_Shape+0x9c>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	085b      	lsrs	r3, r3, #1
 80010dc:	b29b      	uxth	r3, r3
 80010de:	897a      	ldrh	r2, [r7, #10]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3e7      	bcc.n	80010b4 <S_Shape+0x30>
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 80010e4:	89bb      	ldrh	r3, [r7, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	81bb      	strh	r3, [r7, #12]
 80010ea:	89ba      	ldrh	r2, [r7, #12]
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	490c      	ldr	r1, [pc, #48]	@ (8001124 <S_Shape+0xa0>)
 80010f2:	fb81 0103 	smull	r0, r1, r1, r3
 80010f6:	17db      	asrs	r3, r3, #31
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dbd7      	blt.n	80010ae <S_Shape+0x2a>
			}
		}
		x=x+BLOCK;
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	331e      	adds	r3, #30
 8001102:	80fb      	strh	r3, [r7, #6]
		y=y-BLOCK;
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	3b1e      	subs	r3, #30
 8001108:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < 2; i++)
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	3301      	adds	r3, #1
 800110e:	81fb      	strh	r3, [r7, #14]
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d9c8      	bls.n	80010a8 <S_Shape+0x24>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	aaaaaaab 	.word	0xaaaaaaab
 8001124:	55555556 	.word	0x55555556

08001128 <Z_Shape>:
void Z_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	80fb      	strh	r3, [r7, #6]
 800113a:	4603      	mov	r3, r0
 800113c:	80bb      	strh	r3, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]
 8001142:	4613      	mov	r3, r2
 8001144:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < 2; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	81fb      	strh	r3, [r7, #14]
 800114a:	e033      	b.n	80011b4 <Z_Shape+0x8c>
	{
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 800114c:	2300      	movs	r3, #0
 800114e:	81bb      	strh	r3, [r7, #12]
 8001150:	e01d      	b.n	800118e <Z_Shape+0x66>
		{
			for (uint16_t iii = 0; iii < len/3; iii++)
 8001152:	2300      	movs	r3, #0
 8001154:	817b      	strh	r3, [r7, #10]
 8001156:	e00e      	b.n	8001176 <Z_Shape+0x4e>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 8001158:	89ba      	ldrh	r2, [r7, #12]
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	4413      	add	r3, r2
 800115e:	b298      	uxth	r0, r3
 8001160:	897a      	ldrh	r2, [r7, #10]
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	883a      	ldrh	r2, [r7, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd64 	bl	8000c38 <LCD_Draw_Pixel>
			for (uint16_t iii = 0; iii < len/3; iii++)
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	3301      	adds	r3, #1
 8001174:	817b      	strh	r3, [r7, #10]
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <Z_Shape+0x9c>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	085b      	lsrs	r3, r3, #1
 8001180:	b29b      	uxth	r3, r3
 8001182:	897a      	ldrh	r2, [r7, #10]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3e7      	bcc.n	8001158 <Z_Shape+0x30>
		for (uint16_t ii = 0; ii < 2*len/3; ii++)
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	81bb      	strh	r3, [r7, #12]
 800118e:	89ba      	ldrh	r2, [r7, #12]
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <Z_Shape+0xa0>)
 8001196:	fb81 0103 	smull	r0, r1, r1, r3
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1acb      	subs	r3, r1, r3
 800119e:	429a      	cmp	r2, r3
 80011a0:	dbd7      	blt.n	8001152 <Z_Shape+0x2a>
			}
		}
		x=x+BLOCK;
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	331e      	adds	r3, #30
 80011a6:	80fb      	strh	r3, [r7, #6]
		y=y+BLOCK;
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	331e      	adds	r3, #30
 80011ac:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < 2; i++)
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	3301      	adds	r3, #1
 80011b2:	81fb      	strh	r3, [r7, #14]
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d9c8      	bls.n	800114c <Z_Shape+0x24>
	}
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	aaaaaaab 	.word	0xaaaaaaab
 80011c8:	55555556 	.word	0x55555556

080011cc <L_Shape>:
void L_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4604      	mov	r4, r0
 80011d4:	4608      	mov	r0, r1
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4623      	mov	r3, r4
 80011dc:	80fb      	strh	r3, [r7, #6]
 80011de:	4603      	mov	r3, r0
 80011e0:	80bb      	strh	r3, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]
 80011e6:	4613      	mov	r3, r2
 80011e8:	803b      	strh	r3, [r7, #0]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	81fb      	strh	r3, [r7, #14]
 80011ee:	e018      	b.n	8001222 <L_Shape+0x56>
	{
		for (uint16_t iii = 0 ;iii < len; iii++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	81bb      	strh	r3, [r7, #12]
 80011f4:	e00e      	b.n	8001214 <L_Shape+0x48>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 80011f6:	89fa      	ldrh	r2, [r7, #14]
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	4413      	add	r3, r2
 80011fc:	b298      	uxth	r0, r3
 80011fe:	89ba      	ldrh	r2, [r7, #12]
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	883a      	ldrh	r2, [r7, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fd15 	bl	8000c38 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len; iii++)
 800120e:	89bb      	ldrh	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	81bb      	strh	r3, [r7, #12]
 8001214:	89ba      	ldrh	r2, [r7, #12]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3ec      	bcc.n	80011f6 <L_Shape+0x2a>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	3301      	adds	r3, #1
 8001220:	81fb      	strh	r3, [r7, #14]
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <L_Shape+0xd4>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	085b      	lsrs	r3, r3, #1
 800122c:	b29b      	uxth	r3, r3
 800122e:	89fa      	ldrh	r2, [r7, #14]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3dd      	bcc.n	80011f0 <L_Shape+0x24>
		}
	}
	x= x + BLOCK;
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	331e      	adds	r3, #30
 8001238:	80fb      	strh	r3, [r7, #6]
	y= y + 2*BLOCK;
 800123a:	88bb      	ldrh	r3, [r7, #4]
 800123c:	333c      	adds	r3, #60	@ 0x3c
 800123e:	80bb      	strh	r3, [r7, #4]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001240:	2300      	movs	r3, #0
 8001242:	817b      	strh	r3, [r7, #10]
 8001244:	e01d      	b.n	8001282 <L_Shape+0xb6>
	{
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001246:	2300      	movs	r3, #0
 8001248:	813b      	strh	r3, [r7, #8]
 800124a:	e00e      	b.n	800126a <L_Shape+0x9e>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 800124c:	897a      	ldrh	r2, [r7, #10]
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	4413      	add	r3, r2
 8001252:	b298      	uxth	r0, r3
 8001254:	893a      	ldrh	r2, [r7, #8]
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	b29b      	uxth	r3, r3
 800125c:	883a      	ldrh	r2, [r7, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fcea 	bl	8000c38 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 8001264:	893b      	ldrh	r3, [r7, #8]
 8001266:	3301      	adds	r3, #1
 8001268:	813b      	strh	r3, [r7, #8]
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <L_Shape+0xd4>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	b29b      	uxth	r3, r3
 8001276:	893a      	ldrh	r2, [r7, #8]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3e7      	bcc.n	800124c <L_Shape+0x80>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	3301      	adds	r3, #1
 8001280:	817b      	strh	r3, [r7, #10]
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <L_Shape+0xd4>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	b29b      	uxth	r3, r3
 800128e:	897a      	ldrh	r2, [r7, #10]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3d8      	bcc.n	8001246 <L_Shape+0x7a>
		}
	}



}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	aaaaaaab 	.word	0xaaaaaaab

080012a4 <J_Shape>:
void J_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	80fb      	strh	r3, [r7, #6]
 80012b6:	4603      	mov	r3, r0
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
 80012be:	4613      	mov	r3, r2
 80012c0:	803b      	strh	r3, [r7, #0]
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	81fb      	strh	r3, [r7, #14]
 80012c6:	e018      	b.n	80012fa <J_Shape+0x56>
	{
		for ( uint16_t iii = 0 ;iii < len; iii++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	81bb      	strh	r3, [r7, #12]
 80012cc:	e00e      	b.n	80012ec <J_Shape+0x48>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 80012ce:	89fa      	ldrh	r2, [r7, #14]
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4413      	add	r3, r2
 80012d4:	b298      	uxth	r0, r3
 80012d6:	89ba      	ldrh	r2, [r7, #12]
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	883a      	ldrh	r2, [r7, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fca9 	bl	8000c38 <LCD_Draw_Pixel>
		for ( uint16_t iii = 0 ;iii < len; iii++)
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	81bb      	strh	r3, [r7, #12]
 80012ec:	89ba      	ldrh	r2, [r7, #12]
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3ec      	bcc.n	80012ce <J_Shape+0x2a>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	3301      	adds	r3, #1
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <J_Shape+0xd4>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	085b      	lsrs	r3, r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	89fa      	ldrh	r2, [r7, #14]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3dd      	bcc.n	80012c8 <J_Shape+0x24>
		}
	}

	x=x - BLOCK;
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	3b1e      	subs	r3, #30
 8001310:	80fb      	strh	r3, [r7, #6]
	y=y + 2*BLOCK;
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	333c      	adds	r3, #60	@ 0x3c
 8001316:	80bb      	strh	r3, [r7, #4]

	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001318:	2300      	movs	r3, #0
 800131a:	817b      	strh	r3, [r7, #10]
 800131c:	e01d      	b.n	800135a <J_Shape+0xb6>
	{
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 800131e:	2300      	movs	r3, #0
 8001320:	813b      	strh	r3, [r7, #8]
 8001322:	e00e      	b.n	8001342 <J_Shape+0x9e>
		{
			LCD_Draw_Pixel(ii+x, iii+y, color);
 8001324:	897a      	ldrh	r2, [r7, #10]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4413      	add	r3, r2
 800132a:	b298      	uxth	r0, r3
 800132c:	893a      	ldrh	r2, [r7, #8]
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	883a      	ldrh	r2, [r7, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fc7e 	bl	8000c38 <LCD_Draw_Pixel>
		for (uint16_t iii = 0 ;iii < len/3; iii++)
 800133c:	893b      	ldrh	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	813b      	strh	r3, [r7, #8]
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <J_Shape+0xd4>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	893a      	ldrh	r2, [r7, #8]
 8001350:	429a      	cmp	r2, r3
 8001352:	d3e7      	bcc.n	8001324 <J_Shape+0x80>
	for (uint16_t ii = 0 ;ii < len/3; ii++)
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	3301      	adds	r3, #1
 8001358:	817b      	strh	r3, [r7, #10]
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <J_Shape+0xd4>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	b29b      	uxth	r3, r3
 8001366:	897a      	ldrh	r2, [r7, #10]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3d8      	bcc.n	800131e <J_Shape+0x7a>
		}

	}
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	aaaaaaab 	.word	0xaaaaaaab

0800137c <T_Shape>:
void T_Shape(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	80fb      	strh	r3, [r7, #6]
 800138e:	4603      	mov	r3, r0
 8001390:	80bb      	strh	r3, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	807b      	strh	r3, [r7, #2]
 8001396:	4613      	mov	r3, r2
 8001398:	803b      	strh	r3, [r7, #0]
	static uint16_t ii = 0;

	for (uint16_t i = 0 ;i < 2; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	81fb      	strh	r3, [r7, #14]
 800139e:	e032      	b.n	8001406 <T_Shape+0x8a>
	{
		for ( ;ii < len; ii++)
		{
			for (uint16_t iii = 0 ;iii < len/3; iii++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	81bb      	strh	r3, [r7, #12]
 80013a4:	e00f      	b.n	80013c6 <T_Shape+0x4a>
			{
				LCD_Draw_Pixel(ii+x, iii+y, color);
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <T_Shape+0x9c>)
 80013a8:	881a      	ldrh	r2, [r3, #0]
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	4413      	add	r3, r2
 80013ae:	b298      	uxth	r0, r3
 80013b0:	89ba      	ldrh	r2, [r7, #12]
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	883a      	ldrh	r2, [r7, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fc3c 	bl	8000c38 <LCD_Draw_Pixel>
			for (uint16_t iii = 0 ;iii < len/3; iii++)
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	81bb      	strh	r3, [r7, #12]
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	4a14      	ldr	r2, [pc, #80]	@ (800141c <T_Shape+0xa0>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	085b      	lsrs	r3, r3, #1
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	89ba      	ldrh	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3e6      	bcc.n	80013a6 <T_Shape+0x2a>
		for ( ;ii < len; ii++)
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <T_Shape+0x9c>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <T_Shape+0x9c>)
 80013e2:	801a      	strh	r2, [r3, #0]
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <T_Shape+0x9c>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d8d8      	bhi.n	80013a0 <T_Shape+0x24>
			}
		}
		x=x-BLOCK;
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	80fb      	strh	r3, [r7, #6]
		y=y+BLOCK;
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	331e      	adds	r3, #30
 80013f8:	80bb      	strh	r3, [r7, #4]
		ii = 2*BLOCK;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <T_Shape+0x9c>)
 80013fc:	223c      	movs	r2, #60	@ 0x3c
 80013fe:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0 ;i < 2; i++)
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	3301      	adds	r3, #1
 8001404:	81fb      	strh	r3, [r7, #14]
 8001406:	89fb      	ldrh	r3, [r7, #14]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d9eb      	bls.n	80013e4 <T_Shape+0x68>
	}
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	20025acc 	.word	0x20025acc
 800141c:	aaaaaaab 	.word	0xaaaaaaab

08001420 <Draw_Block>:

void Draw_Block(uint16_t x, uint16_t y, uint16_t color)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	460b      	mov	r3, r1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i < 20; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	81fb      	strh	r3, [r7, #14]
 8001436:	e017      	b.n	8001468 <Draw_Block+0x48>
	{
		for (uint16_t ii = 0; ii < 20; ii++)
 8001438:	2300      	movs	r3, #0
 800143a:	81bb      	strh	r3, [r7, #12]
 800143c:	e00e      	b.n	800145c <Draw_Block+0x3c>
		{
			LCD_Draw_Pixel(i+x, ii+y, color);
 800143e:	89fa      	ldrh	r2, [r7, #14]
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	4413      	add	r3, r2
 8001444:	b298      	uxth	r0, r3
 8001446:	89ba      	ldrh	r2, [r7, #12]
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbf1 	bl	8000c38 <LCD_Draw_Pixel>
		for (uint16_t ii = 0; ii < 20; ii++)
 8001456:	89bb      	ldrh	r3, [r7, #12]
 8001458:	3301      	adds	r3, #1
 800145a:	81bb      	strh	r3, [r7, #12]
 800145c:	89bb      	ldrh	r3, [r7, #12]
 800145e:	2b13      	cmp	r3, #19
 8001460:	d9ed      	bls.n	800143e <Draw_Block+0x1e>
	for (uint16_t i = 0; i < 20; i++)
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	3301      	adds	r3, #1
 8001466:	81fb      	strh	r3, [r7, #14]
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	2b13      	cmp	r3, #19
 800146c:	d9e4      	bls.n	8001438 <Draw_Block+0x18>
		}
	}
}
 800146e:	bf00      	nop
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <RNG_Init>:
static RNG_HandleTypeDef hrng;

// HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng);

void RNG_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <RNG_Init+0x4c>)
 8001484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001486:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <RNG_Init+0x4c>)
 8001488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800148c:	6353      	str	r3, [r2, #52]	@ 0x34
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <RNG_Init+0x4c>)
 8001490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

	 hrng.Instance = RNG;
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <RNG_Init+0x50>)
 800149c:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <RNG_Init+0x54>)
 800149e:	601a      	str	r2, [r3, #0]
	 rngHALStatus = HAL_RNG_Init(&hrng);
 80014a0:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <RNG_Init+0x50>)
 80014a2:	f005 f85f 	bl	8006564 <HAL_RNG_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <RNG_Init+0x58>)
 80014ac:	701a      	strb	r2, [r3, #0]
		if(rngHALStatus != HAL_OK)
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <RNG_Init+0x58>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <RNG_Init+0x42>
			{
				for(;;);
 80014b6:	bf00      	nop
 80014b8:	e7fd      	b.n	80014b6 <RNG_Init+0x3e>
			}

}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	20025ad0 	.word	0x20025ad0
 80014cc:	50060800 	.word	0x50060800
 80014d0:	20025ace 	.word	0x20025ace

080014d4 <Gen_Number>:

uint32_t Gen_Number(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	uint32_t randomNumber;

	 rngHALStatus = HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4809      	ldr	r0, [pc, #36]	@ (8001504 <Gen_Number+0x30>)
 80014e0:	f005 f86a 	bl	80065b8 <HAL_RNG_GenerateRandomNumber>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <Gen_Number+0x34>)
 80014ea:	701a      	strb	r2, [r3, #0]
		if(rngHALStatus != HAL_OK)
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <Gen_Number+0x34>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <Gen_Number+0x24>
			{
				for(;;);
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <Gen_Number+0x20>
			}
	return randomNumber;
 80014f8:	687b      	ldr	r3, [r7, #4]

}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20025ad0 	.word	0x20025ad0
 8001508:	20025ace 	.word	0x20025ace

0800150c <addSchedulerEvent>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event; // Is this what we want?
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <addSchedulerEvent+0x20>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	4a03      	ldr	r2, [pc, #12]	@ (800152c <addSchedulerEvent+0x20>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	20025ae0 	.word	0x20025ae0

08001530 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event; // Is this what we want?
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	43da      	mvns	r2, r3
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <removeSchedulerEvent+0x24>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4013      	ands	r3, r2
 8001542:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <removeSchedulerEvent+0x24>)
 8001544:	6013      	str	r3, [r2, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20025ae0 	.word	0x20025ae0

08001558 <getScheduledEvents>:

uint32_t getScheduledEvents(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	return scheduledEvents;
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <getScheduledEvents+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20025ae0 	.word	0x20025ae0

08001570 <Start_Tetris>:

};


void Start_Tetris(void)
{
 8001570:	b598      	push	{r3, r4, r7, lr}
 8001572:	af00      	add	r7, sp, #0

	Ran_Numb = Random_Shape();
 8001574:	f000 f902 	bl	800177c <Random_Shape>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <Start_Tetris+0xf0>)
 800157e:	701a      	strb	r2, [r3, #0]

	block_struct.x_pos = 4;
 8001580:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <Start_Tetris+0xf4>)
 8001582:	2204      	movs	r2, #4
 8001584:	821a      	strh	r2, [r3, #16]
	block_struct.y_pos=0;
 8001586:	4b37      	ldr	r3, [pc, #220]	@ (8001664 <Start_Tetris+0xf4>)
 8001588:	2200      	movs	r2, #0
 800158a:	825a      	strh	r2, [r3, #18]


             	switch(Ran_Numb)
 800158c:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <Start_Tetris+0xf0>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b06      	cmp	r3, #6
 8001592:	d85d      	bhi.n	8001650 <Start_Tetris+0xe0>
 8001594:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <Start_Tetris+0x2c>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015b9 	.word	0x080015b9
 80015a0:	080015cf 	.word	0x080015cf
 80015a4:	080015e5 	.word	0x080015e5
 80015a8:	080015fb 	.word	0x080015fb
 80015ac:	08001611 	.word	0x08001611
 80015b0:	08001625 	.word	0x08001625
 80015b4:	0800163b 	.word	0x0800163b
	{
	case 0:
		memcpy(block_struct.Current_Shape, O, sizeof(block_struct.Current_Shape));
 80015b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001664 <Start_Tetris+0xf4>)
 80015ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <Start_Tetris+0xf8>)
 80015bc:	4614      	mov	r4, r2
 80015be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_YELLOW;
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <Start_Tetris+0xf4>)
 80015c6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015ca:	829a      	strh	r2, [r3, #20]
		break;
 80015cc:	e040      	b.n	8001650 <Start_Tetris+0xe0>

	case 1:
		memcpy(block_struct.Current_Shape, I, sizeof(block_struct.Current_Shape));
 80015ce:	4a25      	ldr	r2, [pc, #148]	@ (8001664 <Start_Tetris+0xf4>)
 80015d0:	4b26      	ldr	r3, [pc, #152]	@ (800166c <Start_Tetris+0xfc>)
 80015d2:	4614      	mov	r4, r2
 80015d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_CYAN;
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <Start_Tetris+0xf4>)
 80015dc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80015e0:	829a      	strh	r2, [r3, #20]
		break;
 80015e2:	e035      	b.n	8001650 <Start_Tetris+0xe0>

	case 2:
		memcpy(block_struct.Current_Shape, S, sizeof(block_struct.Current_Shape));
 80015e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <Start_Tetris+0xf4>)
 80015e6:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <Start_Tetris+0x100>)
 80015e8:	4614      	mov	r4, r2
 80015ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_RED;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <Start_Tetris+0xf4>)
 80015f2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015f6:	829a      	strh	r2, [r3, #20]
		break;
 80015f8:	e02a      	b.n	8001650 <Start_Tetris+0xe0>

	case 3:
		memcpy(block_struct.Current_Shape, Z, sizeof(block_struct.Current_Shape));
 80015fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001664 <Start_Tetris+0xf4>)
 80015fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <Start_Tetris+0x104>)
 80015fe:	4614      	mov	r4, r2
 8001600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_GREEN;
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <Start_Tetris+0xf4>)
 8001608:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800160c:	829a      	strh	r2, [r3, #20]
		break;
 800160e:	e01f      	b.n	8001650 <Start_Tetris+0xe0>

	case 4:
		memcpy(block_struct.Current_Shape, L, sizeof(block_struct.Current_Shape));
 8001610:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <Start_Tetris+0xf4>)
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <Start_Tetris+0x108>)
 8001614:	4614      	mov	r4, r2
 8001616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_BLUE;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <Start_Tetris+0xf4>)
 800161e:	221f      	movs	r2, #31
 8001620:	829a      	strh	r2, [r3, #20]
		break;
 8001622:	e015      	b.n	8001650 <Start_Tetris+0xe0>

	case 5:
		memcpy(block_struct.Current_Shape, J, sizeof(block_struct.Current_Shape));
 8001624:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <Start_Tetris+0xf4>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <Start_Tetris+0x10c>)
 8001628:	4614      	mov	r4, r2
 800162a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_MAGENTA;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <Start_Tetris+0xf4>)
 8001632:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001636:	829a      	strh	r2, [r3, #20]
		break;
 8001638:	e00a      	b.n	8001650 <Start_Tetris+0xe0>

	case 6:
		memcpy(block_struct.Current_Shape, T, sizeof(block_struct.Current_Shape));
 800163a:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <Start_Tetris+0xf4>)
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <Start_Tetris+0x110>)
 800163e:	4614      	mov	r4, r2
 8001640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		block_struct.Current_Color = LCD_COLOR_BLUE2;
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <Start_Tetris+0xf4>)
 8001648:	f240 521f 	movw	r2, #1311	@ 0x51f
 800164c:	829a      	strh	r2, [r3, #20]
		break;
 800164e:	bf00      	nop
	}

	Draw_Shape(&block_struct);
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <Start_Tetris+0xf4>)
 8001652:	f000 f817 	bl	8001684 <Draw_Shape>
	TIMER_Int_Start();
 8001656:	f000 ff67 	bl	8002528 <TIMER_Int_Start>

}
 800165a:	bf00      	nop
 800165c:	bd98      	pop	{r3, r4, r7, pc}
 800165e:	bf00      	nop
 8001660:	20025afc 	.word	0x20025afc
 8001664:	20025b00 	.word	0x20025b00
 8001668:	20000004 	.word	0x20000004
 800166c:	20000014 	.word	0x20000014
 8001670:	20000024 	.word	0x20000024
 8001674:	20000034 	.word	0x20000034
 8001678:	20000044 	.word	0x20000044
 800167c:	20000054 	.word	0x20000054
 8001680:	20000064 	.word	0x20000064

08001684 <Draw_Shape>:

void Draw_Shape(block_t* block)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

	// If any element in the row is 1 then draw block @ x_start+i and y_start

	// If any element in the next colm then draw block @ x_start+i and y_start+j // i may very well be 0 cause far left

	for (uint16_t j = 0; j < 4; j++)
 800168c:	2300      	movs	r3, #0
 800168e:	81fb      	strh	r3, [r7, #14]
 8001690:	e02d      	b.n	80016ee <Draw_Shape+0x6a>
	{
		for (uint16_t i = 0; i < 4; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	81bb      	strh	r3, [r7, #12]
 8001696:	e024      	b.n	80016e2 <Draw_Shape+0x5e>
		{
			if((block->Current_Shape)[j][i] == 1)
 8001698:	89fa      	ldrh	r2, [r7, #14]
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	440a      	add	r2, r1
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d118      	bne.n	80016dc <Draw_Shape+0x58>
			{
				Draw_Block((block->x_pos+i)*20, (block->y_pos+j)*20, block->Current_Color);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	8a1a      	ldrh	r2, [r3, #16]
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	b298      	uxth	r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	8a5a      	ldrh	r2, [r3, #18]
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	4413      	add	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	b299      	uxth	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8a9b      	ldrh	r3, [r3, #20]
 80016d6:	461a      	mov	r2, r3
 80016d8:	f7ff fea2 	bl	8001420 <Draw_Block>
		for (uint16_t i = 0; i < 4; i++)
 80016dc:	89bb      	ldrh	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	81bb      	strh	r3, [r7, #12]
 80016e2:	89bb      	ldrh	r3, [r7, #12]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d9d7      	bls.n	8001698 <Draw_Shape+0x14>
	for (uint16_t j = 0; j < 4; j++)
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	3301      	adds	r3, #1
 80016ec:	81fb      	strh	r3, [r7, #14]
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d9ce      	bls.n	8001692 <Draw_Shape+0xe>

			}
		}
	}
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <Update_Board>:
// Got an Error when I did block_t* block then did switch(block->Current_Shape) so decided to do
// Void for input then did an instance!
void Update_Board(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t j;


	for (i = 0; i < 4; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	e028      	b.n	800175e <Update_Board+0x5e>
	{
		for (j = 0; j < 4; j++)
 800170c:	2300      	movs	r3, #0
 800170e:	71bb      	strb	r3, [r7, #6]
 8001710:	e01f      	b.n	8001752 <Update_Board+0x52>
		{
			if (block_struct.Current_Shape[i][j] == 1)
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	4917      	ldr	r1, [pc, #92]	@ (8001774 <Update_Board+0x74>)
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	440a      	add	r2, r1
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d113      	bne.n	800174c <Update_Board+0x4c>
			{
				Board[(block_struct.y_pos) + i-1][block_struct.x_pos + j] = 1;
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <Update_Board+0x74>)
 8001726:	8a5b      	ldrh	r3, [r3, #18]
 8001728:	461a      	mov	r2, r3
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4413      	add	r3, r2
 800172e:	1e5a      	subs	r2, r3, #1
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <Update_Board+0x74>)
 8001732:	8a1b      	ldrh	r3, [r3, #16]
 8001734:	4619      	mov	r1, r3
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	4419      	add	r1, r3
 800173a:	480f      	ldr	r0, [pc, #60]	@ (8001778 <Update_Board+0x78>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4403      	add	r3, r0
 8001746:	440b      	add	r3, r1
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 4; j++)
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	3301      	adds	r3, #1
 8001750:	71bb      	strb	r3, [r7, #6]
 8001752:	79bb      	ldrb	r3, [r7, #6]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d9dc      	bls.n	8001712 <Update_Board+0x12>
	for (i = 0; i < 4; i++)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	3301      	adds	r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d9d3      	bls.n	800170c <Update_Board+0xc>
			}
		}
	}
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20025b00 	.word	0x20025b00
 8001778:	20000074 	.word	0x20000074

0800177c <Random_Shape>:

uint8_t Random_Shape(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	uint32_t random = Gen_Number();
 8001782:	f7ff fea7 	bl	80014d4 <Gen_Number>
 8001786:	6078      	str	r0, [r7, #4]
	random = random % SEVEN;
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <Random_Shape+0x34>)
 800178c:	fba3 1302 	umull	r1, r3, r3, r2
 8001790:	1ad1      	subs	r1, r2, r3
 8001792:	0849      	lsrs	r1, r1, #1
 8001794:	440b      	add	r3, r1
 8001796:	0899      	lsrs	r1, r3, #2
 8001798:	460b      	mov	r3, r1
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	1a5b      	subs	r3, r3, r1
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	607b      	str	r3, [r7, #4]
	return random;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	b2db      	uxtb	r3, r3
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24924925 	.word	0x24924925

080017b4 <Rotate_CC>:

void Rotate_CC(void)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
	if( Check_Down() == true )
 80017ba:	f000 f865 	bl	8001888 <Check_Down>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d05a      	beq.n	800187a <Rotate_CC+0xc6>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <Rotate_CC+0xd0>)
 80017c6:	8a9b      	ldrh	r3, [r3, #20]
 80017c8:	827b      	strh	r3, [r7, #18]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <Rotate_CC+0xd0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 80017d0:	482c      	ldr	r0, [pc, #176]	@ (8001884 <Rotate_CC+0xd0>)
 80017d2:	f7ff ff57 	bl	8001684 <Draw_Shape>
		block_struct.Current_Color = temp_color;
 80017d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001884 <Rotate_CC+0xd0>)
 80017d8:	8a7b      	ldrh	r3, [r7, #18]
 80017da:	8293      	strh	r3, [r2, #20]

		uint8_t temp[4][4] = {0};
 80017dc:	463b      	mov	r3, r7
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
		// Flip the matrix clockwise using nested loops
		for (uint8_t i = 0; i < 4; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
 80017ec:	e01d      	b.n	800182a <Rotate_CC+0x76>
		{
			for (uint8_t j = 0; j < 4; j++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	75bb      	strb	r3, [r7, #22]
 80017f2:	e014      	b.n	800181e <Rotate_CC+0x6a>
			{
				temp[j][4 - i - 1] = (block_struct.Current_Shape)[i][j];
 80017f4:	7df8      	ldrb	r0, [r7, #23]
 80017f6:	7db9      	ldrb	r1, [r7, #22]
 80017f8:	7dba      	ldrb	r2, [r7, #22]
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	f1c3 0303 	rsb	r3, r3, #3
 8001800:	4c20      	ldr	r4, [pc, #128]	@ (8001884 <Rotate_CC+0xd0>)
 8001802:	0080      	lsls	r0, r0, #2
 8001804:	4420      	add	r0, r4
 8001806:	4401      	add	r1, r0
 8001808:	7809      	ldrb	r1, [r1, #0]
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	3218      	adds	r2, #24
 800180e:	443a      	add	r2, r7
 8001810:	4413      	add	r3, r2
 8001812:	3b18      	subs	r3, #24
 8001814:	460a      	mov	r2, r1
 8001816:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4; j++)
 8001818:	7dbb      	ldrb	r3, [r7, #22]
 800181a:	3301      	adds	r3, #1
 800181c:	75bb      	strb	r3, [r7, #22]
 800181e:	7dbb      	ldrb	r3, [r7, #22]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d9e7      	bls.n	80017f4 <Rotate_CC+0x40>
		for (uint8_t i = 0; i < 4; i++)
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	3301      	adds	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d9de      	bls.n	80017ee <Rotate_CC+0x3a>
			}
		}

		// Copy result back to mat
		for (uint8_t i = 0; i < 4; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	757b      	strb	r3, [r7, #21]
 8001834:	e01b      	b.n	800186e <Rotate_CC+0xba>
		{
			for (uint8_t j = 0; j < 4; j++)
 8001836:	2300      	movs	r3, #0
 8001838:	753b      	strb	r3, [r7, #20]
 800183a:	e012      	b.n	8001862 <Rotate_CC+0xae>
			{
				(block_struct.Current_Shape)[i][j] = temp[i][j];
 800183c:	7d78      	ldrb	r0, [r7, #21]
 800183e:	7d39      	ldrb	r1, [r7, #20]
 8001840:	7d7a      	ldrb	r2, [r7, #21]
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	0080      	lsls	r0, r0, #2
 8001846:	3018      	adds	r0, #24
 8001848:	4438      	add	r0, r7
 800184a:	4401      	add	r1, r0
 800184c:	3918      	subs	r1, #24
 800184e:	7808      	ldrb	r0, [r1, #0]
 8001850:	490c      	ldr	r1, [pc, #48]	@ (8001884 <Rotate_CC+0xd0>)
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	440a      	add	r2, r1
 8001856:	4413      	add	r3, r2
 8001858:	4602      	mov	r2, r0
 800185a:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4; j++)
 800185c:	7d3b      	ldrb	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	753b      	strb	r3, [r7, #20]
 8001862:	7d3b      	ldrb	r3, [r7, #20]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d9e9      	bls.n	800183c <Rotate_CC+0x88>
		for (uint8_t i = 0; i < 4; i++)
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	3301      	adds	r3, #1
 800186c:	757b      	strb	r3, [r7, #21]
 800186e:	7d7b      	ldrb	r3, [r7, #21]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d9e0      	bls.n	8001836 <Rotate_CC+0x82>
			}
		}

		Draw_Shape(&block_struct);
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <Rotate_CC+0xd0>)
 8001876:	f7ff ff05 	bl	8001684 <Draw_Shape>
	{

	}


}
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	20025b00 	.word	0x20025b00

08001888 <Check_Down>:
bool Check_Down(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
	far_overal_l_col = 0;
 800188e:	4b8d      	ldr	r3, [pc, #564]	@ (8001ac4 <Check_Down+0x23c>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
	far_overal_r_col = 0;
 8001894:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac8 <Check_Down+0x240>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]

	lowest_row = 0;
 800189a:	4b8c      	ldr	r3, [pc, #560]	@ (8001acc <Check_Down+0x244>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
	int8_t i = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
	int8_t j = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73bb      	strb	r3, [r7, #14]

	for ( i = 3; i > -1; i--)
 80018a8:	2303      	movs	r3, #3
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e028      	b.n	8001900 <Check_Down+0x78>
		{
			for ( j = 0; j < 4; j++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	73bb      	strb	r3, [r7, #14]
 80018b2:	e01b      	b.n	80018ec <Check_Down+0x64>
			{
				// Find the lowest row that has element equal to 1 because then when checking
				// the board I can just check Board[(block_struct.y_pos)-lowest_row]
				if( (block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 80018b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80018b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018bc:	4984      	ldr	r1, [pc, #528]	@ (8001ad0 <Check_Down+0x248>)
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	440a      	add	r2, r1
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00a      	beq.n	80018e0 <Check_Down+0x58>
 80018ca:	4b82      	ldr	r3, [pc, #520]	@ (8001ad4 <Check_Down+0x24c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d106      	bne.n	80018e0 <Check_Down+0x58>
				{
					LOWRFLAG = 0;
 80018d2:	4b80      	ldr	r3, [pc, #512]	@ (8001ad4 <Check_Down+0x24c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
					lowest_row = i;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	4b7c      	ldr	r3, [pc, #496]	@ (8001acc <Check_Down+0x244>)
 80018dc:	701a      	strb	r2, [r3, #0]
					break;
 80018de:	e009      	b.n	80018f4 <Check_Down+0x6c>
			for ( j = 0; j < 4; j++)
 80018e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	73bb      	strb	r3, [r7, #14]
 80018ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	dddf      	ble.n	80018b4 <Check_Down+0x2c>
	for ( i = 3; i > -1; i--)
 80018f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dad2      	bge.n	80018ae <Check_Down+0x26>
				}
			}
		}

		LOWRFLAG = 1;
 8001908:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <Check_Down+0x24c>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]

		for ( j=0; j<4; j++)
 800190e:	2300      	movs	r3, #0
 8001910:	73bb      	strb	r3, [r7, #14]
 8001912:	e02e      	b.n	8001972 <Check_Down+0xea>
		{
			for ( i=0; i<=lowest_row; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e01b      	b.n	8001952 <Check_Down+0xca>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 800191a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800191e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001922:	496b      	ldr	r1, [pc, #428]	@ (8001ad0 <Check_Down+0x248>)
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	440a      	add	r2, r1
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00a      	beq.n	8001946 <Check_Down+0xbe>
 8001930:	4b68      	ldr	r3, [pc, #416]	@ (8001ad4 <Check_Down+0x24c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <Check_Down+0xbe>
				{
					LOWRFLAG = 0;
 8001938:	4b66      	ldr	r3, [pc, #408]	@ (8001ad4 <Check_Down+0x24c>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
					far_overal_l_col = j;
 800193e:	7bba      	ldrb	r2, [r7, #14]
 8001940:	4b60      	ldr	r3, [pc, #384]	@ (8001ac4 <Check_Down+0x23c>)
 8001942:	701a      	strb	r2, [r3, #0]
					break;
 8001944:	e00b      	b.n	800195e <Check_Down+0xd6>
			for ( i=0; i<=lowest_row; i++)
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	3301      	adds	r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4a5d      	ldr	r2, [pc, #372]	@ (8001acc <Check_Down+0x244>)
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	4293      	cmp	r3, r2
 800195c:	dddd      	ble.n	800191a <Check_Down+0x92>
				}
			}
			if (LOWRFLAG == 0)
 800195e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <Check_Down+0x24c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <Check_Down+0xf4>
		for ( j=0; j<4; j++)
 8001966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	73bb      	strb	r3, [r7, #14]
 8001972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001976:	2b03      	cmp	r3, #3
 8001978:	ddcc      	ble.n	8001914 <Check_Down+0x8c>
 800197a:	e000      	b.n	800197e <Check_Down+0xf6>
			{
				break;
 800197c:	bf00      	nop
			}
		}

		LOWRFLAG = 1;
 800197e:	4b55      	ldr	r3, [pc, #340]	@ (8001ad4 <Check_Down+0x24c>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]

		for ( j=3; j>-1; j--)
 8001984:	2303      	movs	r3, #3
 8001986:	73bb      	strb	r3, [r7, #14]
 8001988:	e02e      	b.n	80019e8 <Check_Down+0x160>
		{
			for ( i=0; i<=lowest_row; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e01b      	b.n	80019c8 <Check_Down+0x140>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 8001990:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001998:	494d      	ldr	r1, [pc, #308]	@ (8001ad0 <Check_Down+0x248>)
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	440a      	add	r2, r1
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <Check_Down+0x134>
 80019a6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <Check_Down+0x24c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <Check_Down+0x134>
				{
					LOWRFLAG = 0;
 80019ae:	4b49      	ldr	r3, [pc, #292]	@ (8001ad4 <Check_Down+0x24c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
					far_overal_r_col = j;
 80019b4:	7bba      	ldrb	r2, [r7, #14]
 80019b6:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <Check_Down+0x240>)
 80019b8:	701a      	strb	r2, [r3, #0]
					break;
 80019ba:	e00b      	b.n	80019d4 <Check_Down+0x14c>
			for ( i=0; i<=lowest_row; i++)
 80019bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019cc:	4a3f      	ldr	r2, [pc, #252]	@ (8001acc <Check_Down+0x244>)
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	dddd      	ble.n	8001990 <Check_Down+0x108>
				}

			}
			if (LOWRFLAG == 0)
 80019d4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad4 <Check_Down+0x24c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <Check_Down+0x16a>
		for ( j=3; j>-1; j--)
 80019dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	73bb      	strb	r3, [r7, #14]
 80019e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dacc      	bge.n	800198a <Check_Down+0x102>
 80019f0:	e000      	b.n	80019f4 <Check_Down+0x16c>
			{
				break;
 80019f2:	bf00      	nop
//		}
//	}
//		LOWRFLAG = 1;
//		return true;

	if (LOWRFLAG == 0)
 80019f4:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <Check_Down+0x24c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d15b      	bne.n	8001ab4 <Check_Down+0x22c>
	{
		for (int i = lowest_row; i > -1; i--)
 80019fc:	4b33      	ldr	r3, [pc, #204]	@ (8001acc <Check_Down+0x244>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	e04f      	b.n	8001aa4 <Check_Down+0x21c>
		{
			for (int j = far_overal_l_col; j <= far_overal_r_col; j++)
 8001a04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac4 <Check_Down+0x23c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	e042      	b.n	8001a92 <Check_Down+0x20a>
			{
				int8_t board_x = block_struct.x_pos + j;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <Check_Down+0x248>)
 8001a0e:	8a1b      	ldrh	r3, [r3, #16]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	70fb      	strb	r3, [r7, #3]
				int8_t board_y = block_struct.y_pos + i;
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad0 <Check_Down+0x248>)
 8001a1e:	8a5b      	ldrh	r3, [r3, #18]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	70bb      	strb	r3, [r7, #2]

				if (board_x == 0 || board_x == 11)
 8001a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d028      	beq.n	8001a86 <Check_Down+0x1fe>
 8001a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a38:	2b0b      	cmp	r3, #11
 8001a3a:	d024      	beq.n	8001a86 <Check_Down+0x1fe>
				{
					continue;
				}

				if (board_x < 0 || board_x >= 12 || board_y >= 16)
 8001a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db22      	blt.n	8001a8a <Check_Down+0x202>
 8001a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a48:	2b0b      	cmp	r3, #11
 8001a4a:	dc1e      	bgt.n	8001a8a <Check_Down+0x202>
 8001a4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	dc1a      	bgt.n	8001a8a <Check_Down+0x202>
				{
					continue;
				}

				if (Board[board_y][board_x] && block_struct.Current_Shape[i][j] == 1)
 8001a54:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001a58:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8001a5c:	481e      	ldr	r0, [pc, #120]	@ (8001ad8 <Check_Down+0x250>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4403      	add	r3, r0
 8001a68:	440b      	add	r3, r1
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <Check_Down+0x204>
 8001a70:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <Check_Down+0x248>)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	441a      	add	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d104      	bne.n	8001a8c <Check_Down+0x204>
				{
					return false;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e017      	b.n	8001ab6 <Check_Down+0x22e>
					continue;
 8001a86:	bf00      	nop
 8001a88:	e000      	b.n	8001a8c <Check_Down+0x204>
					continue;
 8001a8a:	bf00      	nop
			for (int j = far_overal_l_col; j <= far_overal_r_col; j++)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <Check_Down+0x240>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	ddb6      	ble.n	8001a0c <Check_Down+0x184>
		for (int i = lowest_row; i > -1; i--)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	daac      	bge.n	8001a04 <Check_Down+0x17c>
				}
			}
		}

		LOWRFLAG = 1;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <Check_Down+0x24c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
		return true; // No collisions
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <Check_Down+0x22e>

	}
	return false;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20025afa 	.word	0x20025afa
 8001ac8:	20025afb 	.word	0x20025afb
 8001acc:	20025af9 	.word	0x20025af9
 8001ad0:	20025b00 	.word	0x20025b00
 8001ad4:	20000002 	.word	0x20000002
 8001ad8:	20000074 	.word	0x20000074

08001adc <Move_Down>:

void Move_Down(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	if( Check_Down() == true )
 8001ae2:	f7ff fed1 	bl	8001888 <Check_Down>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d015      	beq.n	8001b18 <Move_Down+0x3c>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <Move_Down+0x58>)
 8001aee:	8a9b      	ldrh	r3, [r3, #20]
 8001af0:	80fb      	strh	r3, [r7, #6]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <Move_Down+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 8001af8:	480e      	ldr	r0, [pc, #56]	@ (8001b34 <Move_Down+0x58>)
 8001afa:	f7ff fdc3 	bl	8001684 <Draw_Shape>


		block_struct.Current_Color = temp_color;
 8001afe:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <Move_Down+0x58>)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	8293      	strh	r3, [r2, #20]
		block_struct.y_pos +=1;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <Move_Down+0x58>)
 8001b06:	8a5b      	ldrh	r3, [r3, #18]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <Move_Down+0x58>)
 8001b0e:	825a      	strh	r2, [r3, #18]
		Draw_Shape(&block_struct);
 8001b10:	4808      	ldr	r0, [pc, #32]	@ (8001b34 <Move_Down+0x58>)
 8001b12:	f7ff fdb7 	bl	8001684 <Draw_Shape>
		Update_Board();
		Check_Endgame();
		Start_Tetris();

	}
}
 8001b16:	e009      	b.n	8001b2c <Move_Down+0x50>
		TIMER_Int_Stop();
 8001b18:	f000 fd1c 	bl	8002554 <TIMER_Int_Stop>
		TIMER_Reset();
 8001b1c:	f000 fcec 	bl	80024f8 <TIMER_Reset>
		Update_Board();
 8001b20:	f7ff fdee 	bl	8001700 <Update_Board>
		Check_Endgame();
 8001b24:	f000 f808 	bl	8001b38 <Check_Endgame>
		Start_Tetris();
 8001b28:	f7ff fd22 	bl	8001570 <Start_Tetris>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20025b00 	.word	0x20025b00

08001b38 <Check_Endgame>:

void Check_Endgame(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

	for (uint8_t j = 2; j <= 9; j++)
 8001b3e:	2302      	movs	r3, #2
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	e00d      	b.n	8001b60 <Check_Endgame+0x28>
	{
		if ( Board[0][j] == 1)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <Check_Endgame+0x38>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <Check_Endgame+0x22>
		{

			EndGame();
 8001b4e:	f000 f813 	bl	8001b78 <EndGame>
			ENDGAME_FLAG = 1;
 8001b52:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <Check_Endgame+0x3c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
			break;
 8001b58:	e006      	b.n	8001b68 <Check_Endgame+0x30>
	for (uint8_t j = 2; j <= 9; j++)
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	d9ee      	bls.n	8001b44 <Check_Endgame+0xc>
		}
	}

}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000074 	.word	0x20000074
 8001b74:	20025ae4 	.word	0x20025ae4

08001b78 <EndGame>:

void EndGame(void)
{
 8001b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b7c:	b088      	sub	sp, #32
 8001b7e:	af00      	add	r7, sp, #0
	count_value = 0;
 8001b80:	49af      	ldr	r1, [pc, #700]	@ (8001e40 <EndGame+0x2c8>)
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9c1 2300 	strd	r2, r3, [r1]
	time_elapsed = 0;
 8001b8e:	49ad      	ldr	r1, [pc, #692]	@ (8001e44 <EndGame+0x2cc>)
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]

	char Time[5] = {'P', 'P', 'P', 'P', 'P'};
 8001b9c:	4aaa      	ldr	r2, [pc, #680]	@ (8001e48 <EndGame+0x2d0>)
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba6:	6018      	str	r0, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	7019      	strb	r1, [r3, #0]

	LCD_Clear(0,LCD_COLOR_BLACK);
 8001bac:	2100      	movs	r1, #0
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff f860 	bl	8000c74 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001bb4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001bb8:	f7ff f87e 	bl	8000cb8 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8001bbc:	48a3      	ldr	r0, [pc, #652]	@ (8001e4c <EndGame+0x2d4>)
 8001bbe:	f7ff f88b 	bl	8000cd8 <LCD_SetFont>

	LCD_DisplayChar(20, 100, 'E');
 8001bc2:	2245      	movs	r2, #69	@ 0x45
 8001bc4:	2164      	movs	r1, #100	@ 0x64
 8001bc6:	2014      	movs	r0, #20
 8001bc8:	f7ff f904 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(30, 100, 'L');
 8001bcc:	224c      	movs	r2, #76	@ 0x4c
 8001bce:	2164      	movs	r1, #100	@ 0x64
 8001bd0:	201e      	movs	r0, #30
 8001bd2:	f7ff f8ff 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(40, 100, 'A');
 8001bd6:	2241      	movs	r2, #65	@ 0x41
 8001bd8:	2164      	movs	r1, #100	@ 0x64
 8001bda:	2028      	movs	r0, #40	@ 0x28
 8001bdc:	f7ff f8fa 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(50, 100, 'P');
 8001be0:	2250      	movs	r2, #80	@ 0x50
 8001be2:	2164      	movs	r1, #100	@ 0x64
 8001be4:	2032      	movs	r0, #50	@ 0x32
 8001be6:	f7ff f8f5 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(60, 100, 'S');
 8001bea:	2253      	movs	r2, #83	@ 0x53
 8001bec:	2164      	movs	r1, #100	@ 0x64
 8001bee:	203c      	movs	r0, #60	@ 0x3c
 8001bf0:	f7ff f8f0 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(70, 100, 'E');
 8001bf4:	2245      	movs	r2, #69	@ 0x45
 8001bf6:	2164      	movs	r1, #100	@ 0x64
 8001bf8:	2046      	movs	r0, #70	@ 0x46
 8001bfa:	f7ff f8eb 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(80, 100, 'D');
 8001bfe:	2244      	movs	r2, #68	@ 0x44
 8001c00:	2164      	movs	r1, #100	@ 0x64
 8001c02:	2050      	movs	r0, #80	@ 0x50
 8001c04:	f7ff f8e6 	bl	8000dd4 <LCD_DisplayChar>

	LCD_DisplayChar(100, 100, 'T');
 8001c08:	2254      	movs	r2, #84	@ 0x54
 8001c0a:	2164      	movs	r1, #100	@ 0x64
 8001c0c:	2064      	movs	r0, #100	@ 0x64
 8001c0e:	f7ff f8e1 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(110, 100, 'I');
 8001c12:	2249      	movs	r2, #73	@ 0x49
 8001c14:	2164      	movs	r1, #100	@ 0x64
 8001c16:	206e      	movs	r0, #110	@ 0x6e
 8001c18:	f7ff f8dc 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 8001c1c:	224d      	movs	r2, #77	@ 0x4d
 8001c1e:	2164      	movs	r1, #100	@ 0x64
 8001c20:	2078      	movs	r0, #120	@ 0x78
 8001c22:	f7ff f8d7 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(130, 100, 'E');
 8001c26:	2245      	movs	r2, #69	@ 0x45
 8001c28:	2164      	movs	r1, #100	@ 0x64
 8001c2a:	2082      	movs	r0, #130	@ 0x82
 8001c2c:	f7ff f8d2 	bl	8000dd4 <LCD_DisplayChar>

	LCD_DisplayChar(15, 250, 'R');
 8001c30:	2252      	movs	r2, #82	@ 0x52
 8001c32:	21fa      	movs	r1, #250	@ 0xfa
 8001c34:	200f      	movs	r0, #15
 8001c36:	f7ff f8cd 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(25, 250, 'E');
 8001c3a:	2245      	movs	r2, #69	@ 0x45
 8001c3c:	21fa      	movs	r1, #250	@ 0xfa
 8001c3e:	2019      	movs	r0, #25
 8001c40:	f7ff f8c8 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(35, 250, 'S');
 8001c44:	2253      	movs	r2, #83	@ 0x53
 8001c46:	21fa      	movs	r1, #250	@ 0xfa
 8001c48:	2023      	movs	r0, #35	@ 0x23
 8001c4a:	f7ff f8c3 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(45, 250, 'E');
 8001c4e:	2245      	movs	r2, #69	@ 0x45
 8001c50:	21fa      	movs	r1, #250	@ 0xfa
 8001c52:	202d      	movs	r0, #45	@ 0x2d
 8001c54:	f7ff f8be 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(55, 250, 'T');
 8001c58:	2254      	movs	r2, #84	@ 0x54
 8001c5a:	21fa      	movs	r1, #250	@ 0xfa
 8001c5c:	2037      	movs	r0, #55	@ 0x37
 8001c5e:	f7ff f8b9 	bl	8000dd4 <LCD_DisplayChar>

	LCD_DisplayChar(75, 250, 'T');
 8001c62:	2254      	movs	r2, #84	@ 0x54
 8001c64:	21fa      	movs	r1, #250	@ 0xfa
 8001c66:	204b      	movs	r0, #75	@ 0x4b
 8001c68:	f7ff f8b4 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(85, 250, 'O');
 8001c6c:	224f      	movs	r2, #79	@ 0x4f
 8001c6e:	21fa      	movs	r1, #250	@ 0xfa
 8001c70:	2055      	movs	r0, #85	@ 0x55
 8001c72:	f7ff f8af 	bl	8000dd4 <LCD_DisplayChar>

	LCD_DisplayChar(105, 250, 'P');
 8001c76:	2250      	movs	r2, #80	@ 0x50
 8001c78:	21fa      	movs	r1, #250	@ 0xfa
 8001c7a:	2069      	movs	r0, #105	@ 0x69
 8001c7c:	f7ff f8aa 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(115, 250, 'L');
 8001c80:	224c      	movs	r2, #76	@ 0x4c
 8001c82:	21fa      	movs	r1, #250	@ 0xfa
 8001c84:	2073      	movs	r0, #115	@ 0x73
 8001c86:	f7ff f8a5 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(125, 250, 'A');
 8001c8a:	2241      	movs	r2, #65	@ 0x41
 8001c8c:	21fa      	movs	r1, #250	@ 0xfa
 8001c8e:	207d      	movs	r0, #125	@ 0x7d
 8001c90:	f7ff f8a0 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(135, 250, 'Y');
 8001c94:	2259      	movs	r2, #89	@ 0x59
 8001c96:	21fa      	movs	r1, #250	@ 0xfa
 8001c98:	2087      	movs	r0, #135	@ 0x87
 8001c9a:	f7ff f89b 	bl	8000dd4 <LCD_DisplayChar>

	LCD_DisplayChar(155, 250, 'A');
 8001c9e:	2241      	movs	r2, #65	@ 0x41
 8001ca0:	21fa      	movs	r1, #250	@ 0xfa
 8001ca2:	209b      	movs	r0, #155	@ 0x9b
 8001ca4:	f7ff f896 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(165, 250, 'G');
 8001ca8:	2247      	movs	r2, #71	@ 0x47
 8001caa:	21fa      	movs	r1, #250	@ 0xfa
 8001cac:	20a5      	movs	r0, #165	@ 0xa5
 8001cae:	f7ff f891 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(175, 250, 'A');
 8001cb2:	2241      	movs	r2, #65	@ 0x41
 8001cb4:	21fa      	movs	r1, #250	@ 0xfa
 8001cb6:	20af      	movs	r0, #175	@ 0xaf
 8001cb8:	f7ff f88c 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(185, 250, 'I');
 8001cbc:	2249      	movs	r2, #73	@ 0x49
 8001cbe:	21fa      	movs	r1, #250	@ 0xfa
 8001cc0:	20b9      	movs	r0, #185	@ 0xb9
 8001cc2:	f7ff f887 	bl	8000dd4 <LCD_DisplayChar>
	LCD_DisplayChar(195, 250, 'N');
 8001cc6:	224e      	movs	r2, #78	@ 0x4e
 8001cc8:	21fa      	movs	r1, #250	@ 0xfa
 8001cca:	20c3      	movs	r0, #195	@ 0xc3
 8001ccc:	f7ff f882 	bl	8000dd4 <LCD_DisplayChar>

	TIMER_Stop();
 8001cd0:	f000 fc60 	bl	8002594 <TIMER_Stop>
	count_value = TIMER_ReturnVal();
 8001cd4:	f000 fc1c 	bl	8002510 <TIMER_ReturnVal>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	60fa      	str	r2, [r7, #12]
 8001ce0:	4b57      	ldr	r3, [pc, #348]	@ (8001e40 <EndGame+0x2c8>)
 8001ce2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ce6:	e9c3 1200 	strd	r1, r2, [r3]
	// In seconds
	time_elapsed = ((count_value + 1)*(PRESCALER + 1))/PCLK;
 8001cea:	4b55      	ldr	r3, [pc, #340]	@ (8001e40 <EndGame+0x2c8>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	1c54      	adds	r4, r2, #1
 8001cf2:	f143 0500 	adc.w	r5, r3, #0
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	f04f 0000 	mov.w	r0, #0
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d08:	0090      	lsls	r0, r2, #2
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	eb12 0a04 	adds.w	sl, r2, r4
 8001d12:	eb43 0b05 	adc.w	fp, r3, r5
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d2a:	4692      	mov	sl, r2
 8001d2c:	469b      	mov	fp, r3
 8001d2e:	ebba 0804 	subs.w	r8, sl, r4
 8001d32:	eb6b 0905 	sbc.w	r9, fp, r5
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001d42:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001d46:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	eb18 0304 	adds.w	r3, r8, r4
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	eb49 0305 	adc.w	r3, r9, r5
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d66:	4629      	mov	r1, r5
 8001d68:	00cb      	lsls	r3, r1, #3
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d70:	4621      	mov	r1, r4
 8001d72:	00ca      	lsls	r2, r1, #3
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	a32f      	add	r3, pc, #188	@ (adr r3, 8001e38 <EndGame+0x2c0>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fa8f 	bl	80002a0 <__aeabi_uldivmod>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	492f      	ldr	r1, [pc, #188]	@ (8001e44 <EndGame+0x2cc>)
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
	itoa(time_elapsed, Time, 10);
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e44 <EndGame+0x2cc>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	4610      	mov	r0, r2
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	220a      	movs	r2, #10
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f005 fc1b 	bl	80075d6 <itoa>
	uint8_t Temp = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]

	for (int8_t i = 4; i>=0; i--)
 8001da4:	2304      	movs	r3, #4
 8001da6:	77bb      	strb	r3, [r7, #30]
 8001da8:	e01a      	b.n	8001de0 <EndGame+0x268>
	{
		if ( Time[i] != 'P' && ELAPSE_FLAG == 0)
 8001daa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001dae:	3310      	adds	r3, #16
 8001db0:	f107 0210 	add.w	r2, r7, #16
 8001db4:	4413      	add	r3, r2
 8001db6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001dba:	2b50      	cmp	r3, #80	@ 0x50
 8001dbc:	d00a      	beq.n	8001dd4 <EndGame+0x25c>
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <EndGame+0x2d8>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <EndGame+0x25c>
		{
			Temp = i;
 8001dc8:	7fbb      	ldrb	r3, [r7, #30]
 8001dca:	77fb      	strb	r3, [r7, #31]
			ELAPSE_FLAG = 1;
 8001dcc:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <EndGame+0x2d8>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
			break;
 8001dd2:	e009      	b.n	8001de8 <EndGame+0x270>
	for (int8_t i = 4; i>=0; i--)
 8001dd4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	77bb      	strb	r3, [r7, #30]
 8001de0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	dae0      	bge.n	8001daa <EndGame+0x232>
		}
	}

	uint8_t space = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	777b      	strb	r3, [r7, #29]
	for (uint8_t i = 0; i < Temp; i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	773b      	strb	r3, [r7, #28]
 8001df0:	e014      	b.n	8001e1c <EndGame+0x2a4>
	{

		LCD_DisplayChar(150+space, 100 ,Time[i]);
 8001df2:	7f7b      	ldrb	r3, [r7, #29]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3396      	adds	r3, #150	@ 0x96
 8001df8:	b298      	uxth	r0, r3
 8001dfa:	7f3b      	ldrb	r3, [r7, #28]
 8001dfc:	3310      	adds	r3, #16
 8001dfe:	f107 0210 	add.w	r2, r7, #16
 8001e02:	4413      	add	r3, r2
 8001e04:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2164      	movs	r1, #100	@ 0x64
 8001e0c:	f7fe ffe2 	bl	8000dd4 <LCD_DisplayChar>
		space += 10;
 8001e10:	7f7b      	ldrb	r3, [r7, #29]
 8001e12:	330a      	adds	r3, #10
 8001e14:	777b      	strb	r3, [r7, #29]
	for (uint8_t i = 0; i < Temp; i++)
 8001e16:	7f3b      	ldrb	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	773b      	strb	r3, [r7, #28]
 8001e1c:	7f3a      	ldrb	r2, [r7, #28]
 8001e1e:	7ffb      	ldrb	r3, [r7, #31]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d3e6      	bcc.n	8001df2 <EndGame+0x27a>
	}
	HAL_Delay(15000);
 8001e24:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001e28:	f001 fe10 	bl	8003a4c <HAL_Delay>
}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	0501bd00 	.word	0x0501bd00
 8001e3c:	00000000 	.word	0x00000000
 8001e40:	20025ae8 	.word	0x20025ae8
 8001e44:	20025af0 	.word	0x20025af0
 8001e48:	080084e8 	.word	0x080084e8
 8001e4c:	2000013c 	.word	0x2000013c
 8001e50:	20025ae5 	.word	0x20025ae5

08001e54 <Check_Right>:

bool Check_Right(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
//	static uint8_t highest_row = 0;
//	static uint8_t lowest_row = 0;
//
//	static uint8_t far_overal_l_col = 0;
//	static uint8_t far_overal_r_col = 0;
	far_overal_r_col = 0;
 8001e5a:	4b9e      	ldr	r3, [pc, #632]	@ (80020d4 <Check_Right+0x280>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
	far_overal_l_col = 0;
 8001e60:	4b9d      	ldr	r3, [pc, #628]	@ (80020d8 <Check_Right+0x284>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]

	highest_row = 0;
 8001e66:	4b9d      	ldr	r3, [pc, #628]	@ (80020dc <Check_Right+0x288>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
	lowest_row = 0;
 8001e6c:	4b9c      	ldr	r3, [pc, #624]	@ (80020e0 <Check_Right+0x28c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
	int8_t i = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
	int8_t j = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	71bb      	strb	r3, [r7, #6]

	for ( i = 3; i > -1; i--)
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	e028      	b.n	8001ed2 <Check_Right+0x7e>
		{
			for ( j = 0; j < 4; j++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	71bb      	strb	r3, [r7, #6]
 8001e84:	e01b      	b.n	8001ebe <Check_Right+0x6a>
			{
				// Find the lowest row that has element equal to 1 because then when checking
				// the board I can just check Board[(block_struct.y_pos)-lowest_row]
				if( (block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 8001e86:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001e8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e8e:	4995      	ldr	r1, [pc, #596]	@ (80020e4 <Check_Right+0x290>)
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	440a      	add	r2, r1
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <Check_Right+0x5e>
 8001e9c:	4b92      	ldr	r3, [pc, #584]	@ (80020e8 <Check_Right+0x294>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <Check_Right+0x5e>
				{
					LOWRFLAG = 0;
 8001ea4:	4b90      	ldr	r3, [pc, #576]	@ (80020e8 <Check_Right+0x294>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
					lowest_row = i;
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	4b8c      	ldr	r3, [pc, #560]	@ (80020e0 <Check_Right+0x28c>)
 8001eae:	701a      	strb	r2, [r3, #0]
					break;
 8001eb0:	e009      	b.n	8001ec6 <Check_Right+0x72>
			for ( j = 0; j < 4; j++)
 8001eb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	71bb      	strb	r3, [r7, #6]
 8001ebe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	dddf      	ble.n	8001e86 <Check_Right+0x32>
	for ( i = 3; i > -1; i--)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	dad2      	bge.n	8001e80 <Check_Right+0x2c>
				}
			}
		}

		LOWRFLAG = 1;
 8001eda:	4b83      	ldr	r3, [pc, #524]	@ (80020e8 <Check_Right+0x294>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]

		for ( i = 0; i < 4 ; i++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	e028      	b.n	8001f38 <Check_Right+0xe4>
		{
			for ( j = 0; j < 4; j++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71bb      	strb	r3, [r7, #6]
 8001eea:	e01b      	b.n	8001f24 <Check_Right+0xd0>
			{
				// Find the highest row that has element equal to 1 because then when checking
				// the board I can just check Board[(block_struct.y_pos)-lowest_row]
				if( (block_struct.Current_Shape)[i][j] && HIGHRFLAG == 1)
 8001eec:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001ef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ef4:	497b      	ldr	r1, [pc, #492]	@ (80020e4 <Check_Right+0x290>)
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	440a      	add	r2, r1
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <Check_Right+0xc4>
 8001f02:	4b7a      	ldr	r3, [pc, #488]	@ (80020ec <Check_Right+0x298>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d106      	bne.n	8001f18 <Check_Right+0xc4>
				{
					HIGHRFLAG = 0;
 8001f0a:	4b78      	ldr	r3, [pc, #480]	@ (80020ec <Check_Right+0x298>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
					highest_row = i;
 8001f10:	79fa      	ldrb	r2, [r7, #7]
 8001f12:	4b72      	ldr	r3, [pc, #456]	@ (80020dc <Check_Right+0x288>)
 8001f14:	701a      	strb	r2, [r3, #0]
					break;
 8001f16:	e009      	b.n	8001f2c <Check_Right+0xd8>
			for ( j = 0; j < 4; j++)
 8001f18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	71bb      	strb	r3, [r7, #6]
 8001f24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	dddf      	ble.n	8001eec <Check_Right+0x98>
		for ( i = 0; i < 4 ; i++)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	ddd2      	ble.n	8001ee6 <Check_Right+0x92>
				}
			}
		}

		HIGHRFLAG = 1;
 8001f40:	4b6a      	ldr	r3, [pc, #424]	@ (80020ec <Check_Right+0x298>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]


		for ( j=0; j<4; j++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	71bb      	strb	r3, [r7, #6]
 8001f4a:	e02e      	b.n	8001faa <Check_Right+0x156>
		{
			for ( i=0; i<=lowest_row; i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	e01b      	b.n	8001f8a <Check_Right+0x136>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 8001f52:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001f56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f5a:	4962      	ldr	r1, [pc, #392]	@ (80020e4 <Check_Right+0x290>)
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	440a      	add	r2, r1
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <Check_Right+0x12a>
 8001f68:	4b5f      	ldr	r3, [pc, #380]	@ (80020e8 <Check_Right+0x294>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <Check_Right+0x12a>
				{
					LOWRFLAG = 0;
 8001f70:	4b5d      	ldr	r3, [pc, #372]	@ (80020e8 <Check_Right+0x294>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
					far_overal_l_col = j;
 8001f76:	79ba      	ldrb	r2, [r7, #6]
 8001f78:	4b57      	ldr	r3, [pc, #348]	@ (80020d8 <Check_Right+0x284>)
 8001f7a:	701a      	strb	r2, [r3, #0]
					break;
 8001f7c:	e00b      	b.n	8001f96 <Check_Right+0x142>
			for ( i=0; i<=lowest_row; i++)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	4a54      	ldr	r2, [pc, #336]	@ (80020e0 <Check_Right+0x28c>)
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	dddd      	ble.n	8001f52 <Check_Right+0xfe>
				}
			}
			if (LOWRFLAG == 0)
 8001f96:	4b54      	ldr	r3, [pc, #336]	@ (80020e8 <Check_Right+0x294>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <Check_Right+0x160>
		for ( j=0; j<4; j++)
 8001f9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	71bb      	strb	r3, [r7, #6]
 8001faa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	ddcc      	ble.n	8001f4c <Check_Right+0xf8>
 8001fb2:	e000      	b.n	8001fb6 <Check_Right+0x162>
			{
				break;
 8001fb4:	bf00      	nop
			}
		}

		LOWRFLAG = 1;
 8001fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80020e8 <Check_Right+0x294>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]

		for ( j = 3; j > -1; j--)
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	71bb      	strb	r3, [r7, #6]
 8001fc0:	e02e      	b.n	8002020 <Check_Right+0x1cc>
		{
			for ( i = 0; i <= lowest_row; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	e01b      	b.n	8002000 <Check_Right+0x1ac>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 8001fc8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001fcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fd0:	4944      	ldr	r1, [pc, #272]	@ (80020e4 <Check_Right+0x290>)
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	440a      	add	r2, r1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <Check_Right+0x1a0>
 8001fde:	4b42      	ldr	r3, [pc, #264]	@ (80020e8 <Check_Right+0x294>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d106      	bne.n	8001ff4 <Check_Right+0x1a0>
				{
					LOWRFLAG = 0;
 8001fe6:	4b40      	ldr	r3, [pc, #256]	@ (80020e8 <Check_Right+0x294>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
					far_overal_r_col = j;
 8001fec:	79ba      	ldrb	r2, [r7, #6]
 8001fee:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <Check_Right+0x280>)
 8001ff0:	701a      	strb	r2, [r3, #0]
					break;
 8001ff2:	e00b      	b.n	800200c <Check_Right+0x1b8>
			for ( i = 0; i <= lowest_row; i++)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4a36      	ldr	r2, [pc, #216]	@ (80020e0 <Check_Right+0x28c>)
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	4293      	cmp	r3, r2
 800200a:	dddd      	ble.n	8001fc8 <Check_Right+0x174>
				}

			}
			if (LOWRFLAG == 0)
 800200c:	4b36      	ldr	r3, [pc, #216]	@ (80020e8 <Check_Right+0x294>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <Check_Right+0x1d6>
		for ( j = 3; j > -1; j--)
 8002014:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	71bb      	strb	r3, [r7, #6]
 8002020:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dacc      	bge.n	8001fc2 <Check_Right+0x16e>
 8002028:	e000      	b.n	800202c <Check_Right+0x1d8>
			{
				break;
 800202a:	bf00      	nop
			}
		}

	if ( LOWRFLAG == 0)
 800202c:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <Check_Right+0x294>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d147      	bne.n	80020c4 <Check_Right+0x270>
	{
		for (j = far_overal_r_col; j >= far_overal_l_col; j--  )
 8002034:	4b27      	ldr	r3, [pc, #156]	@ (80020d4 <Check_Right+0x280>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	71bb      	strb	r3, [r7, #6]
 800203a:	e038      	b.n	80020ae <Check_Right+0x25a>
		{
			for ( i = highest_row; i <= lowest_row; i++)
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <Check_Right+0x288>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	e028      	b.n	8002096 <Check_Right+0x242>
			{
				if(Board[(block_struct.y_pos)+i][(block_struct.x_pos)+j] && block_struct.Current_Shape[i][j] == 1)
 8002044:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <Check_Right+0x290>)
 8002046:	8a5b      	ldrh	r3, [r3, #18]
 8002048:	461a      	mov	r2, r3
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	441a      	add	r2, r3
 8002050:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <Check_Right+0x290>)
 8002052:	8a1b      	ldrh	r3, [r3, #16]
 8002054:	4619      	mov	r1, r3
 8002056:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800205a:	4419      	add	r1, r3
 800205c:	4824      	ldr	r0, [pc, #144]	@ (80020f0 <Check_Right+0x29c>)
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4403      	add	r3, r0
 8002068:	440b      	add	r3, r1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <Check_Right+0x236>
 8002070:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002074:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002078:	491a      	ldr	r1, [pc, #104]	@ (80020e4 <Check_Right+0x290>)
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	440a      	add	r2, r1
 800207e:	4413      	add	r3, r2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <Check_Right+0x236>
				{
					return false;
 8002086:	2300      	movs	r3, #0
 8002088:	e01d      	b.n	80020c6 <Check_Right+0x272>
			for ( i = highest_row; i <= lowest_row; i++)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <Check_Right+0x28c>)
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	4293      	cmp	r3, r2
 80020a0:	ddd0      	ble.n	8002044 <Check_Right+0x1f0>
		for (j = far_overal_r_col; j >= far_overal_l_col; j--  )
 80020a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	71bb      	strb	r3, [r7, #6]
 80020ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020b2:	4a09      	ldr	r2, [pc, #36]	@ (80020d8 <Check_Right+0x284>)
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	dac0      	bge.n	800203c <Check_Right+0x1e8>
				}
			}
		}

		LOWRFLAG = 1;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <Check_Right+0x294>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
		return true;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <Check_Right+0x272>

	}
	return false;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20025afb 	.word	0x20025afb
 80020d8:	20025afa 	.word	0x20025afa
 80020dc:	20025af8 	.word	0x20025af8
 80020e0:	20025af9 	.word	0x20025af9
 80020e4:	20025b00 	.word	0x20025b00
 80020e8:	20000002 	.word	0x20000002
 80020ec:	20000003 	.word	0x20000003
 80020f0:	20000074 	.word	0x20000074

080020f4 <Check_Left>:

bool Check_Left(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
	//	static uint8_t highest_row = 0;
	//	static uint8_t lowest_row = 0;
	//
	//	static uint8_t far_overal_l_col = 0;
	//	static uint8_t far_overal_r_col = 0;
	far_overal_r_col = 0;
 80020fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002374 <Check_Left+0x280>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
	far_overal_l_col = 0;
 8002100:	4b9d      	ldr	r3, [pc, #628]	@ (8002378 <Check_Left+0x284>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]

	highest_row = 0;
 8002106:	4b9d      	ldr	r3, [pc, #628]	@ (800237c <Check_Left+0x288>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
	lowest_row = 0;
 800210c:	4b9c      	ldr	r3, [pc, #624]	@ (8002380 <Check_Left+0x28c>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
	int8_t i = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	71fb      	strb	r3, [r7, #7]
	int8_t j = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	71bb      	strb	r3, [r7, #6]

	for ( i = 3; i > -1; i--)
 800211a:	2303      	movs	r3, #3
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	e028      	b.n	8002172 <Check_Left+0x7e>
		{
			for ( j = 0; j < 4; j++)
 8002120:	2300      	movs	r3, #0
 8002122:	71bb      	strb	r3, [r7, #6]
 8002124:	e01b      	b.n	800215e <Check_Left+0x6a>
			{
				// Find the lowest row that has element equal to 1 because then when checking
				// the board I can just check Board[(block_struct.y_pos)-lowest_row]
				if( (block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 8002126:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800212a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800212e:	4995      	ldr	r1, [pc, #596]	@ (8002384 <Check_Left+0x290>)
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	440a      	add	r2, r1
 8002134:	4413      	add	r3, r2
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <Check_Left+0x5e>
 800213c:	4b92      	ldr	r3, [pc, #584]	@ (8002388 <Check_Left+0x294>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <Check_Left+0x5e>
				{
					LOWRFLAG = 0;
 8002144:	4b90      	ldr	r3, [pc, #576]	@ (8002388 <Check_Left+0x294>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
					lowest_row = i;
 800214a:	79fa      	ldrb	r2, [r7, #7]
 800214c:	4b8c      	ldr	r3, [pc, #560]	@ (8002380 <Check_Left+0x28c>)
 800214e:	701a      	strb	r2, [r3, #0]
					break;
 8002150:	e009      	b.n	8002166 <Check_Left+0x72>
			for ( j = 0; j < 4; j++)
 8002152:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	71bb      	strb	r3, [r7, #6]
 800215e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002162:	2b03      	cmp	r3, #3
 8002164:	dddf      	ble.n	8002126 <Check_Left+0x32>
	for ( i = 3; i > -1; i--)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	71fb      	strb	r3, [r7, #7]
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	dad2      	bge.n	8002120 <Check_Left+0x2c>
				}
			}
		}

		LOWRFLAG = 1;
 800217a:	4b83      	ldr	r3, [pc, #524]	@ (8002388 <Check_Left+0x294>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]

		for ( i = 0; i < 4 ; i++)
 8002180:	2300      	movs	r3, #0
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	e028      	b.n	80021d8 <Check_Left+0xe4>
		{
			for ( j = 0; j < 4; j++)
 8002186:	2300      	movs	r3, #0
 8002188:	71bb      	strb	r3, [r7, #6]
 800218a:	e01b      	b.n	80021c4 <Check_Left+0xd0>
			{
				// Find the highest row that has element equal to 1 because then when checking
				// the board I can just check Board[(block_struct.y_pos)-lowest_row]
				if( (block_struct.Current_Shape)[i][j] && HIGHRFLAG == 1)
 800218c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002190:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002194:	497b      	ldr	r1, [pc, #492]	@ (8002384 <Check_Left+0x290>)
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	440a      	add	r2, r1
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <Check_Left+0xc4>
 80021a2:	4b7a      	ldr	r3, [pc, #488]	@ (800238c <Check_Left+0x298>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d106      	bne.n	80021b8 <Check_Left+0xc4>
				{
					HIGHRFLAG = 0;
 80021aa:	4b78      	ldr	r3, [pc, #480]	@ (800238c <Check_Left+0x298>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
					highest_row = i;
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	4b72      	ldr	r3, [pc, #456]	@ (800237c <Check_Left+0x288>)
 80021b4:	701a      	strb	r2, [r3, #0]
					break;
 80021b6:	e009      	b.n	80021cc <Check_Left+0xd8>
			for ( j = 0; j < 4; j++)
 80021b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	71bb      	strb	r3, [r7, #6]
 80021c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	dddf      	ble.n	800218c <Check_Left+0x98>
		for ( i = 0; i < 4 ; i++)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	ddd2      	ble.n	8002186 <Check_Left+0x92>
				}
			}
		}

		HIGHRFLAG = 1;
 80021e0:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <Check_Left+0x298>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]


		for ( j = 0; j < 4; j++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	71bb      	strb	r3, [r7, #6]
 80021ea:	e02e      	b.n	800224a <Check_Left+0x156>
		{
			for ( i = 0; i<= lowest_row; i++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	e01b      	b.n	800222a <Check_Left+0x136>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 80021f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80021f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021fa:	4962      	ldr	r1, [pc, #392]	@ (8002384 <Check_Left+0x290>)
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	440a      	add	r2, r1
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <Check_Left+0x12a>
 8002208:	4b5f      	ldr	r3, [pc, #380]	@ (8002388 <Check_Left+0x294>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d106      	bne.n	800221e <Check_Left+0x12a>
				{
					LOWRFLAG = 0;
 8002210:	4b5d      	ldr	r3, [pc, #372]	@ (8002388 <Check_Left+0x294>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
					far_overal_l_col = j;
 8002216:	79ba      	ldrb	r2, [r7, #6]
 8002218:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <Check_Left+0x284>)
 800221a:	701a      	strb	r2, [r3, #0]
					break;
 800221c:	e00b      	b.n	8002236 <Check_Left+0x142>
			for ( i = 0; i<= lowest_row; i++)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	71fb      	strb	r3, [r7, #7]
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	4a54      	ldr	r2, [pc, #336]	@ (8002380 <Check_Left+0x28c>)
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	4293      	cmp	r3, r2
 8002234:	dddd      	ble.n	80021f2 <Check_Left+0xfe>
				}
			}
			if (LOWRFLAG == 0)
 8002236:	4b54      	ldr	r3, [pc, #336]	@ (8002388 <Check_Left+0x294>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <Check_Left+0x160>
		for ( j = 0; j < 4; j++)
 800223e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	71bb      	strb	r3, [r7, #6]
 800224a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800224e:	2b03      	cmp	r3, #3
 8002250:	ddcc      	ble.n	80021ec <Check_Left+0xf8>
 8002252:	e000      	b.n	8002256 <Check_Left+0x162>
			{
				break;
 8002254:	bf00      	nop
			}
		}

		LOWRFLAG = 1;
 8002256:	4b4c      	ldr	r3, [pc, #304]	@ (8002388 <Check_Left+0x294>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]

		for ( j = 3; j > -1; j--)
 800225c:	2303      	movs	r3, #3
 800225e:	71bb      	strb	r3, [r7, #6]
 8002260:	e02e      	b.n	80022c0 <Check_Left+0x1cc>
		{
			for ( i = 0; i <= lowest_row; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	e01b      	b.n	80022a0 <Check_Left+0x1ac>
			{
				if ( ( block_struct.Current_Shape)[i][j] && LOWRFLAG == 1)
 8002268:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800226c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002270:	4944      	ldr	r1, [pc, #272]	@ (8002384 <Check_Left+0x290>)
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	440a      	add	r2, r1
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <Check_Left+0x1a0>
 800227e:	4b42      	ldr	r3, [pc, #264]	@ (8002388 <Check_Left+0x294>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d106      	bne.n	8002294 <Check_Left+0x1a0>
				{
					LOWRFLAG = 0;
 8002286:	4b40      	ldr	r3, [pc, #256]	@ (8002388 <Check_Left+0x294>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
					far_overal_r_col = j;
 800228c:	79ba      	ldrb	r2, [r7, #6]
 800228e:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <Check_Left+0x280>)
 8002290:	701a      	strb	r2, [r3, #0]
					break;
 8002292:	e00b      	b.n	80022ac <Check_Left+0x1b8>
			for ( i = 0; i <= lowest_row; i++)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3301      	adds	r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4a36      	ldr	r2, [pc, #216]	@ (8002380 <Check_Left+0x28c>)
 80022a6:	7812      	ldrb	r2, [r2, #0]
 80022a8:	4293      	cmp	r3, r2
 80022aa:	dddd      	ble.n	8002268 <Check_Left+0x174>
				}

			}
			if (LOWRFLAG == 0)
 80022ac:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <Check_Left+0x294>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <Check_Left+0x1d6>
		for ( j = 3; j > -1; j--)
 80022b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	71bb      	strb	r3, [r7, #6]
 80022c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	dacc      	bge.n	8002262 <Check_Left+0x16e>
 80022c8:	e000      	b.n	80022cc <Check_Left+0x1d8>
			{
				break;
 80022ca:	bf00      	nop
			}
		}

	if ( LOWRFLAG == 0)
 80022cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <Check_Left+0x294>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d147      	bne.n	8002364 <Check_Left+0x270>
	{
		for (j = far_overal_l_col; j <= far_overal_r_col; j++  )
 80022d4:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <Check_Left+0x284>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	71bb      	strb	r3, [r7, #6]
 80022da:	e038      	b.n	800234e <Check_Left+0x25a>
		{
			for ( i = highest_row; i <= lowest_row; i++)
 80022dc:	4b27      	ldr	r3, [pc, #156]	@ (800237c <Check_Left+0x288>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	e028      	b.n	8002336 <Check_Left+0x242>
			{
				if(Board[(block_struct.y_pos)+i][(block_struct.x_pos)+j] && block_struct.Current_Shape[i][j] == 1)
 80022e4:	4b27      	ldr	r3, [pc, #156]	@ (8002384 <Check_Left+0x290>)
 80022e6:	8a5b      	ldrh	r3, [r3, #18]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	441a      	add	r2, r3
 80022f0:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <Check_Left+0x290>)
 80022f2:	8a1b      	ldrh	r3, [r3, #16]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022fa:	4419      	add	r1, r3
 80022fc:	4824      	ldr	r0, [pc, #144]	@ (8002390 <Check_Left+0x29c>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4403      	add	r3, r0
 8002308:	440b      	add	r3, r1
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00c      	beq.n	800232a <Check_Left+0x236>
 8002310:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002314:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002318:	491a      	ldr	r1, [pc, #104]	@ (8002384 <Check_Left+0x290>)
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	440a      	add	r2, r1
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <Check_Left+0x236>
				{
					return false;
 8002326:	2300      	movs	r3, #0
 8002328:	e01d      	b.n	8002366 <Check_Left+0x272>
			for ( i = highest_row; i <= lowest_row; i++)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <Check_Left+0x28c>)
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	4293      	cmp	r3, r2
 8002340:	ddd0      	ble.n	80022e4 <Check_Left+0x1f0>
		for (j = far_overal_l_col; j <= far_overal_r_col; j++  )
 8002342:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	71bb      	strb	r3, [r7, #6]
 800234e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002352:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <Check_Left+0x280>)
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	4293      	cmp	r3, r2
 8002358:	ddc0      	ble.n	80022dc <Check_Left+0x1e8>
				}
			}
		}

		LOWRFLAG = 1;
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <Check_Left+0x294>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
		return true;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <Check_Left+0x272>

	}
	return false;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20025afb 	.word	0x20025afb
 8002378:	20025afa 	.word	0x20025afa
 800237c:	20025af8 	.word	0x20025af8
 8002380:	20025af9 	.word	0x20025af9
 8002384:	20025b00 	.word	0x20025b00
 8002388:	20000002 	.word	0x20000002
 800238c:	20000003 	.word	0x20000003
 8002390:	20000074 	.word	0x20000074

08002394 <Move_Right>:

void Move_Right(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
	if( Check_Right() == true )
 800239a:	f7ff fd5b 	bl	8001e54 <Check_Right>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d014      	beq.n	80023ce <Move_Right+0x3a>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <Move_Right+0x44>)
 80023a6:	8a9b      	ldrh	r3, [r3, #20]
 80023a8:	80fb      	strh	r3, [r7, #6]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <Move_Right+0x44>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 80023b0:	4809      	ldr	r0, [pc, #36]	@ (80023d8 <Move_Right+0x44>)
 80023b2:	f7ff f967 	bl	8001684 <Draw_Shape>


		block_struct.Current_Color = temp_color;
 80023b6:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <Move_Right+0x44>)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	8293      	strh	r3, [r2, #20]
		block_struct.x_pos +=1;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <Move_Right+0x44>)
 80023be:	8a1b      	ldrh	r3, [r3, #16]
 80023c0:	3301      	adds	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <Move_Right+0x44>)
 80023c6:	821a      	strh	r2, [r3, #16]
		Draw_Shape(&block_struct);
 80023c8:	4803      	ldr	r0, [pc, #12]	@ (80023d8 <Move_Right+0x44>)
 80023ca:	f7ff f95b 	bl	8001684 <Draw_Shape>
	}
	else
	{

	}
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20025b00 	.word	0x20025b00

080023dc <Move_Left>:

void Move_Left(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
	if( Check_Left() == true )
 80023e2:	f7ff fe87 	bl	80020f4 <Check_Left>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d014      	beq.n	8002416 <Move_Left+0x3a>
	{
		uint16_t temp_color;
		temp_color = block_struct.Current_Color;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <Move_Left+0x44>)
 80023ee:	8a9b      	ldrh	r3, [r3, #20]
 80023f0:	80fb      	strh	r3, [r7, #6]
		block_struct.Current_Color = LCD_COLOR_BLACK;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <Move_Left+0x44>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	829a      	strh	r2, [r3, #20]
		Draw_Shape(&block_struct);
 80023f8:	4809      	ldr	r0, [pc, #36]	@ (8002420 <Move_Left+0x44>)
 80023fa:	f7ff f943 	bl	8001684 <Draw_Shape>


		block_struct.Current_Color = temp_color;
 80023fe:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <Move_Left+0x44>)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	8293      	strh	r3, [r2, #20]
		block_struct.x_pos -=1;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <Move_Left+0x44>)
 8002406:	8a1b      	ldrh	r3, [r3, #16]
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <Move_Left+0x44>)
 800240e:	821a      	strh	r2, [r3, #16]
		Draw_Shape(&block_struct);
 8002410:	4803      	ldr	r0, [pc, #12]	@ (8002420 <Move_Left+0x44>)
 8002412:	f7ff f937 	bl	8001684 <Draw_Shape>
	}
	else
	{

	}
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20025b00 	.word	0x20025b00

08002424 <TIMER_Init>:
static TIM_HandleTypeDef htim2;
static TIM_HandleTypeDef htim5;


void TIMER_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM5_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <TIMER_Init+0xc0>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a2c      	ldr	r2, [pc, #176]	@ (80024e4 <TIMER_Init+0xc0>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <TIMER_Init+0xc0>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
	htim5.Instance = TIM5;
 8002446:	4b28      	ldr	r3, [pc, #160]	@ (80024e8 <TIMER_Init+0xc4>)
 8002448:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <TIMER_Init+0xc8>)
 800244a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = PRESCALER;
 800244c:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <TIMER_Init+0xc4>)
 800244e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002452:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <TIMER_Init+0xc4>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = ARR_MAX;
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <TIMER_Init+0xc4>)
 800245c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002460:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002462:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <TIMER_Init+0xc4>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <TIMER_Init+0xc4>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
	timHALStatus = HAL_TIM_Base_Init(&htim5);
 800246e:	481e      	ldr	r0, [pc, #120]	@ (80024e8 <TIMER_Init+0xc4>)
 8002470:	f004 fbd8 	bl	8006c24 <HAL_TIM_Base_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	4b1d      	ldr	r3, [pc, #116]	@ (80024f0 <TIMER_Init+0xcc>)
 800247a:	701a      	strb	r2, [r3, #0]


	__HAL_RCC_TIM2_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4b18      	ldr	r3, [pc, #96]	@ (80024e4 <TIMER_Init+0xc0>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <TIMER_Init+0xc0>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6413      	str	r3, [r2, #64]	@ 0x40
 800248c:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <TIMER_Init+0xc0>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	683b      	ldr	r3, [r7, #0]

	// TIM 2 Config

	htim2.Instance = TIM2;
 8002498:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <TIMER_Init+0xd0>)
 800249a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800249e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = PRESCALER;
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <TIMER_Init+0xd0>)
 80024a2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80024a6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <TIMER_Init+0xd0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]

	// TODO: CHANGE ME TO ARR_3 for the blocks to fall every 3 Seconds

	htim2.Init.Period = ARR_1;
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <TIMER_Init+0xd0>)
 80024b0:	f244 129f 	movw	r2, #16799	@ 0x419f
 80024b4:	60da      	str	r2, [r3, #12]
	//htim2.Init.Period = ARR_3;
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <TIMER_Init+0xd0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <TIMER_Init+0xd0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
	timHALStatus = HAL_TIM_Base_Init(&htim2);
 80024c2:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <TIMER_Init+0xd0>)
 80024c4:	f004 fbae 	bl	8006c24 <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <TIMER_Init+0xcc>)
 80024ce:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 80024d0:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <TIMER_Init+0xcc>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <TIMER_Init+0xb8>
		{
			for(;;);
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <TIMER_Init+0xb4>
		}



}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	20025b60 	.word	0x20025b60
 80024ec:	40000c00 	.word	0x40000c00
 80024f0:	20025b16 	.word	0x20025b16
 80024f4:	20025b18 	.word	0x20025b18

080024f8 <TIMER_Reset>:
//void TIMER_Start(void);
//
//void TIMER_Stop(void);
//
void TIMER_Reset()
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
	TIM2->CNT = RESET;
 80024fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <TIMER_ReturnVal>:
//	specific_clock->CNT = RESET;
//}


uint32_t TIMER_ReturnVal() // Return Timer Value
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <TIMER_ReturnVal+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20025b60 	.word	0x20025b60

08002528 <TIMER_Int_Start>:

void TIMER_Int_Start(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0

	timHALStatus = HAL_TIM_Base_Start_IT(&htim2);
 800252c:	4807      	ldr	r0, [pc, #28]	@ (800254c <TIMER_Int_Start+0x24>)
 800252e:	f004 fc59 	bl	8006de4 <HAL_TIM_Base_Start_IT>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <TIMER_Int_Start+0x28>)
 8002538:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <TIMER_Int_Start+0x28>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <TIMER_Int_Start+0x1e>
		{
			for(;;);
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <TIMER_Int_Start+0x1a>
		}
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20025b18 	.word	0x20025b18
 8002550:	20025b16 	.word	0x20025b16

08002554 <TIMER_Int_Stop>:

void TIMER_Int_Stop(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	timHALStatus = HAL_TIM_Base_Stop_IT(&htim2);
 8002558:	4807      	ldr	r0, [pc, #28]	@ (8002578 <TIMER_Int_Stop+0x24>)
 800255a:	f004 fcb3 	bl	8006ec4 <HAL_TIM_Base_Stop_IT>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <TIMER_Int_Stop+0x28>)
 8002564:	701a      	strb	r2, [r3, #0]
	if(timHALStatus != HAL_OK)
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <TIMER_Int_Stop+0x28>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <TIMER_Int_Stop+0x1e>
		{
			for(;;);
 800256e:	bf00      	nop
 8002570:	e7fd      	b.n	800256e <TIMER_Int_Stop+0x1a>
		}
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20025b18 	.word	0x20025b18
 800257c:	20025b16 	.word	0x20025b16

08002580 <TIMER5_Start>:
{
	return __HAL_TIM_GET_AUTORELOAD(&htim2);
}

void TIMER5_Start(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim5);
 8002584:	4802      	ldr	r0, [pc, #8]	@ (8002590 <TIMER5_Start+0x10>)
 8002586:	f004 fb9d 	bl	8006cc4 <HAL_TIM_Base_Start>
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20025b60 	.word	0x20025b60

08002594 <TIMER_Stop>:

void TIMER_Stop(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim5);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <TIMER_Stop+0x10>)
 800259a:	f004 fbfb 	bl	8006d94 <HAL_TIM_Base_Stop>
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20025b60 	.word	0x20025b60

080025a8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80025ac:	f000 f9fe 	bl	80029ac <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80025b0:	20ca      	movs	r0, #202	@ 0xca
 80025b2:	f000 f943 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80025b6:	20c3      	movs	r0, #195	@ 0xc3
 80025b8:	f000 f94d 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80025bc:	2008      	movs	r0, #8
 80025be:	f000 f94a 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80025c2:	2050      	movs	r0, #80	@ 0x50
 80025c4:	f000 f947 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80025c8:	20cf      	movs	r0, #207	@ 0xcf
 80025ca:	f000 f937 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 f941 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80025d4:	20c1      	movs	r0, #193	@ 0xc1
 80025d6:	f000 f93e 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80025da:	2030      	movs	r0, #48	@ 0x30
 80025dc:	f000 f93b 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80025e0:	20ed      	movs	r0, #237	@ 0xed
 80025e2:	f000 f92b 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80025e6:	2064      	movs	r0, #100	@ 0x64
 80025e8:	f000 f935 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f932 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80025f2:	2012      	movs	r0, #18
 80025f4:	f000 f92f 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80025f8:	2081      	movs	r0, #129	@ 0x81
 80025fa:	f000 f92c 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80025fe:	20e8      	movs	r0, #232	@ 0xe8
 8002600:	f000 f91c 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002604:	2085      	movs	r0, #133	@ 0x85
 8002606:	f000 f926 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800260a:	2000      	movs	r0, #0
 800260c:	f000 f923 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002610:	2078      	movs	r0, #120	@ 0x78
 8002612:	f000 f920 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002616:	20cb      	movs	r0, #203	@ 0xcb
 8002618:	f000 f910 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800261c:	2039      	movs	r0, #57	@ 0x39
 800261e:	f000 f91a 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002622:	202c      	movs	r0, #44	@ 0x2c
 8002624:	f000 f917 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002628:	2000      	movs	r0, #0
 800262a:	f000 f914 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800262e:	2034      	movs	r0, #52	@ 0x34
 8002630:	f000 f911 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002634:	2002      	movs	r0, #2
 8002636:	f000 f90e 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800263a:	20f7      	movs	r0, #247	@ 0xf7
 800263c:	f000 f8fe 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002640:	2020      	movs	r0, #32
 8002642:	f000 f908 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002646:	20ea      	movs	r0, #234	@ 0xea
 8002648:	f000 f8f8 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f000 f902 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f8ff 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002658:	20b1      	movs	r0, #177	@ 0xb1
 800265a:	f000 f8ef 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f000 f8f9 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002664:	201b      	movs	r0, #27
 8002666:	f000 f8f6 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800266a:	20b6      	movs	r0, #182	@ 0xb6
 800266c:	f000 f8e6 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002670:	200a      	movs	r0, #10
 8002672:	f000 f8f0 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002676:	20a2      	movs	r0, #162	@ 0xa2
 8002678:	f000 f8ed 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800267c:	20c0      	movs	r0, #192	@ 0xc0
 800267e:	f000 f8dd 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002682:	2010      	movs	r0, #16
 8002684:	f000 f8e7 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002688:	20c1      	movs	r0, #193	@ 0xc1
 800268a:	f000 f8d7 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800268e:	2010      	movs	r0, #16
 8002690:	f000 f8e1 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002694:	20c5      	movs	r0, #197	@ 0xc5
 8002696:	f000 f8d1 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800269a:	2045      	movs	r0, #69	@ 0x45
 800269c:	f000 f8db 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80026a0:	2015      	movs	r0, #21
 80026a2:	f000 f8d8 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80026a6:	20c7      	movs	r0, #199	@ 0xc7
 80026a8:	f000 f8c8 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80026ac:	2090      	movs	r0, #144	@ 0x90
 80026ae:	f000 f8d2 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80026b2:	2036      	movs	r0, #54	@ 0x36
 80026b4:	f000 f8c2 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80026b8:	20c8      	movs	r0, #200	@ 0xc8
 80026ba:	f000 f8cc 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80026be:	20f2      	movs	r0, #242	@ 0xf2
 80026c0:	f000 f8bc 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f000 f8c6 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80026ca:	20b0      	movs	r0, #176	@ 0xb0
 80026cc:	f000 f8b6 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80026d0:	20c2      	movs	r0, #194	@ 0xc2
 80026d2:	f000 f8c0 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80026d6:	20b6      	movs	r0, #182	@ 0xb6
 80026d8:	f000 f8b0 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80026dc:	200a      	movs	r0, #10
 80026de:	f000 f8ba 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80026e2:	20a7      	movs	r0, #167	@ 0xa7
 80026e4:	f000 f8b7 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80026e8:	2027      	movs	r0, #39	@ 0x27
 80026ea:	f000 f8b4 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80026ee:	2004      	movs	r0, #4
 80026f0:	f000 f8b1 	bl	8002856 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80026f4:	202a      	movs	r0, #42	@ 0x2a
 80026f6:	f000 f8a1 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f8ab 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f000 f8a8 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f000 f8a5 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800270c:	20ef      	movs	r0, #239	@ 0xef
 800270e:	f000 f8a2 	bl	8002856 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002712:	202b      	movs	r0, #43	@ 0x2b
 8002714:	f000 f892 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f000 f89c 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f000 f899 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002724:	2001      	movs	r0, #1
 8002726:	f000 f896 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800272a:	203f      	movs	r0, #63	@ 0x3f
 800272c:	f000 f893 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002730:	20f6      	movs	r0, #246	@ 0xf6
 8002732:	f000 f883 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002736:	2001      	movs	r0, #1
 8002738:	f000 f88d 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f000 f88a 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002742:	2006      	movs	r0, #6
 8002744:	f000 f887 	bl	8002856 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002748:	202c      	movs	r0, #44	@ 0x2c
 800274a:	f000 f877 	bl	800283c <ili9341_Write_Reg>
  LCD_Delay(200);
 800274e:	20c8      	movs	r0, #200	@ 0xc8
 8002750:	f000 f9e8 	bl	8002b24 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002754:	2026      	movs	r0, #38	@ 0x26
 8002756:	f000 f871 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800275a:	2001      	movs	r0, #1
 800275c:	f000 f87b 	bl	8002856 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002760:	20e0      	movs	r0, #224	@ 0xe0
 8002762:	f000 f86b 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002766:	200f      	movs	r0, #15
 8002768:	f000 f875 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800276c:	2029      	movs	r0, #41	@ 0x29
 800276e:	f000 f872 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002772:	2024      	movs	r0, #36	@ 0x24
 8002774:	f000 f86f 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002778:	200c      	movs	r0, #12
 800277a:	f000 f86c 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800277e:	200e      	movs	r0, #14
 8002780:	f000 f869 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002784:	2009      	movs	r0, #9
 8002786:	f000 f866 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800278a:	204e      	movs	r0, #78	@ 0x4e
 800278c:	f000 f863 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002790:	2078      	movs	r0, #120	@ 0x78
 8002792:	f000 f860 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002796:	203c      	movs	r0, #60	@ 0x3c
 8002798:	f000 f85d 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800279c:	2009      	movs	r0, #9
 800279e:	f000 f85a 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80027a2:	2013      	movs	r0, #19
 80027a4:	f000 f857 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80027a8:	2005      	movs	r0, #5
 80027aa:	f000 f854 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80027ae:	2017      	movs	r0, #23
 80027b0:	f000 f851 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80027b4:	2011      	movs	r0, #17
 80027b6:	f000 f84e 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f000 f84b 	bl	8002856 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80027c0:	20e1      	movs	r0, #225	@ 0xe1
 80027c2:	f000 f83b 	bl	800283c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 f845 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80027cc:	2016      	movs	r0, #22
 80027ce:	f000 f842 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80027d2:	201b      	movs	r0, #27
 80027d4:	f000 f83f 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80027d8:	2004      	movs	r0, #4
 80027da:	f000 f83c 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80027de:	2011      	movs	r0, #17
 80027e0:	f000 f839 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80027e4:	2007      	movs	r0, #7
 80027e6:	f000 f836 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80027ea:	2031      	movs	r0, #49	@ 0x31
 80027ec:	f000 f833 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80027f0:	2033      	movs	r0, #51	@ 0x33
 80027f2:	f000 f830 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80027f6:	2042      	movs	r0, #66	@ 0x42
 80027f8:	f000 f82d 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80027fc:	2005      	movs	r0, #5
 80027fe:	f000 f82a 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002802:	200c      	movs	r0, #12
 8002804:	f000 f827 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002808:	200a      	movs	r0, #10
 800280a:	f000 f824 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800280e:	2028      	movs	r0, #40	@ 0x28
 8002810:	f000 f821 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002814:	202f      	movs	r0, #47	@ 0x2f
 8002816:	f000 f81e 	bl	8002856 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800281a:	200f      	movs	r0, #15
 800281c:	f000 f81b 	bl	8002856 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002820:	2011      	movs	r0, #17
 8002822:	f000 f80b 	bl	800283c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002826:	20c8      	movs	r0, #200	@ 0xc8
 8002828:	f000 f97c 	bl	8002b24 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800282c:	2029      	movs	r0, #41	@ 0x29
 800282e:	f000 f805 	bl	800283c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002832:	202c      	movs	r0, #44	@ 0x2c
 8002834:	f000 f802 	bl	800283c <ili9341_Write_Reg>
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f949 	bl	8002ae0 <LCD_IO_WriteReg>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f91a 	bl	8002a9c <LCD_IO_WriteData>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002874:	4819      	ldr	r0, [pc, #100]	@ (80028dc <SPI_Init+0x6c>)
 8002876:	f004 f8ea 	bl	8006a4e <HAL_SPI_GetState>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d12b      	bne.n	80028d8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002880:	4b16      	ldr	r3, [pc, #88]	@ (80028dc <SPI_Init+0x6c>)
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <SPI_Init+0x70>)
 8002884:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002886:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <SPI_Init+0x6c>)
 8002888:	2218      	movs	r2, #24
 800288a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800288c:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <SPI_Init+0x6c>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002892:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <SPI_Init+0x6c>)
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002898:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <SPI_Init+0x6c>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800289e:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <SPI_Init+0x6c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80028a4:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <SPI_Init+0x6c>)
 80028a6:	2207      	movs	r2, #7
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <SPI_Init+0x6c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <SPI_Init+0x6c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <SPI_Init+0x6c>)
 80028b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028bc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80028be:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <SPI_Init+0x6c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <SPI_Init+0x6c>)
 80028c6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028ca:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80028cc:	4803      	ldr	r0, [pc, #12]	@ (80028dc <SPI_Init+0x6c>)
 80028ce:	f000 f833 	bl	8002938 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80028d2:	4802      	ldr	r0, [pc, #8]	@ (80028dc <SPI_Init+0x6c>)
 80028d4:	f003 fec6 	bl	8006664 <HAL_SPI_Init>
  }
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20025ba8 	.word	0x20025ba8
 80028e0:	40015000 	.word	0x40015000

080028e4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <SPI_Write+0x34>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1db9      	adds	r1, r7, #6
 80028f8:	2201      	movs	r2, #1
 80028fa:	4808      	ldr	r0, [pc, #32]	@ (800291c <SPI_Write+0x38>)
 80028fc:	f003 ff63 	bl	80067c6 <HAL_SPI_Transmit>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800290a:	f000 f809 	bl	8002920 <SPI_Error>
  }
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000144 	.word	0x20000144
 800291c:	20025ba8 	.word	0x20025ba8

08002920 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002924:	4803      	ldr	r0, [pc, #12]	@ (8002934 <SPI_Error+0x14>)
 8002926:	f003 ff26 	bl	8006776 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800292a:	f7ff ffa1 	bl	8002870 <SPI_Init>
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20025ba8 	.word	0x20025ba8

08002938 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <SPI_MspInit+0x6c>)
 8002946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002948:	4a16      	ldr	r2, [pc, #88]	@ (80029a4 <SPI_MspInit+0x6c>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002950:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <SPI_MspInit+0x6c>)
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <SPI_MspInit+0x6c>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <SPI_MspInit+0x6c>)
 8002966:	f043 0320 	orr.w	r3, r3, #32
 800296a:	6313      	str	r3, [r2, #48]	@ 0x30
 800296c:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <SPI_MspInit+0x6c>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002978:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002982:	2302      	movs	r3, #2
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002986:	2301      	movs	r3, #1
 8002988:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800298a:	2305      	movs	r3, #5
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4804      	ldr	r0, [pc, #16]	@ (80029a8 <SPI_MspInit+0x70>)
 8002996:	f001 fa05 	bl	8003da4 <HAL_GPIO_Init>
}
 800299a:	bf00      	nop
 800299c:	3728      	adds	r7, #40	@ 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40021400 	.word	0x40021400

080029ac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80029b2:	4b36      	ldr	r3, [pc, #216]	@ (8002a8c <LCD_IO_Init+0xe0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d164      	bne.n	8002a84 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80029ba:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <LCD_IO_Init+0xe0>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	4b32      	ldr	r3, [pc, #200]	@ (8002a90 <LCD_IO_Init+0xe4>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	4a31      	ldr	r2, [pc, #196]	@ (8002a90 <LCD_IO_Init+0xe4>)
 80029ca:	f043 0308 	orr.w	r3, r3, #8
 80029ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a90 <LCD_IO_Init+0xe4>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80029dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029ea:	2302      	movs	r3, #2
 80029ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80029ee:	f107 030c 	add.w	r3, r7, #12
 80029f2:	4619      	mov	r1, r3
 80029f4:	4827      	ldr	r0, [pc, #156]	@ (8002a94 <LCD_IO_Init+0xe8>)
 80029f6:	f001 f9d5 	bl	8003da4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <LCD_IO_Init+0xe4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a23      	ldr	r2, [pc, #140]	@ (8002a90 <LCD_IO_Init+0xe4>)
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b21      	ldr	r3, [pc, #132]	@ (8002a90 <LCD_IO_Init+0xe4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002a24:	2302      	movs	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4819      	ldr	r0, [pc, #100]	@ (8002a94 <LCD_IO_Init+0xe8>)
 8002a30:	f001 f9b8 	bl	8003da4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <LCD_IO_Init+0xe4>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4a14      	ldr	r2, [pc, #80]	@ (8002a90 <LCD_IO_Init+0xe4>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <LCD_IO_Init+0xe4>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002a50:	2304      	movs	r3, #4
 8002a52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	4619      	mov	r1, r3
 8002a66:	480c      	ldr	r0, [pc, #48]	@ (8002a98 <LCD_IO_Init+0xec>)
 8002a68:	f001 f99c 	bl	8003da4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2104      	movs	r1, #4
 8002a70:	4809      	ldr	r0, [pc, #36]	@ (8002a98 <LCD_IO_Init+0xec>)
 8002a72:	f001 fc4f 	bl	8004314 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002a76:	2201      	movs	r2, #1
 8002a78:	2104      	movs	r1, #4
 8002a7a:	4807      	ldr	r0, [pc, #28]	@ (8002a98 <LCD_IO_Init+0xec>)
 8002a7c:	f001 fc4a 	bl	8004314 <HAL_GPIO_WritePin>

    SPI_Init();
 8002a80:	f7ff fef6 	bl	8002870 <SPI_Init>
  }
}
 8002a84:	bf00      	nop
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20025c00 	.word	0x20025c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40020800 	.word	0x40020800

08002a9c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002aac:	480a      	ldr	r0, [pc, #40]	@ (8002ad8 <LCD_IO_WriteData+0x3c>)
 8002aae:	f001 fc31 	bl	8004314 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4809      	ldr	r0, [pc, #36]	@ (8002adc <LCD_IO_WriteData+0x40>)
 8002ab8:	f001 fc2c 	bl	8004314 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff10 	bl	80028e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	4804      	ldr	r0, [pc, #16]	@ (8002adc <LCD_IO_WriteData+0x40>)
 8002aca:	f001 fc23 	bl	8004314 <HAL_GPIO_WritePin>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40020800 	.word	0x40020800

08002ae0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002aea:	2200      	movs	r2, #0
 8002aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002af0:	480a      	ldr	r0, [pc, #40]	@ (8002b1c <LCD_IO_WriteReg+0x3c>)
 8002af2:	f001 fc0f 	bl	8004314 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002af6:	2200      	movs	r2, #0
 8002af8:	2104      	movs	r1, #4
 8002afa:	4809      	ldr	r0, [pc, #36]	@ (8002b20 <LCD_IO_WriteReg+0x40>)
 8002afc:	f001 fc0a 	bl	8004314 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff feed 	bl	80028e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	4804      	ldr	r0, [pc, #16]	@ (8002b20 <LCD_IO_WriteReg+0x40>)
 8002b10:	f001 fc00 	bl	8004314 <HAL_GPIO_WritePin>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40020800 	.word	0x40020800

08002b24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 ff8d 	bl	8003a4c <HAL_Delay>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 8002b40:	f004 fcb4 	bl	80074ac <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b44:	f000 ff10 	bl	8003968 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  SystemClockOverride();
 8002b48:	f000 f84a 	bl	8002be0 <SystemClockOverride>

  ApplicationInit();
 8002b4c:	f7fd fd20 	bl	8000590 <ApplicationInit>
  // Orientation of the board: Top left is the x and y axis ORIGIN

  while (1)
	{
	  //ApplicationGame();
	  if (getScheduledEvents() == START)
 8002b50:	f7fe fd02 	bl	8001558 <getScheduledEvents>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d112      	bne.n	8002b80 <main+0x44>
	   {
		   removeSchedulerEvent(START);
 8002b5a:	2010      	movs	r0, #16
 8002b5c:	f7fe fce8 	bl	8001530 <removeSchedulerEvent>
		   LCD_Clear(0,LCD_COLOR_BLACK);
 8002b60:	2100      	movs	r1, #0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe f886 	bl	8000c74 <LCD_Clear>
		   LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b68:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b6c:	f7fe f8a4 	bl	8000cb8 <LCD_SetTextColor>
		   LCD_SetFont(&Font12x12);
 8002b70:	481a      	ldr	r0, [pc, #104]	@ (8002bdc <main+0xa0>)
 8002b72:	f7fe f8b1 	bl	8000cd8 <LCD_SetFont>
		   TIMER5_Start();
 8002b76:	f7ff fd03 	bl	8002580 <TIMER5_Start>
		   Start_Tetris();
 8002b7a:	f7fe fcf9 	bl	8001570 <Start_Tetris>
 8002b7e:	e7e7      	b.n	8002b50 <main+0x14>

	   }
	  else if(getScheduledEvents() == COUNT)
 8002b80:	f7fe fcea 	bl	8001558 <getScheduledEvents>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d107      	bne.n	8002b9a <main+0x5e>
	  {
		  removeSchedulerEvent(COUNT);
 8002b8a:	2008      	movs	r0, #8
 8002b8c:	f7fe fcd0 	bl	8001530 <removeSchedulerEvent>
		  Move_Down();
 8002b90:	f7fe ffa4 	bl	8001adc <Move_Down>
		  Check_Endgame();
 8002b94:	f7fe ffd0 	bl	8001b38 <Check_Endgame>
 8002b98:	e7da      	b.n	8002b50 <main+0x14>
	  }
	  else if(getScheduledEvents() == ROTATE_CC)
 8002b9a:	f7fe fcdd 	bl	8001558 <getScheduledEvents>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d105      	bne.n	8002bb0 <main+0x74>
	  {
		  removeSchedulerEvent(ROTATE_CC);
 8002ba4:	2004      	movs	r0, #4
 8002ba6:	f7fe fcc3 	bl	8001530 <removeSchedulerEvent>
		  Rotate_CC();
 8002baa:	f7fe fe03 	bl	80017b4 <Rotate_CC>
 8002bae:	e7cf      	b.n	8002b50 <main+0x14>
	  }
	  else if(getScheduledEvents() == SHIFT_L)
 8002bb0:	f7fe fcd2 	bl	8001558 <getScheduledEvents>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d105      	bne.n	8002bc6 <main+0x8a>
	  {
		  removeSchedulerEvent(SHIFT_L);
 8002bba:	2002      	movs	r0, #2
 8002bbc:	f7fe fcb8 	bl	8001530 <removeSchedulerEvent>
		  Move_Left();
 8002bc0:	f7ff fc0c 	bl	80023dc <Move_Left>
 8002bc4:	e7c4      	b.n	8002b50 <main+0x14>
		  //Check_Endgame();

	  }
	  else if(getScheduledEvents() == SHIFT_R)
 8002bc6:	f7fe fcc7 	bl	8001558 <getScheduledEvents>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d1bf      	bne.n	8002b50 <main+0x14>
	  {
		  removeSchedulerEvent(SHIFT_R);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7fe fcad 	bl	8001530 <removeSchedulerEvent>
		  Move_Right();
 8002bd6:	f7ff fbdd 	bl	8002394 <Move_Right>
	  if (getScheduledEvents() == START)
 8002bda:	e7b9      	b.n	8002b50 <main+0x14>
 8002bdc:	2000013c 	.word	0x2000013c

08002be0 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b092      	sub	sp, #72	@ 0x48
 8002be4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4b1c      	ldr	r3, [pc, #112]	@ (8002c5c <SystemClockOverride+0x7c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a1b      	ldr	r2, [pc, #108]	@ (8002c5c <SystemClockOverride+0x7c>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf6:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <SystemClockOverride+0x7c>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c0a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c16:	2308      	movs	r3, #8
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c1a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c20:	2302      	movs	r3, #2
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c24:	2307      	movs	r3, #7
 8002c26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f002 fe56 	bl	80058dc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002c30:	230f      	movs	r3, #15
 8002c32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c34:	2302      	movs	r3, #2
 8002c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c46:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002c48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 f8bc 	bl	8005dcc <HAL_RCC_ClockConfig>
}
 8002c54:	bf00      	nop
 8002c56:	3748      	adds	r7, #72	@ 0x48
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */



  __disable_irq();
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <Error_Handler+0x8>

08002c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_MspInit+0x4c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb8 <HAL_MspInit+0x4c>)
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c82:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <HAL_MspInit+0x4c>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <HAL_MspInit+0x4c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	4a08      	ldr	r2, [pc, #32]	@ (8002cb8 <HAL_MspInit+0x4c>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_MspInit+0x4c>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002caa:	2007      	movs	r0, #7
 8002cac:	f001 f804 	bl	8003cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	@ 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a29      	ldr	r2, [pc, #164]	@ (8002d80 <HAL_I2C_MspInit+0xc4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d14b      	bne.n	8002d76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b28      	ldr	r3, [pc, #160]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	4a27      	ldr	r2, [pc, #156]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cee:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b21      	ldr	r3, [pc, #132]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	4a20      	ldr	r2, [pc, #128]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	4815      	ldr	r0, [pc, #84]	@ (8002d88 <HAL_I2C_MspInit+0xcc>)
 8002d34:	f001 f836 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3e:	2312      	movs	r3, #18
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	480d      	ldr	r0, [pc, #52]	@ (8002d8c <HAL_I2C_MspInit+0xd0>)
 8002d56:	f001 f825 	bl	8003da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	4a08      	ldr	r2, [pc, #32]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002d64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_I2C_MspInit+0xc8>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	@ 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40005c00 	.word	0x40005c00
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020000 	.word	0x40020000

08002d90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b09a      	sub	sp, #104	@ 0x68
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dac:	2230      	movs	r2, #48	@ 0x30
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 fd29 	bl	8007808 <memset>
  if(hltdc->Instance==LTDC)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a81      	ldr	r2, [pc, #516]	@ (8002fc0 <HAL_LTDC_MspInit+0x230>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	f040 80fa 	bne.w	8002fb6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002dc6:	2332      	movs	r3, #50	@ 0x32
 8002dc8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 fa04 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002de2:	f7ff ff3d 	bl	8002c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	4b76      	ldr	r3, [pc, #472]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4a75      	ldr	r2, [pc, #468]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002df0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df6:	4b73      	ldr	r3, [pc, #460]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e0c:	f043 0320 	orr.w	r3, r3, #32
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	4b68      	ldr	r3, [pc, #416]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a67      	ldr	r2, [pc, #412]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b65      	ldr	r3, [pc, #404]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	4b61      	ldr	r3, [pc, #388]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	4a60      	ldr	r2, [pc, #384]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4a59      	ldr	r2, [pc, #356]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e66:	4b57      	ldr	r3, [pc, #348]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b53      	ldr	r3, [pc, #332]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a52      	ldr	r2, [pc, #328]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b50      	ldr	r3, [pc, #320]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002e98:	f043 0308 	orr.w	r3, r3, #8
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b49      	ldr	r3, [pc, #292]	@ (8002fc4 <HAL_LTDC_MspInit+0x234>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ebc:	230e      	movs	r3, #14
 8002ebe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002ec0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4840      	ldr	r0, [pc, #256]	@ (8002fc8 <HAL_LTDC_MspInit+0x238>)
 8002ec8:	f000 ff6c 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002ecc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002ed0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ede:	230e      	movs	r3, #14
 8002ee0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4838      	ldr	r0, [pc, #224]	@ (8002fcc <HAL_LTDC_MspInit+0x23c>)
 8002eea:	f000 ff5b 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002efe:	2309      	movs	r3, #9
 8002f00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f06:	4619      	mov	r1, r3
 8002f08:	4831      	ldr	r0, [pc, #196]	@ (8002fd0 <HAL_LTDC_MspInit+0x240>)
 8002f0a:	f000 ff4b 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002f0e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002f12:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f20:	230e      	movs	r3, #14
 8002f22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4829      	ldr	r0, [pc, #164]	@ (8002fd0 <HAL_LTDC_MspInit+0x240>)
 8002f2c:	f000 ff3a 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002f30:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002f34:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f42:	230e      	movs	r3, #14
 8002f44:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4821      	ldr	r0, [pc, #132]	@ (8002fd4 <HAL_LTDC_MspInit+0x244>)
 8002f4e:	f000 ff29 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002f52:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002f56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f64:	230e      	movs	r3, #14
 8002f66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	481a      	ldr	r0, [pc, #104]	@ (8002fd8 <HAL_LTDC_MspInit+0x248>)
 8002f70:	f000 ff18 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002f74:	2348      	movs	r3, #72	@ 0x48
 8002f76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f84:	230e      	movs	r3, #14
 8002f86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4813      	ldr	r0, [pc, #76]	@ (8002fdc <HAL_LTDC_MspInit+0x24c>)
 8002f90:	f000 ff08 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002f94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fa6:	2309      	movs	r3, #9
 8002fa8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002faa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4808      	ldr	r0, [pc, #32]	@ (8002fd4 <HAL_LTDC_MspInit+0x244>)
 8002fb2:	f000 fef7 	bl	8003da4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002fb6:	bf00      	nop
 8002fb8:	3768      	adds	r7, #104	@ 0x68
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40016800 	.word	0x40016800
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40021400 	.word	0x40021400
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00

08002fe0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <HAL_RNG_MspInit+0x3c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10d      	bne.n	800300e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_RNG_MspInit+0x40>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <HAL_RNG_MspInit+0x40>)
 8002ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003000:	6353      	str	r3, [r2, #52]	@ 0x34
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <HAL_RNG_MspInit+0x40>)
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	50060800 	.word	0x50060800
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <HAL_SPI_MspInit+0x84>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d12c      	bne.n	80030a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <HAL_SPI_MspInit+0x88>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	4a17      	ldr	r2, [pc, #92]	@ (80030ac <HAL_SPI_MspInit+0x88>)
 8003050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003054:	6453      	str	r3, [r2, #68]	@ 0x44
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <HAL_SPI_MspInit+0x88>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <HAL_SPI_MspInit+0x88>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_SPI_MspInit+0x88>)
 800306c:	f043 0320 	orr.w	r3, r3, #32
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <HAL_SPI_MspInit+0x88>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800307e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003090:	2305      	movs	r3, #5
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4619      	mov	r1, r3
 800309a:	4805      	ldr	r0, [pc, #20]	@ (80030b0 <HAL_SPI_MspInit+0x8c>)
 800309c:	f000 fe82 	bl	8003da4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80030a0:	bf00      	nop
 80030a2:	3728      	adds	r7, #40	@ 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40015000 	.word	0x40015000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40021400 	.word	0x40021400

080030b4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a08      	ldr	r2, [pc, #32]	@ (80030e4 <HAL_SPI_MspDeInit+0x30>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10a      	bne.n	80030dc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80030c6:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <HAL_SPI_MspDeInit+0x34>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	4a07      	ldr	r2, [pc, #28]	@ (80030e8 <HAL_SPI_MspDeInit+0x34>)
 80030cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030d0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80030d2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80030d6:	4805      	ldr	r0, [pc, #20]	@ (80030ec <HAL_SPI_MspDeInit+0x38>)
 80030d8:	f001 f810 	bl	80040fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40015000 	.word	0x40015000
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40021400 	.word	0x40021400

080030f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0b      	ldr	r2, [pc, #44]	@ (800312c <HAL_TIM_Base_MspInit+0x3c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <HAL_TIM_Base_MspInit+0x40>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_TIM_Base_MspInit+0x40>)
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	6413      	str	r3, [r2, #64]	@ 0x40
 8003112:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <HAL_TIM_Base_MspInit+0x40>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40023800 	.word	0x40023800

08003134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <NMI_Handler+0x4>

0800313c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <HardFault_Handler+0x4>

08003144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <MemManage_Handler+0x4>

0800314c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <BusFault_Handler+0x4>

08003154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003158:	bf00      	nop
 800315a:	e7fd      	b.n	8003158 <UsageFault_Handler+0x4>

0800315c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800318a:	f000 fc3f 	bl	8003a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	@ (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80031d6:	f000 f9df 	bl	8003598 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80031da:	f000 f99f 	bl	800351c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80031de:	2202      	movs	r2, #2
 80031e0:	2103      	movs	r1, #3
 80031e2:	2082      	movs	r0, #130	@ 0x82
 80031e4:	f000 fa2c 	bl	8003640 <I2C3_Write>
    HAL_Delay(5);
 80031e8:	2005      	movs	r0, #5
 80031ea:	f000 fc2f 	bl	8003a4c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2103      	movs	r1, #3
 80031f2:	2082      	movs	r0, #130	@ 0x82
 80031f4:	f000 fa24 	bl	8003640 <I2C3_Write>
    HAL_Delay(2);
 80031f8:	2002      	movs	r0, #2
 80031fa:	f000 fc27 	bl	8003a4c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80031fe:	1cba      	adds	r2, r7, #2
 8003200:	2302      	movs	r3, #2
 8003202:	2100      	movs	r1, #0
 8003204:	2082      	movs	r0, #130	@ 0x82
 8003206:	f000 fa6b 	bl	80036e0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	b29a      	uxth	r2, r3
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4313      	orrs	r3, r2
 800321a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	f640 0211 	movw	r2, #2065	@ 0x811
 8003222:	4293      	cmp	r3, r2
 8003224:	d001      	beq.n	800322a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003226:	2303      	movs	r3, #3
 8003228:	e095      	b.n	8003356 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800322a:	2202      	movs	r2, #2
 800322c:	2103      	movs	r1, #3
 800322e:	2082      	movs	r0, #130	@ 0x82
 8003230:	f000 fa06 	bl	8003640 <I2C3_Write>
    HAL_Delay(5);
 8003234:	2005      	movs	r0, #5
 8003236:	f000 fc09 	bl	8003a4c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800323a:	2200      	movs	r2, #0
 800323c:	2103      	movs	r1, #3
 800323e:	2082      	movs	r0, #130	@ 0x82
 8003240:	f000 f9fe 	bl	8003640 <I2C3_Write>
    HAL_Delay(2);
 8003244:	2002      	movs	r0, #2
 8003246:	f000 fc01 	bl	8003a4c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800324a:	2004      	movs	r0, #4
 800324c:	f000 f887 	bl	800335e <STMPE811_Read>
 8003250:	4603      	mov	r3, r0
 8003252:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003254:	797b      	ldrb	r3, [r7, #5]
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800325c:	797b      	ldrb	r3, [r7, #5]
 800325e:	461a      	mov	r2, r3
 8003260:	2104      	movs	r1, #4
 8003262:	2082      	movs	r0, #130	@ 0x82
 8003264:	f000 f9ec 	bl	8003640 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003268:	2004      	movs	r0, #4
 800326a:	f000 f878 	bl	800335e <STMPE811_Read>
 800326e:	4603      	mov	r3, r0
 8003270:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003272:	797b      	ldrb	r3, [r7, #5]
 8003274:	f023 0302 	bic.w	r3, r3, #2
 8003278:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800327a:	797b      	ldrb	r3, [r7, #5]
 800327c:	461a      	mov	r2, r3
 800327e:	2104      	movs	r1, #4
 8003280:	2082      	movs	r0, #130	@ 0x82
 8003282:	f000 f9dd 	bl	8003640 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003286:	2249      	movs	r2, #73	@ 0x49
 8003288:	2120      	movs	r1, #32
 800328a:	2082      	movs	r0, #130	@ 0x82
 800328c:	f000 f9d8 	bl	8003640 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003290:	2002      	movs	r0, #2
 8003292:	f000 fbdb 	bl	8003a4c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003296:	2201      	movs	r2, #1
 8003298:	2121      	movs	r1, #33	@ 0x21
 800329a:	2082      	movs	r0, #130	@ 0x82
 800329c:	f000 f9d0 	bl	8003640 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80032a0:	2017      	movs	r0, #23
 80032a2:	f000 f85c 	bl	800335e <STMPE811_Read>
 80032a6:	4603      	mov	r3, r0
 80032a8:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80032aa:	797b      	ldrb	r3, [r7, #5]
 80032ac:	f043 031e 	orr.w	r3, r3, #30
 80032b0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80032b2:	797b      	ldrb	r3, [r7, #5]
 80032b4:	461a      	mov	r2, r3
 80032b6:	2117      	movs	r1, #23
 80032b8:	2082      	movs	r0, #130	@ 0x82
 80032ba:	f000 f9c1 	bl	8003640 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80032be:	229a      	movs	r2, #154	@ 0x9a
 80032c0:	2141      	movs	r1, #65	@ 0x41
 80032c2:	2082      	movs	r0, #130	@ 0x82
 80032c4:	f000 f9bc 	bl	8003640 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80032c8:	2201      	movs	r2, #1
 80032ca:	214a      	movs	r1, #74	@ 0x4a
 80032cc:	2082      	movs	r0, #130	@ 0x82
 80032ce:	f000 f9b7 	bl	8003640 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80032d2:	2201      	movs	r2, #1
 80032d4:	214b      	movs	r1, #75	@ 0x4b
 80032d6:	2082      	movs	r0, #130	@ 0x82
 80032d8:	f000 f9b2 	bl	8003640 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80032dc:	2200      	movs	r2, #0
 80032de:	214b      	movs	r1, #75	@ 0x4b
 80032e0:	2082      	movs	r0, #130	@ 0x82
 80032e2:	f000 f9ad 	bl	8003640 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80032e6:	2201      	movs	r2, #1
 80032e8:	2156      	movs	r1, #86	@ 0x56
 80032ea:	2082      	movs	r0, #130	@ 0x82
 80032ec:	f000 f9a8 	bl	8003640 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80032f0:	2201      	movs	r2, #1
 80032f2:	2158      	movs	r1, #88	@ 0x58
 80032f4:	2082      	movs	r0, #130	@ 0x82
 80032f6:	f000 f9a3 	bl	8003640 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80032fa:	2203      	movs	r2, #3
 80032fc:	2140      	movs	r1, #64	@ 0x40
 80032fe:	2082      	movs	r0, #130	@ 0x82
 8003300:	f000 f99e 	bl	8003640 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003304:	22ff      	movs	r2, #255	@ 0xff
 8003306:	210b      	movs	r1, #11
 8003308:	2082      	movs	r0, #130	@ 0x82
 800330a:	f000 f999 	bl	8003640 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800330e:	f000 f8c3 	bl	8003498 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003312:	2009      	movs	r0, #9
 8003314:	f000 f823 	bl	800335e <STMPE811_Read>
 8003318:	4603      	mov	r3, r0
 800331a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800331c:	797b      	ldrb	r3, [r7, #5]
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003324:	797b      	ldrb	r3, [r7, #5]
 8003326:	461a      	mov	r2, r3
 8003328:	2109      	movs	r1, #9
 800332a:	2082      	movs	r0, #130	@ 0x82
 800332c:	f000 f988 	bl	8003640 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003330:	200a      	movs	r0, #10
 8003332:	f000 f814 	bl	800335e <STMPE811_Read>
 8003336:	4603      	mov	r3, r0
 8003338:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800333a:	797b      	ldrb	r3, [r7, #5]
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003342:	797b      	ldrb	r3, [r7, #5]
 8003344:	461a      	mov	r2, r3
 8003346:	210a      	movs	r1, #10
 8003348:	2082      	movs	r0, #130	@ 0x82
 800334a:	f000 f979 	bl	8003640 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800334e:	20c8      	movs	r0, #200	@ 0xc8
 8003350:	f000 fb7c 	bl	8003a4c <HAL_Delay>

    return STMPE811_State_Ok;
 8003354:	2302      	movs	r3, #2

}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003368:	f107 020f 	add.w	r2, r7, #15
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	4619      	mov	r1, r3
 8003370:	2082      	movs	r0, #130	@ 0x82
 8003372:	f000 f98f 	bl	8003694 <I2C3_Read>

    return readData;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	460a      	mov	r2, r1
 800338a:	71fb      	strb	r3, [r7, #7]
 800338c:	4613      	mov	r3, r2
 800338e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003390:	79ba      	ldrb	r2, [r7, #6]
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4619      	mov	r1, r3
 8003396:	2082      	movs	r0, #130	@ 0x82
 8003398:	f000 f952 	bl	8003640 <I2C3_Write>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	799b      	ldrb	r3, [r3, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d117      	bne.n	80033e4 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f9b3 	bl	8003724 <TM_STMPE811_ReadX>
 80033be:	4603      	mov	r3, r0
 80033c0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	885b      	ldrh	r3, [r3, #2]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fa06 	bl	80037e0 <TM_STMPE811_ReadY>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80033da:	3301      	adds	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	805a      	strh	r2, [r3, #2]
 80033e2:	e04b      	b.n	800347c <STMPE811_DetermineTouchPosition+0xd8>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	799b      	ldrb	r3, [r3, #6]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d115      	bne.n	8003418 <STMPE811_DetermineTouchPosition+0x74>
        data->x = TM_STMPE811_ReadX(data->x);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f997 	bl	8003724 <TM_STMPE811_ReadX>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	885b      	ldrh	r3, [r3, #2]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f9ec 	bl	80037e0 <TM_STMPE811_ReadY>
 8003408:	4603      	mov	r3, r0
 800340a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800340e:	3301      	adds	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	805a      	strh	r2, [r3, #2]
 8003416:	e031      	b.n	800347c <STMPE811_DetermineTouchPosition+0xd8>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	799b      	ldrb	r3, [r3, #6]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d115      	bne.n	800344c <STMPE811_DetermineTouchPosition+0xa8>
        data->y = TM_STMPE811_ReadX(data->y);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	885b      	ldrh	r3, [r3, #2]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f97d 	bl	8003724 <TM_STMPE811_ReadX>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f9d2 	bl	80037e0 <TM_STMPE811_ReadY>
 800343c:	4603      	mov	r3, r0
 800343e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003442:	3301      	adds	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	e017      	b.n	800347c <STMPE811_DetermineTouchPosition+0xd8>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	799b      	ldrb	r3, [r3, #6]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d113      	bne.n	800347c <STMPE811_DetermineTouchPosition+0xd8>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f963 	bl	8003724 <TM_STMPE811_ReadX>
 800345e:	4603      	mov	r3, r0
 8003460:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003464:	b29a      	uxth	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f9b6 	bl	80037e0 <TM_STMPE811_ReadY>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800347c:	2201      	movs	r2, #1
 800347e:	214b      	movs	r1, #75	@ 0x4b
 8003480:	2082      	movs	r0, #130	@ 0x82
 8003482:	f000 f8dd 	bl	8003640 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003486:	2200      	movs	r2, #0
 8003488:	214b      	movs	r1, #75	@ 0x4b
 800348a:	2082      	movs	r0, #130	@ 0x82
 800348c:	f000 f8d8 	bl	8003640 <I2C3_Write>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <enableInterruptSupportForTouch+0x5c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	4a13      	ldr	r2, [pc, #76]	@ (80034f4 <enableInterruptSupportForTouch+0x5c>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <enableInterruptSupportForTouch+0x5c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034cc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80034d2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034d8:	2302      	movs	r3, #2
 80034da:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4805      	ldr	r0, [pc, #20]	@ (80034f8 <enableInterruptSupportForTouch+0x60>)
 80034e2:	f000 fc5f 	bl	8003da4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034e6:	2028      	movs	r0, #40	@ 0x28
 80034e8:	f7ff fe54 	bl	8003194 <__NVIC_EnableIRQ>

}
 80034ec:	bf00      	nop
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020000 	.word	0x40020000

080034fc <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20025c58 	.word	0x20025c58

0800351c <I2C3_Init>:

static void I2C3_Init()
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4b18      	ldr	r3, [pc, #96]	@ (8003588 <I2C3_Init+0x6c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <I2C3_Init+0x6c>)
 800352c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003530:	6413      	str	r3, [r2, #64]	@ 0x40
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <I2C3_Init+0x6c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <I2C3_Init+0x70>)
 8003540:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <I2C3_Init+0x74>)
 8003542:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <I2C3_Init+0x70>)
 8003546:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <I2C3_Init+0x78>)
 8003548:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <I2C3_Init+0x70>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003550:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <I2C3_Init+0x70>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <I2C3_Init+0x70>)
 8003558:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800355c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <I2C3_Init+0x70>)
 8003560:	2200      	movs	r2, #0
 8003562:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <I2C3_Init+0x70>)
 8003566:	2200      	movs	r2, #0
 8003568:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800356a:	4808      	ldr	r0, [pc, #32]	@ (800358c <I2C3_Init+0x70>)
 800356c:	f000 feec 	bl	8004348 <HAL_I2C_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800357a:	bf00      	nop
 800357c:	e7fd      	b.n	800357a <I2C3_Init+0x5e>
    }
    return;
 800357e:	bf00      	nop
}
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	20025c04 	.word	0x20025c04
 8003590:	40005c00 	.word	0x40005c00
 8003594:	000186a0 	.word	0x000186a0

08003598 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b20      	ldr	r3, [pc, #128]	@ (8003634 <I2C3_MspInit+0x9c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <I2C3_MspInit+0x9c>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035be:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <I2C3_MspInit+0x9c>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <I2C3_MspInit+0x9c>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a18      	ldr	r2, [pc, #96]	@ (8003634 <I2C3_MspInit+0x9c>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <I2C3_MspInit+0x9c>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80035e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ec:	2312      	movs	r3, #18
 80035ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035f8:	2304      	movs	r3, #4
 80035fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	4619      	mov	r1, r3
 8003602:	480d      	ldr	r0, [pc, #52]	@ (8003638 <I2C3_MspInit+0xa0>)
 8003604:	f000 fbce 	bl	8003da4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800360c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800360e:	2312      	movs	r3, #18
 8003610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800361a:	2304      	movs	r3, #4
 800361c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4619      	mov	r1, r3
 8003624:	4805      	ldr	r0, [pc, #20]	@ (800363c <I2C3_MspInit+0xa4>)
 8003626:	f000 fbbd 	bl	8003da4 <HAL_GPIO_Init>
    
}
 800362a:	bf00      	nop
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40020800 	.word	0x40020800
 800363c:	40020000 	.word	0x40020000

08003640 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af04      	add	r7, sp, #16
 8003646:	4603      	mov	r3, r0
 8003648:	80fb      	strh	r3, [r7, #6]
 800364a:	460b      	mov	r3, r1
 800364c:	717b      	strb	r3, [r7, #5]
 800364e:	4613      	mov	r3, r2
 8003650:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003652:	793b      	ldrb	r3, [r7, #4]
 8003654:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003656:	797b      	ldrb	r3, [r7, #5]
 8003658:	b29a      	uxth	r2, r3
 800365a:	88f9      	ldrh	r1, [r7, #6]
 800365c:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <I2C3_Write+0x48>)
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	2301      	movs	r3, #1
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f107 030f 	add.w	r3, r7, #15
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2301      	movs	r3, #1
 800366c:	4807      	ldr	r0, [pc, #28]	@ (800368c <I2C3_Write+0x4c>)
 800366e:	f000 ffaf 	bl	80045d0 <HAL_I2C_Mem_Write>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <I2C3_Write+0x50>)
 8003678:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800367a:	f7ff ff3f 	bl	80034fc <verifyHAL_I2C_IS_OKAY>
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	0003d090 	.word	0x0003d090
 800368c:	20025c04 	.word	0x20025c04
 8003690:	20025c58 	.word	0x20025c58

08003694 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af04      	add	r7, sp, #16
 800369a:	4603      	mov	r3, r0
 800369c:	603a      	str	r2, [r7, #0]
 800369e:	71fb      	strb	r3, [r7, #7]
 80036a0:	460b      	mov	r3, r1
 80036a2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	b299      	uxth	r1, r3
 80036a8:	79bb      	ldrb	r3, [r7, #6]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <I2C3_Read+0x40>)
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	2301      	movs	r3, #1
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2301      	movs	r3, #1
 80036ba:	4807      	ldr	r0, [pc, #28]	@ (80036d8 <I2C3_Read+0x44>)
 80036bc:	f001 f882 	bl	80047c4 <HAL_I2C_Mem_Read>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <I2C3_Read+0x48>)
 80036c6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80036c8:	f7ff ff18 	bl	80034fc <verifyHAL_I2C_IS_OKAY>
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	0003d090 	.word	0x0003d090
 80036d8:	20025c04 	.word	0x20025c04
 80036dc:	20025c58 	.word	0x20025c58

080036e0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af04      	add	r7, sp, #16
 80036e6:	603a      	str	r2, [r7, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
 80036ee:	460b      	mov	r3, r1
 80036f0:	71bb      	strb	r3, [r7, #6]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	b299      	uxth	r1, r3
 80036fa:	79bb      	ldrb	r3, [r7, #6]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <I2C3_MulitByteRead+0x3c>)
 8003700:	9302      	str	r3, [sp, #8]
 8003702:	88bb      	ldrh	r3, [r7, #4]
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2301      	movs	r3, #1
 800370c:	4804      	ldr	r0, [pc, #16]	@ (8003720 <I2C3_MulitByteRead+0x40>)
 800370e:	f001 f859 	bl	80047c4 <HAL_I2C_Mem_Read>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	0003d090 	.word	0x0003d090
 8003720:	20025c04 	.word	0x20025c04

08003724 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800372e:	204d      	movs	r0, #77	@ 0x4d
 8003730:	f7ff fe15 	bl	800335e <STMPE811_Read>
 8003734:	4603      	mov	r3, r0
 8003736:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003738:	204e      	movs	r0, #78	@ 0x4e
 800373a:	f7ff fe10 	bl	800335e <STMPE811_Read>
 800373e:	4603      	mov	r3, r0
 8003740:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003742:	7a7b      	ldrb	r3, [r7, #9]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	b21a      	sxth	r2, r3
 8003748:	7a3b      	ldrb	r3, [r7, #8]
 800374a:	b21b      	sxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003750:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003754:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003758:	4293      	cmp	r3, r2
 800375a:	dc06      	bgt.n	800376a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 800375c:	89fb      	ldrh	r3, [r7, #14]
 800375e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003762:	330c      	adds	r3, #12
 8003764:	b29b      	uxth	r3, r3
 8003766:	81fb      	strh	r3, [r7, #14]
 8003768:	e005      	b.n	8003776 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 800376a:	89fb      	ldrh	r3, [r7, #14]
 800376c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003770:	3308      	adds	r3, #8
 8003772:	b29b      	uxth	r3, r3
 8003774:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800377a:	4a18      	ldr	r2, [pc, #96]	@ (80037dc <TM_STMPE811_ReadX+0xb8>)
 800377c:	fb82 1203 	smull	r1, r2, r2, r3
 8003780:	441a      	add	r2, r3
 8003782:	10d2      	asrs	r2, r2, #3
 8003784:	17db      	asrs	r3, r3, #31
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800378a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800378e:	2bef      	cmp	r3, #239	@ 0xef
 8003790:	dd02      	ble.n	8003798 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003792:	23ef      	movs	r3, #239	@ 0xef
 8003794:	81fb      	strh	r3, [r7, #14]
 8003796:	e005      	b.n	80037a4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800379c:	2b00      	cmp	r3, #0
 800379e:	da01      	bge.n	80037a4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80037a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	dd05      	ble.n	80037ba <TM_STMPE811_ReadX+0x96>
 80037ae:	89fa      	ldrh	r2, [r7, #14]
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	b21b      	sxth	r3, r3
 80037b8:	e004      	b.n	80037c4 <TM_STMPE811_ReadX+0xa0>
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	88fa      	ldrh	r2, [r7, #6]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80037c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	dd01      	ble.n	80037d2 <TM_STMPE811_ReadX+0xae>
        return val;
 80037ce:	89fb      	ldrh	r3, [r7, #14]
 80037d0:	e000      	b.n	80037d4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80037d2:	88fb      	ldrh	r3, [r7, #6]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	88888889 	.word	0x88888889

080037e0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80037ea:	204f      	movs	r0, #79	@ 0x4f
 80037ec:	f7ff fdb7 	bl	800335e <STMPE811_Read>
 80037f0:	4603      	mov	r3, r0
 80037f2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80037f4:	2050      	movs	r0, #80	@ 0x50
 80037f6:	f7ff fdb2 	bl	800335e <STMPE811_Read>
 80037fa:	4603      	mov	r3, r0
 80037fc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80037fe:	7a7b      	ldrb	r3, [r7, #9]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	b21a      	sxth	r2, r3
 8003804:	7a3b      	ldrb	r3, [r7, #8]
 8003806:	b21b      	sxth	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800380c:	89fb      	ldrh	r3, [r7, #14]
 800380e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003812:	b29b      	uxth	r3, r3
 8003814:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800381a:	4a19      	ldr	r2, [pc, #100]	@ (8003880 <TM_STMPE811_ReadY+0xa0>)
 800381c:	fb82 1203 	smull	r1, r2, r2, r3
 8003820:	1052      	asrs	r2, r2, #1
 8003822:	17db      	asrs	r3, r3, #31
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800382c:	2b00      	cmp	r3, #0
 800382e:	dc02      	bgt.n	8003836 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	81fb      	strh	r3, [r7, #14]
 8003834:	e007      	b.n	8003846 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003836:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800383a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800383e:	db02      	blt.n	8003846 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003840:	f240 133f 	movw	r3, #319	@ 0x13f
 8003844:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003846:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	429a      	cmp	r2, r3
 800384e:	dd05      	ble.n	800385c <TM_STMPE811_ReadY+0x7c>
 8003850:	89fa      	ldrh	r2, [r7, #14]
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	b21b      	sxth	r3, r3
 800385a:	e004      	b.n	8003866 <TM_STMPE811_ReadY+0x86>
 800385c:	89fb      	ldrh	r3, [r7, #14]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	b29b      	uxth	r3, r3
 8003864:	b21b      	sxth	r3, r3
 8003866:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003868:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800386c:	2b04      	cmp	r3, #4
 800386e:	dd01      	ble.n	8003874 <TM_STMPE811_ReadY+0x94>
        return val;
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	e000      	b.n	8003876 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003874:	88fb      	ldrh	r3, [r7, #6]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2e8ba2e9 	.word	0x2e8ba2e9

08003884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800388c:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <_sbrk+0x5c>)
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <_sbrk+0x60>)
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <_sbrk+0x64>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a0:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <_sbrk+0x64>)
 80038a2:	4a12      	ldr	r2, [pc, #72]	@ (80038ec <_sbrk+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <_sbrk+0x64>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d207      	bcs.n	80038c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038b4:	f003 ffb0 	bl	8007818 <__errno>
 80038b8:	4603      	mov	r3, r0
 80038ba:	220c      	movs	r2, #12
 80038bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038c2:	e009      	b.n	80038d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <_sbrk+0x64>)
 80038d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20030000 	.word	0x20030000
 80038e4:	00000400 	.word	0x00000400
 80038e8:	20025c5c 	.word	0x20025c5c
 80038ec:	20025e60 	.word	0x20025e60

080038f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <SystemInit+0x20>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <SystemInit+0x20>)
 80038fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800394c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003918:	f7ff ffea 	bl	80038f0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800391c:	480c      	ldr	r0, [pc, #48]	@ (8003950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800391e:	490d      	ldr	r1, [pc, #52]	@ (8003954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800392c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003934:	4c0a      	ldr	r4, [pc, #40]	@ (8003960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003942:	f003 ff6f 	bl	8007824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003946:	f7ff f8f9 	bl	8002b3c <main>
  bx  lr    
 800394a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800394c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003954:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8003958:	0800a05c 	.word	0x0800a05c
  ldr r2, =_sbss
 800395c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8003960:	20025e5c 	.word	0x20025e5c

08003964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003964:	e7fe      	b.n	8003964 <ADC_IRQHandler>
	...

08003968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800396c:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <HAL_Init+0x40>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0d      	ldr	r2, [pc, #52]	@ (80039a8 <HAL_Init+0x40>)
 8003972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_Init+0x40>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <HAL_Init+0x40>)
 800397e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003984:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <HAL_Init+0x40>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a07      	ldr	r2, [pc, #28]	@ (80039a8 <HAL_Init+0x40>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003990:	2003      	movs	r0, #3
 8003992:	f000 f991 	bl	8003cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003996:	2000      	movs	r0, #0
 8003998:	f000 f808 	bl	80039ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800399c:	f7ff f966 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00

080039ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b4:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <HAL_InitTick+0x54>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <HAL_InitTick+0x58>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f9b7 	bl	8003d3e <HAL_SYSTICK_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00e      	b.n	80039f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b0f      	cmp	r3, #15
 80039de:	d80a      	bhi.n	80039f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e0:	2200      	movs	r2, #0
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039e8:	f000 f971 	bl	8003cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039ec:	4a06      	ldr	r2, [pc, #24]	@ (8003a08 <HAL_InitTick+0x5c>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000148 	.word	0x20000148
 8003a04:	20000150 	.word	0x20000150
 8003a08:	2000014c 	.word	0x2000014c

08003a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a10:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_IncTick+0x20>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_IncTick+0x24>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <HAL_IncTick+0x24>)
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000150 	.word	0x20000150
 8003a30:	20025c60 	.word	0x20025c60

08003a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <HAL_GetTick+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20025c60 	.word	0x20025c60

08003a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7ff ffee 	bl	8003a34 <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a64:	d005      	beq.n	8003a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <HAL_Delay+0x44>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a72:	bf00      	nop
 8003a74:	f7ff ffde 	bl	8003a34 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8f7      	bhi.n	8003a74 <HAL_Delay+0x28>
  {
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000150 	.word	0x20000150

08003a94 <__NVIC_SetPriorityGrouping>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	@ (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_GetPriorityGrouping>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	@ (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db12      	blt.n	8003b6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	490a      	ldr	r1, [pc, #40]	@ (8003b78 <__NVIC_DisableIRQ+0x44>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	3320      	adds	r3, #32
 8003b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b60:	f3bf 8f4f 	dsb	sy
}
 8003b64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b66:	f3bf 8f6f 	isb	sy
}
 8003b6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db0c      	blt.n	8003ba8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	4907      	ldr	r1, [pc, #28]	@ (8003bb4 <__NVIC_ClearPendingIRQ+0x38>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba2:	3360      	adds	r3, #96	@ 0x60
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100

08003bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db0a      	blt.n	8003be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	490c      	ldr	r1, [pc, #48]	@ (8003c04 <__NVIC_SetPriority+0x4c>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be0:	e00a      	b.n	8003bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4908      	ldr	r1, [pc, #32]	@ (8003c08 <__NVIC_SetPriority+0x50>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	761a      	strb	r2, [r3, #24]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000e100 	.word	0xe000e100
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	@ 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf28      	it	cs
 8003c2a:	2304      	movcs	r3, #4
 8003c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <NVIC_EncodePriority+0x30>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3b03      	subs	r3, #3
 8003c3a:	e000      	b.n	8003c3e <NVIC_EncodePriority+0x32>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	4313      	orrs	r3, r2
         );
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3724      	adds	r7, #36	@ 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c84:	d301      	bcc.n	8003c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c86:	2301      	movs	r3, #1
 8003c88:	e00f      	b.n	8003caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <SysTick_Config+0x40>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c92:	210f      	movs	r1, #15
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c98:	f7ff ff8e 	bl	8003bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c9c:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <SysTick_Config+0x40>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca2:	4b04      	ldr	r3, [pc, #16]	@ (8003cb4 <SysTick_Config+0x40>)
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000e010 	.word	0xe000e010

08003cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fee7 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce0:	f7ff fefc 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7ff ff8e 	bl	8003c0c <NVIC_EncodePriority>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff5d 	bl	8003bb8 <__NVIC_SetPriority>
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff feef 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff feff 	bl	8003b34 <__NVIC_DisableIRQ>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ff94 	bl	8003c74 <SysTick_Config>
 8003d4c:	4603      	mov	r3, r0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff09 	bl	8003b7c <__NVIC_ClearPendingIRQ>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2201      	movs	r2, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003d8e:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <HAL_EXTI_ClearPending+0x2c>)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6153      	str	r3, [r2, #20]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40013c00 	.word	0x40013c00

08003da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	@ 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	e177      	b.n	80040b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	f040 8166 	bne.w	80040aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d005      	beq.n	8003df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d130      	bne.n	8003e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 0201 	and.w	r2, r3, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d017      	beq.n	8003e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2203      	movs	r2, #3
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d123      	bne.n	8003ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	08da      	lsrs	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3208      	adds	r2, #8
 8003ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	220f      	movs	r2, #15
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	69b9      	ldr	r1, [r7, #24]
 8003ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0203 	and.w	r2, r3, #3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80c0 	beq.w	80040aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b66      	ldr	r3, [pc, #408]	@ (80040c8 <HAL_GPIO_Init+0x324>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	4a65      	ldr	r2, [pc, #404]	@ (80040c8 <HAL_GPIO_Init+0x324>)
 8003f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f3a:	4b63      	ldr	r3, [pc, #396]	@ (80040c8 <HAL_GPIO_Init+0x324>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f46:	4a61      	ldr	r2, [pc, #388]	@ (80040cc <HAL_GPIO_Init+0x328>)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a58      	ldr	r2, [pc, #352]	@ (80040d0 <HAL_GPIO_Init+0x32c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d037      	beq.n	8003fe2 <HAL_GPIO_Init+0x23e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a57      	ldr	r2, [pc, #348]	@ (80040d4 <HAL_GPIO_Init+0x330>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <HAL_GPIO_Init+0x23a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a56      	ldr	r2, [pc, #344]	@ (80040d8 <HAL_GPIO_Init+0x334>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d02b      	beq.n	8003fda <HAL_GPIO_Init+0x236>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a55      	ldr	r2, [pc, #340]	@ (80040dc <HAL_GPIO_Init+0x338>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d025      	beq.n	8003fd6 <HAL_GPIO_Init+0x232>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a54      	ldr	r2, [pc, #336]	@ (80040e0 <HAL_GPIO_Init+0x33c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01f      	beq.n	8003fd2 <HAL_GPIO_Init+0x22e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a53      	ldr	r2, [pc, #332]	@ (80040e4 <HAL_GPIO_Init+0x340>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d019      	beq.n	8003fce <HAL_GPIO_Init+0x22a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_GPIO_Init+0x344>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_GPIO_Init+0x226>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a51      	ldr	r2, [pc, #324]	@ (80040ec <HAL_GPIO_Init+0x348>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_GPIO_Init+0x222>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a50      	ldr	r2, [pc, #320]	@ (80040f0 <HAL_GPIO_Init+0x34c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <HAL_GPIO_Init+0x21e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80040f4 <HAL_GPIO_Init+0x350>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d101      	bne.n	8003fbe <HAL_GPIO_Init+0x21a>
 8003fba:	2309      	movs	r3, #9
 8003fbc:	e012      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fbe:	230a      	movs	r3, #10
 8003fc0:	e010      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	e00e      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fc6:	2307      	movs	r3, #7
 8003fc8:	e00c      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fca:	2306      	movs	r3, #6
 8003fcc:	e00a      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fce:	2305      	movs	r3, #5
 8003fd0:	e008      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	e006      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e004      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e002      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f002 0203 	and.w	r2, r2, #3
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	4093      	lsls	r3, r2
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ff4:	4935      	ldr	r1, [pc, #212]	@ (80040cc <HAL_GPIO_Init+0x328>)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004002:	4b3d      	ldr	r3, [pc, #244]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004026:	4a34      	ldr	r2, [pc, #208]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800402c:	4b32      	ldr	r3, [pc, #200]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004050:	4a29      	ldr	r2, [pc, #164]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004056:	4b28      	ldr	r3, [pc, #160]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800407a:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004080:	4b1d      	ldr	r3, [pc, #116]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <HAL_GPIO_Init+0x354>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3301      	adds	r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b0f      	cmp	r3, #15
 80040b4:	f67f ae84 	bls.w	8003dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	3724      	adds	r7, #36	@ 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40020000 	.word	0x40020000
 80040d4:	40020400 	.word	0x40020400
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020c00 	.word	0x40020c00
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40021400 	.word	0x40021400
 80040e8:	40021800 	.word	0x40021800
 80040ec:	40021c00 	.word	0x40021c00
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40022400 	.word	0x40022400
 80040f8:	40013c00 	.word	0x40013c00

080040fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e0d9      	b.n	80042cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004118:	2201      	movs	r2, #1
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	f040 80c9 	bne.w	80042c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004134:	4a6b      	ldr	r2, [pc, #428]	@ (80042e4 <HAL_GPIO_DeInit+0x1e8>)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	3302      	adds	r3, #2
 800413c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004140:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	220f      	movs	r2, #15
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a63      	ldr	r2, [pc, #396]	@ (80042e8 <HAL_GPIO_DeInit+0x1ec>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d037      	beq.n	80041ce <HAL_GPIO_DeInit+0xd2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a62      	ldr	r2, [pc, #392]	@ (80042ec <HAL_GPIO_DeInit+0x1f0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d031      	beq.n	80041ca <HAL_GPIO_DeInit+0xce>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a61      	ldr	r2, [pc, #388]	@ (80042f0 <HAL_GPIO_DeInit+0x1f4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02b      	beq.n	80041c6 <HAL_GPIO_DeInit+0xca>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a60      	ldr	r2, [pc, #384]	@ (80042f4 <HAL_GPIO_DeInit+0x1f8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d025      	beq.n	80041c2 <HAL_GPIO_DeInit+0xc6>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a5f      	ldr	r2, [pc, #380]	@ (80042f8 <HAL_GPIO_DeInit+0x1fc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01f      	beq.n	80041be <HAL_GPIO_DeInit+0xc2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a5e      	ldr	r2, [pc, #376]	@ (80042fc <HAL_GPIO_DeInit+0x200>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d019      	beq.n	80041ba <HAL_GPIO_DeInit+0xbe>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a5d      	ldr	r2, [pc, #372]	@ (8004300 <HAL_GPIO_DeInit+0x204>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_GPIO_DeInit+0xba>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a5c      	ldr	r2, [pc, #368]	@ (8004304 <HAL_GPIO_DeInit+0x208>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00d      	beq.n	80041b2 <HAL_GPIO_DeInit+0xb6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a5b      	ldr	r2, [pc, #364]	@ (8004308 <HAL_GPIO_DeInit+0x20c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <HAL_GPIO_DeInit+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a5a      	ldr	r2, [pc, #360]	@ (800430c <HAL_GPIO_DeInit+0x210>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_GPIO_DeInit+0xae>
 80041a6:	2309      	movs	r3, #9
 80041a8:	e012      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041aa:	230a      	movs	r3, #10
 80041ac:	e010      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041ae:	2308      	movs	r3, #8
 80041b0:	e00e      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041b2:	2307      	movs	r3, #7
 80041b4:	e00c      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041b6:	2306      	movs	r3, #6
 80041b8:	e00a      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041ba:	2305      	movs	r3, #5
 80041bc:	e008      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041be:	2304      	movs	r3, #4
 80041c0:	e006      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041c2:	2303      	movs	r3, #3
 80041c4:	e004      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e002      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_GPIO_DeInit+0xd4>
 80041ce:	2300      	movs	r3, #0
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	f002 0203 	and.w	r2, r2, #3
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	4093      	lsls	r3, r2
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d132      	bne.n	8004246 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80041e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4949      	ldr	r1, [pc, #292]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80041ee:	4b48      	ldr	r3, [pc, #288]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	4946      	ldr	r1, [pc, #280]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041fc:	4b44      	ldr	r3, [pc, #272]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	43db      	mvns	r3, r3
 8004204:	4942      	ldr	r1, [pc, #264]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 8004206:	4013      	ands	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800420a:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	493f      	ldr	r1, [pc, #252]	@ (8004310 <HAL_GPIO_DeInit+0x214>)
 8004214:	4013      	ands	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004228:	4a2e      	ldr	r2, [pc, #184]	@ (80042e4 <HAL_GPIO_DeInit+0x1e8>)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	3302      	adds	r3, #2
 8004230:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	43da      	mvns	r2, r3
 8004238:	482a      	ldr	r0, [pc, #168]	@ (80042e4 <HAL_GPIO_DeInit+0x1e8>)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	400a      	ands	r2, r1
 8004240:	3302      	adds	r3, #2
 8004242:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	2103      	movs	r1, #3
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	08da      	lsrs	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3208      	adds	r2, #8
 8004264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	08d2      	lsrs	r2, r2, #3
 800427c:	4019      	ands	r1, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2103      	movs	r1, #3
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2101      	movs	r1, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	2103      	movs	r1, #3
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	401a      	ands	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	f67f af22 	bls.w	8004118 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40013800 	.word	0x40013800
 80042e8:	40020000 	.word	0x40020000
 80042ec:	40020400 	.word	0x40020400
 80042f0:	40020800 	.word	0x40020800
 80042f4:	40020c00 	.word	0x40020c00
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40021400 	.word	0x40021400
 8004300:	40021800 	.word	0x40021800
 8004304:	40021c00 	.word	0x40021c00
 8004308:	40022000 	.word	0x40022000
 800430c:	40022400 	.word	0x40022400
 8004310:	40013c00 	.word	0x40013c00

08004314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
 8004320:	4613      	mov	r3, r2
 8004322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004330:	e003      	b.n	800433a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	041a      	lsls	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	619a      	str	r2, [r3, #24]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e12b      	b.n	80045b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe fca4 	bl	8002cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	@ 0x24
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800439a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043ac:	f001 ff06 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 80043b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a81      	ldr	r2, [pc, #516]	@ (80045bc <HAL_I2C_Init+0x274>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d807      	bhi.n	80043cc <HAL_I2C_Init+0x84>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a80      	ldr	r2, [pc, #512]	@ (80045c0 <HAL_I2C_Init+0x278>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bf94      	ite	ls
 80043c4:	2301      	movls	r3, #1
 80043c6:	2300      	movhi	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e006      	b.n	80043da <HAL_I2C_Init+0x92>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a7d      	ldr	r2, [pc, #500]	@ (80045c4 <HAL_I2C_Init+0x27c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bf94      	ite	ls
 80043d4:	2301      	movls	r3, #1
 80043d6:	2300      	movhi	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0e7      	b.n	80045b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a78      	ldr	r2, [pc, #480]	@ (80045c8 <HAL_I2C_Init+0x280>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0c9b      	lsrs	r3, r3, #18
 80043ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a6a      	ldr	r2, [pc, #424]	@ (80045bc <HAL_I2C_Init+0x274>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d802      	bhi.n	800441c <HAL_I2C_Init+0xd4>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3301      	adds	r3, #1
 800441a:	e009      	b.n	8004430 <HAL_I2C_Init+0xe8>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	4a69      	ldr	r2, [pc, #420]	@ (80045cc <HAL_I2C_Init+0x284>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	3301      	adds	r3, #1
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	430b      	orrs	r3, r1
 8004436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004442:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	495c      	ldr	r1, [pc, #368]	@ (80045bc <HAL_I2C_Init+0x274>)
 800444c:	428b      	cmp	r3, r1
 800444e:	d819      	bhi.n	8004484 <HAL_I2C_Init+0x13c>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e59      	subs	r1, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fbb1 f3f3 	udiv	r3, r1, r3
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004464:	400b      	ands	r3, r1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_I2C_Init+0x138>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1e59      	subs	r1, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fbb1 f3f3 	udiv	r3, r1, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447e:	e051      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004480:	2304      	movs	r3, #4
 8004482:	e04f      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d111      	bne.n	80044b0 <HAL_I2C_Init+0x168>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e012      	b.n	80044d6 <HAL_I2C_Init+0x18e>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1e58      	subs	r0, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	0099      	lsls	r1, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c6:	3301      	adds	r3, #1
 80044c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Init+0x196>
 80044da:	2301      	movs	r3, #1
 80044dc:	e022      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10e      	bne.n	8004504 <HAL_I2C_Init+0x1bc>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e58      	subs	r0, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	440b      	add	r3, r1
 80044f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f8:	3301      	adds	r3, #1
 80044fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004502:	e00f      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	6809      	ldr	r1, [r1, #0]
 8004528:	4313      	orrs	r3, r2
 800452a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004552:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6911      	ldr	r1, [r2, #16]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68d2      	ldr	r2, [r2, #12]
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	430b      	orrs	r3, r1
 8004566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	000186a0 	.word	0x000186a0
 80045c0:	001e847f 	.word	0x001e847f
 80045c4:	003d08ff 	.word	0x003d08ff
 80045c8:	431bde83 	.word	0x431bde83
 80045cc:	10624dd3 	.word	0x10624dd3

080045d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ea:	f7ff fa23 	bl	8003a34 <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	f040 80d9 	bne.w	80047b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2319      	movs	r3, #25
 8004604:	2201      	movs	r2, #1
 8004606:	496d      	ldr	r1, [pc, #436]	@ (80047bc <HAL_I2C_Mem_Write+0x1ec>)
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fc8b 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
 8004616:	e0cc      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_I2C_Mem_Write+0x56>
 8004622:	2302      	movs	r3, #2
 8004624:	e0c5      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d007      	beq.n	800464c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800465a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2221      	movs	r2, #33	@ 0x21
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2240      	movs	r2, #64	@ 0x40
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a4d      	ldr	r2, [pc, #308]	@ (80047c0 <HAL_I2C_Mem_Write+0x1f0>)
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468e:	88f8      	ldrh	r0, [r7, #6]
 8004690:	893a      	ldrh	r2, [r7, #8]
 8004692:	8979      	ldrh	r1, [r7, #10]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4603      	mov	r3, r0
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fac2 	bl	8004c28 <I2C_RequestMemoryWrite>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d052      	beq.n	8004750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e081      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fd50 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d107      	bne.n	80046d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06b      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d11b      	bne.n	8004750 <HAL_I2C_Mem_Write+0x180>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	2b00      	cmp	r3, #0
 800471e:	d017      	beq.n	8004750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	781a      	ldrb	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1aa      	bne.n	80046ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fd43 	bl	80051e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	2b04      	cmp	r3, #4
 800476e:	d107      	bne.n	8004780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800477e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e016      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	00100002 	.word	0x00100002
 80047c0:	ffff0000 	.word	0xffff0000

080047c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	@ 0x30
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	460b      	mov	r3, r1
 80047d8:	813b      	strh	r3, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047de:	f7ff f929 	bl	8003a34 <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	f040 8214 	bne.w	8004c1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2319      	movs	r3, #25
 80047f8:	2201      	movs	r2, #1
 80047fa:	497b      	ldr	r1, [pc, #492]	@ (80049e8 <HAL_I2C_Mem_Read+0x224>)
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fb91 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
 800480a:	e207      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_I2C_Mem_Read+0x56>
 8004816:	2302      	movs	r3, #2
 8004818:	e200      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d007      	beq.n	8004840 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2222      	movs	r2, #34	@ 0x22
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2240      	movs	r2, #64	@ 0x40
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800486a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004870:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a5b      	ldr	r2, [pc, #364]	@ (80049ec <HAL_I2C_Mem_Read+0x228>)
 8004880:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004882:	88f8      	ldrh	r0, [r7, #6]
 8004884:	893a      	ldrh	r2, [r7, #8]
 8004886:	8979      	ldrh	r1, [r7, #10]
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4603      	mov	r3, r0
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fa5e 	bl	8004d54 <I2C_RequestMemoryRead>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1bc      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d113      	bne.n	80048d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	623b      	str	r3, [r7, #32]
 80048be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e190      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d11b      	bne.n	8004912 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e170      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004916:	2b02      	cmp	r3, #2
 8004918:	d11b      	bne.n	8004952 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004928:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	e150      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004968:	e144      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496e:	2b03      	cmp	r3, #3
 8004970:	f200 80f1 	bhi.w	8004b56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004978:	2b01      	cmp	r3, #1
 800497a:	d123      	bne.n	80049c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fc79 	bl	8005278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e145      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049c2:	e117      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d14e      	bne.n	8004a6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	2200      	movs	r2, #0
 80049d4:	4906      	ldr	r1, [pc, #24]	@ (80049f0 <HAL_I2C_Mem_Read+0x22c>)
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 faa4 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e11a      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
 80049e6:	bf00      	nop
 80049e8:	00100002 	.word	0x00100002
 80049ec:	ffff0000 	.word	0xffff0000
 80049f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a68:	e0c4      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	496c      	ldr	r1, [pc, #432]	@ (8004c24 <HAL_I2C_Mem_Read+0x460>)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fa55 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0cb      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	2200      	movs	r2, #0
 8004ace:	4955      	ldr	r1, [pc, #340]	@ (8004c24 <HAL_I2C_Mem_Read+0x460>)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fa27 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e09d      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b54:	e04e      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fb8c 	bl	8005278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e058      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d124      	bne.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d107      	bne.n	8004bc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f aeb6 	bne.w	800496a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	@ 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	00010004 	.word	0x00010004

08004c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	461a      	mov	r2, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	817b      	strh	r3, [r7, #10]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	813b      	strh	r3, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f960 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c78:	d103      	bne.n	8004c82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e05f      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c86:	897b      	ldrh	r3, [r7, #10]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	492d      	ldr	r1, [pc, #180]	@ (8004d50 <I2C_RequestMemoryWrite+0x128>)
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f9bb 	bl	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e04c      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc4:	6a39      	ldr	r1, [r7, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa46 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d107      	bne.n	8004cea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e02b      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf4:	893b      	ldrh	r3, [r7, #8]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	611a      	str	r2, [r3, #16]
 8004cfe:	e021      	b.n	8004d44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d10:	6a39      	ldr	r1, [r7, #32]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fa20 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00d      	beq.n	8004d3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d107      	bne.n	8004d36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e005      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3a:	893b      	ldrh	r3, [r7, #8]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	00010002 	.word	0x00010002

08004d54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	4611      	mov	r1, r2
 8004d60:	461a      	mov	r2, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	817b      	strh	r3, [r7, #10]
 8004d66:	460b      	mov	r3, r1
 8004d68:	813b      	strh	r3, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8c2 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db4:	d103      	bne.n	8004dbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0aa      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dc2:	897b      	ldrh	r3, [r7, #10]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	4952      	ldr	r1, [pc, #328]	@ (8004f20 <I2C_RequestMemoryRead+0x1cc>)
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f91d 	bl	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e097      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f9a8 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d107      	bne.n	8004e26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e076      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d105      	bne.n	8004e3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e30:	893b      	ldrh	r3, [r7, #8]
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	611a      	str	r2, [r3, #16]
 8004e3a:	e021      	b.n	8004e80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4c:	6a39      	ldr	r1, [r7, #32]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f982 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d107      	bne.n	8004e72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e050      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e76:	893b      	ldrh	r3, [r7, #8]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e82:	6a39      	ldr	r1, [r7, #32]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f967 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d107      	bne.n	8004ea8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ea6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e035      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f82b 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee2:	d103      	bne.n	8004eec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e013      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ef0:	897b      	ldrh	r3, [r7, #10]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	4906      	ldr	r1, [pc, #24]	@ (8004f20 <I2C_RequestMemoryRead+0x1cc>)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f886 	bl	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	00010002 	.word	0x00010002

08004f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f34:	e048      	b.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f3c:	d044      	beq.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fe fd79 	bl	8003a34 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d139      	bne.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10d      	bne.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	43da      	mvns	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	e00c      	b.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d116      	bne.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e023      	b.n	8005010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10d      	bne.n	8004fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	43da      	mvns	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	e00c      	b.n	8005008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	43da      	mvns	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	429a      	cmp	r2, r3
 800500c:	d093      	beq.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005026:	e071      	b.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005036:	d123      	bne.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	f043 0204 	orr.w	r2, r3, #4
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e067      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005086:	d041      	beq.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005088:	f7fe fcd4 	bl	8003a34 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d136      	bne.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10c      	bne.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e00b      	b.n	80050da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	43da      	mvns	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e021      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10c      	bne.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	43da      	mvns	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	e00b      	b.n	8005148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	43da      	mvns	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4013      	ands	r3, r2
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	bf14      	ite	ne
 8005142:	2301      	movne	r3, #1
 8005144:	2300      	moveq	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	f47f af6d 	bne.w	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005164:	e034      	b.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f8e3 	bl	8005332 <I2C_IsAcknowledgeFailed>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e034      	b.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800517c:	d028      	beq.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fe fc59 	bl	8003a34 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11d      	bne.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519e:	2b80      	cmp	r3, #128	@ 0x80
 80051a0:	d016      	beq.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e007      	b.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051da:	2b80      	cmp	r3, #128	@ 0x80
 80051dc:	d1c3      	bne.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f4:	e034      	b.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f89b 	bl	8005332 <I2C_IsAcknowledgeFailed>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e034      	b.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800520c:	d028      	beq.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fe fc11 	bl	8003a34 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11d      	bne.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b04      	cmp	r3, #4
 8005230:	d016      	beq.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e007      	b.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d1c3      	bne.n	80051f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005284:	e049      	b.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d119      	bne.n	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0210 	mvn.w	r2, #16
 800529c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e030      	b.n	800532a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c8:	f7fe fbb4 	bl	8003a34 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11d      	bne.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b40      	cmp	r3, #64	@ 0x40
 80052ea:	d016      	beq.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e007      	b.n	800532a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d1ae      	bne.n	8005286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005348:	d11b      	bne.n	8005382 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005352:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f043 0204 	orr.w	r2, r3, #4
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e0bf      	b.n	8005522 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fd fcea 	bl	8002d90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80053d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6999      	ldr	r1, [r3, #24]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6899      	ldr	r1, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b4a      	ldr	r3, [pc, #296]	@ (800552c <HAL_LTDC_Init+0x19c>)
 8005404:	400b      	ands	r3, r1
 8005406:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68d9      	ldr	r1, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b3e      	ldr	r3, [pc, #248]	@ (800552c <HAL_LTDC_Init+0x19c>)
 8005432:	400b      	ands	r3, r1
 8005434:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68d9      	ldr	r1, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6919      	ldr	r1, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b33      	ldr	r3, [pc, #204]	@ (800552c <HAL_LTDC_Init+0x19c>)
 8005460:	400b      	ands	r3, r1
 8005462:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6919      	ldr	r1, [r3, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6959      	ldr	r1, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b27      	ldr	r3, [pc, #156]	@ (800552c <HAL_LTDC_Init+0x19c>)
 800548e:	400b      	ands	r3, r1
 8005490:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6959      	ldr	r1, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0206 	orr.w	r2, r2, #6
 80054fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	f000f800 	.word	0xf000f800

08005530 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_LTDC_ConfigLayer+0x1a>
 8005546:	2302      	movs	r3, #2
 8005548:	e02c      	b.n	80055a4 <HAL_LTDC_ConfigLayer+0x74>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2134      	movs	r1, #52	@ 0x34
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	4413      	add	r3, r2
 8005566:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4614      	mov	r4, r2
 800556e:	461d      	mov	r5, r3
 8005570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f811 	bl	80055ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2201      	movs	r2, #1
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bdb0      	pop	{r4, r5, r7, pc}

080055ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	@ 0x24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c8:	4413      	add	r3, r2
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	4413      	add	r3, r2
 80055da:	3384      	adds	r3, #132	@ 0x84
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	4611      	mov	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	01d2      	lsls	r2, r2, #7
 80055e8:	440a      	add	r2, r1
 80055ea:	3284      	adds	r2, #132	@ 0x84
 80055ec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80055f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005602:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005604:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	01db      	lsls	r3, r3, #7
 8005610:	440b      	add	r3, r1
 8005612:	3384      	adds	r3, #132	@ 0x84
 8005614:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800561a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800562a:	4413      	add	r3, r2
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	3384      	adds	r3, #132	@ 0x84
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	4611      	mov	r1, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	01d2      	lsls	r2, r2, #7
 800564a:	440a      	add	r2, r1
 800564c:	3284      	adds	r2, #132	@ 0x84
 800564e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005652:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005662:	4413      	add	r3, r2
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	01db      	lsls	r3, r3, #7
 8005670:	440b      	add	r3, r1
 8005672:	3384      	adds	r3, #132	@ 0x84
 8005674:	4619      	mov	r1, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4313      	orrs	r3, r2
 800567a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	01db      	lsls	r3, r3, #7
 8005686:	4413      	add	r3, r2
 8005688:	3384      	adds	r3, #132	@ 0x84
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	4611      	mov	r1, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	01d2      	lsls	r2, r2, #7
 8005696:	440a      	add	r2, r1
 8005698:	3284      	adds	r2, #132	@ 0x84
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	01db      	lsls	r3, r3, #7
 80056aa:	4413      	add	r3, r2
 80056ac:	3384      	adds	r3, #132	@ 0x84
 80056ae:	461a      	mov	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	061b      	lsls	r3, r3, #24
 80056d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	4413      	add	r3, r2
 80056de:	3384      	adds	r3, #132	@ 0x84
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	01db      	lsls	r3, r3, #7
 80056ec:	4413      	add	r3, r2
 80056ee:	3384      	adds	r3, #132	@ 0x84
 80056f0:	461a      	mov	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056fc:	461a      	mov	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	431a      	orrs	r2, r3
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	01db      	lsls	r3, r3, #7
 8005710:	440b      	add	r3, r1
 8005712:	3384      	adds	r3, #132	@ 0x84
 8005714:	4619      	mov	r1, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	01db      	lsls	r3, r3, #7
 8005726:	4413      	add	r3, r2
 8005728:	3384      	adds	r3, #132	@ 0x84
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	4611      	mov	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	01d2      	lsls	r2, r2, #7
 8005736:	440a      	add	r2, r1
 8005738:	3284      	adds	r2, #132	@ 0x84
 800573a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800573e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	01db      	lsls	r3, r3, #7
 800574a:	4413      	add	r3, r2
 800574c:	3384      	adds	r3, #132	@ 0x84
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	01db      	lsls	r3, r3, #7
 8005760:	4413      	add	r3, r2
 8005762:	3384      	adds	r3, #132	@ 0x84
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	4611      	mov	r1, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	01d2      	lsls	r2, r2, #7
 8005770:	440a      	add	r2, r1
 8005772:	3284      	adds	r2, #132	@ 0x84
 8005774:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005778:	f023 0307 	bic.w	r3, r3, #7
 800577c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	6809      	ldr	r1, [r1, #0]
 800578a:	4608      	mov	r0, r1
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	01c9      	lsls	r1, r1, #7
 8005790:	4401      	add	r1, r0
 8005792:	3184      	adds	r1, #132	@ 0x84
 8005794:	4313      	orrs	r3, r2
 8005796:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	01db      	lsls	r3, r3, #7
 80057a2:	4413      	add	r3, r2
 80057a4:	3384      	adds	r3, #132	@ 0x84
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	01db      	lsls	r3, r3, #7
 80057b2:	4413      	add	r3, r2
 80057b4:	3384      	adds	r3, #132	@ 0x84
 80057b6:	461a      	mov	r2, r3
 80057b8:	2300      	movs	r3, #0
 80057ba:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	01db      	lsls	r3, r3, #7
 80057c6:	4413      	add	r3, r2
 80057c8:	3384      	adds	r3, #132	@ 0x84
 80057ca:	461a      	mov	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80057da:	2304      	movs	r3, #4
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	e01b      	b.n	8005818 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d102      	bne.n	80057ee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80057e8:	2303      	movs	r3, #3
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	e014      	b.n	8005818 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d00b      	beq.n	800580e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d007      	beq.n	800580e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005802:	2b03      	cmp	r3, #3
 8005804:	d003      	beq.n	800580e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800580a:	2b07      	cmp	r3, #7
 800580c:	d102      	bne.n	8005814 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800580e:	2302      	movs	r3, #2
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e001      	b.n	8005818 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005814:	2301      	movs	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	01db      	lsls	r3, r3, #7
 8005822:	4413      	add	r3, r2
 8005824:	3384      	adds	r3, #132	@ 0x84
 8005826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	4611      	mov	r1, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	01d2      	lsls	r2, r2, #7
 8005832:	440a      	add	r2, r1
 8005834:	3284      	adds	r2, #132	@ 0x84
 8005836:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800583a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	fb02 f303 	mul.w	r3, r2, r3
 8005846:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	1acb      	subs	r3, r1, r3
 8005852:	69f9      	ldr	r1, [r7, #28]
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	6809      	ldr	r1, [r1, #0]
 800585e:	4608      	mov	r0, r1
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	01c9      	lsls	r1, r1, #7
 8005864:	4401      	add	r1, r0
 8005866:	3184      	adds	r1, #132	@ 0x84
 8005868:	4313      	orrs	r3, r2
 800586a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	01db      	lsls	r3, r3, #7
 8005876:	4413      	add	r3, r2
 8005878:	3384      	adds	r3, #132	@ 0x84
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	4611      	mov	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	01d2      	lsls	r2, r2, #7
 8005886:	440a      	add	r2, r1
 8005888:	3284      	adds	r2, #132	@ 0x84
 800588a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4413      	add	r3, r2
 80058a0:	3384      	adds	r3, #132	@ 0x84
 80058a2:	461a      	mov	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	01db      	lsls	r3, r3, #7
 80058b4:	4413      	add	r3, r2
 80058b6:	3384      	adds	r3, #132	@ 0x84
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	4611      	mov	r1, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	01d2      	lsls	r2, r2, #7
 80058c4:	440a      	add	r2, r1
 80058c6:	3284      	adds	r2, #132	@ 0x84
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	6013      	str	r3, [r2, #0]
}
 80058ce:	bf00      	nop
 80058d0:	3724      	adds	r7, #36	@ 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e267      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d075      	beq.n	80059e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058fa:	4b88      	ldr	r3, [pc, #544]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
 8005902:	2b04      	cmp	r3, #4
 8005904:	d00c      	beq.n	8005920 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005906:	4b85      	ldr	r3, [pc, #532]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800590e:	2b08      	cmp	r3, #8
 8005910:	d112      	bne.n	8005938 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005912:	4b82      	ldr	r3, [pc, #520]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800591e:	d10b      	bne.n	8005938 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005920:	4b7e      	ldr	r3, [pc, #504]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d05b      	beq.n	80059e4 <HAL_RCC_OscConfig+0x108>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d157      	bne.n	80059e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e242      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005940:	d106      	bne.n	8005950 <HAL_RCC_OscConfig+0x74>
 8005942:	4b76      	ldr	r3, [pc, #472]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a75      	ldr	r2, [pc, #468]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e01d      	b.n	800598c <HAL_RCC_OscConfig+0xb0>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005958:	d10c      	bne.n	8005974 <HAL_RCC_OscConfig+0x98>
 800595a:	4b70      	ldr	r3, [pc, #448]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a6f      	ldr	r2, [pc, #444]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	4b6d      	ldr	r3, [pc, #436]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a6c      	ldr	r2, [pc, #432]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 800596c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e00b      	b.n	800598c <HAL_RCC_OscConfig+0xb0>
 8005974:	4b69      	ldr	r3, [pc, #420]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a68      	ldr	r2, [pc, #416]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 800597a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	4b66      	ldr	r3, [pc, #408]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a65      	ldr	r2, [pc, #404]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800598a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d013      	beq.n	80059bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005994:	f7fe f84e 	bl	8003a34 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800599c:	f7fe f84a 	bl	8003a34 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	@ 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e207      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ae:	4b5b      	ldr	r3, [pc, #364]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0xc0>
 80059ba:	e014      	b.n	80059e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059bc:	f7fe f83a 	bl	8003a34 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c4:	f7fe f836 	bl	8003a34 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	@ 0x64
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e1f3      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059d6:	4b51      	ldr	r3, [pc, #324]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f0      	bne.n	80059c4 <HAL_RCC_OscConfig+0xe8>
 80059e2:	e000      	b.n	80059e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d063      	beq.n	8005aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059fe:	4b47      	ldr	r3, [pc, #284]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d11c      	bne.n	8005a44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0a:	4b44      	ldr	r3, [pc, #272]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d116      	bne.n	8005a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a16:	4b41      	ldr	r3, [pc, #260]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_RCC_OscConfig+0x152>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d001      	beq.n	8005a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e1c7      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4937      	ldr	r1, [pc, #220]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a42:	e03a      	b.n	8005aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d020      	beq.n	8005a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a4c:	4b34      	ldr	r3, [pc, #208]	@ (8005b20 <HAL_RCC_OscConfig+0x244>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fd ffef 	bl	8003a34 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5a:	f7fd ffeb 	bl	8003a34 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e1a8      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0f0      	beq.n	8005a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a78:	4b28      	ldr	r3, [pc, #160]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4925      	ldr	r1, [pc, #148]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]
 8005a8c:	e015      	b.n	8005aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a8e:	4b24      	ldr	r3, [pc, #144]	@ (8005b20 <HAL_RCC_OscConfig+0x244>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fd ffce 	bl	8003a34 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9c:	f7fd ffca 	bl	8003a34 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e187      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aae:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d036      	beq.n	8005b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d016      	beq.n	8005afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ace:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <HAL_RCC_OscConfig+0x248>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad4:	f7fd ffae 	bl	8003a34 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005adc:	f7fd ffaa 	bl	8003a34 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e167      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aee:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <HAL_RCC_OscConfig+0x240>)
 8005af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCC_OscConfig+0x200>
 8005afa:	e01b      	b.n	8005b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005afc:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <HAL_RCC_OscConfig+0x248>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b02:	f7fd ff97 	bl	8003a34 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b08:	e00e      	b.n	8005b28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0a:	f7fd ff93 	bl	8003a34 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d907      	bls.n	8005b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e150      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	42470000 	.word	0x42470000
 8005b24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b28:	4b88      	ldr	r3, [pc, #544]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ea      	bne.n	8005b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8097 	beq.w	8005c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b46:	4b81      	ldr	r3, [pc, #516]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	4b7d      	ldr	r3, [pc, #500]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b62:	4b7a      	ldr	r3, [pc, #488]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b72:	4b77      	ldr	r3, [pc, #476]	@ (8005d50 <HAL_RCC_OscConfig+0x474>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d118      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b7e:	4b74      	ldr	r3, [pc, #464]	@ (8005d50 <HAL_RCC_OscConfig+0x474>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a73      	ldr	r2, [pc, #460]	@ (8005d50 <HAL_RCC_OscConfig+0x474>)
 8005b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8a:	f7fd ff53 	bl	8003a34 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b92:	f7fd ff4f 	bl	8003a34 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e10c      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8005d50 <HAL_RCC_OscConfig+0x474>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d106      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x2ea>
 8005bb8:	4b64      	ldr	r3, [pc, #400]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbc:	4a63      	ldr	r2, [pc, #396]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc4:	e01c      	b.n	8005c00 <HAL_RCC_OscConfig+0x324>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d10c      	bne.n	8005be8 <HAL_RCC_OscConfig+0x30c>
 8005bce:	4b5f      	ldr	r3, [pc, #380]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bd4:	f043 0304 	orr.w	r3, r3, #4
 8005bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bda:	4b5c      	ldr	r3, [pc, #368]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bde:	4a5b      	ldr	r2, [pc, #364]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be6:	e00b      	b.n	8005c00 <HAL_RCC_OscConfig+0x324>
 8005be8:	4b58      	ldr	r3, [pc, #352]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bec:	4a57      	ldr	r2, [pc, #348]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf4:	4b55      	ldr	r3, [pc, #340]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf8:	4a54      	ldr	r2, [pc, #336]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f023 0304 	bic.w	r3, r3, #4
 8005bfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c08:	f7fd ff14 	bl	8003a34 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c10:	f7fd ff10 	bl	8003a34 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0cb      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c26:	4b49      	ldr	r3, [pc, #292]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0ee      	beq.n	8005c10 <HAL_RCC_OscConfig+0x334>
 8005c32:	e014      	b.n	8005c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c34:	f7fd fefe 	bl	8003a34 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f7fd fefa 	bl	8003a34 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0b5      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c52:	4b3e      	ldr	r3, [pc, #248]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1ee      	bne.n	8005c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d105      	bne.n	8005c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c64:	4b39      	ldr	r3, [pc, #228]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	4a38      	ldr	r2, [pc, #224]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80a1 	beq.w	8005dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c7a:	4b34      	ldr	r3, [pc, #208]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d05c      	beq.n	8005d40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d141      	bne.n	8005d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8e:	4b31      	ldr	r3, [pc, #196]	@ (8005d54 <HAL_RCC_OscConfig+0x478>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fd fece 	bl	8003a34 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fd feca 	bl	8003a34 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e087      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	4b27      	ldr	r3, [pc, #156]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f0      	bne.n	8005c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69da      	ldr	r2, [r3, #28]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd0:	085b      	lsrs	r3, r3, #1
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	061b      	lsls	r3, r3, #24
 8005cde:	491b      	ldr	r1, [pc, #108]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <HAL_RCC_OscConfig+0x478>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cea:	f7fd fea3 	bl	8003a34 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf2:	f7fd fe9f 	bl	8003a34 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e05c      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d04:	4b11      	ldr	r3, [pc, #68]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x416>
 8005d10:	e054      	b.n	8005dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d12:	4b10      	ldr	r3, [pc, #64]	@ (8005d54 <HAL_RCC_OscConfig+0x478>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fd fe8c 	bl	8003a34 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d20:	f7fd fe88 	bl	8003a34 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e045      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d32:	4b06      	ldr	r3, [pc, #24]	@ (8005d4c <HAL_RCC_OscConfig+0x470>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x444>
 8005d3e:	e03d      	b.n	8005dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d107      	bne.n	8005d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e038      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	40007000 	.word	0x40007000
 8005d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d58:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <HAL_RCC_OscConfig+0x4ec>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d028      	beq.n	8005db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d121      	bne.n	8005db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d11a      	bne.n	8005db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d88:	4013      	ands	r3, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d111      	bne.n	8005db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	3b01      	subs	r3, #1
 8005da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d107      	bne.n	8005db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40023800 	.word	0x40023800

08005dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0cc      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005de0:	4b68      	ldr	r3, [pc, #416]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d90c      	bls.n	8005e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dee:	4b65      	ldr	r3, [pc, #404]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df6:	4b63      	ldr	r3, [pc, #396]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0b8      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d020      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e20:	4b59      	ldr	r3, [pc, #356]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4a58      	ldr	r2, [pc, #352]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e38:	4b53      	ldr	r3, [pc, #332]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4a52      	ldr	r2, [pc, #328]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e44:	4b50      	ldr	r3, [pc, #320]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	494d      	ldr	r1, [pc, #308]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d044      	beq.n	8005eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d107      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6a:	4b47      	ldr	r3, [pc, #284]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d119      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e07f      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d003      	beq.n	8005e8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d107      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e06f      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e067      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eaa:	4b37      	ldr	r3, [pc, #220]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f023 0203 	bic.w	r2, r3, #3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4934      	ldr	r1, [pc, #208]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ebc:	f7fd fdba 	bl	8003a34 <HAL_GetTick>
 8005ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	e00a      	b.n	8005eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec4:	f7fd fdb6 	bl	8003a34 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e04f      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eda:	4b2b      	ldr	r3, [pc, #172]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 020c 	and.w	r2, r3, #12
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d1eb      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eec:	4b25      	ldr	r3, [pc, #148]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d20c      	bcs.n	8005f14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b22      	ldr	r3, [pc, #136]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f02:	4b20      	ldr	r3, [pc, #128]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e032      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f20:	4b19      	ldr	r3, [pc, #100]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4916      	ldr	r1, [pc, #88]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f3e:	4b12      	ldr	r3, [pc, #72]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	490e      	ldr	r1, [pc, #56]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f52:	f000 f821 	bl	8005f98 <HAL_RCC_GetSysClockFreq>
 8005f56:	4602      	mov	r2, r0
 8005f58:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	490a      	ldr	r1, [pc, #40]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005f64:	5ccb      	ldrb	r3, [r1, r3]
 8005f66:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6a:	4a09      	ldr	r2, [pc, #36]	@ (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f6e:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <HAL_RCC_ClockConfig+0x1c8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fd fd1a 	bl	80039ac <HAL_InitTick>

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40023c00 	.word	0x40023c00
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	08009fc0 	.word	0x08009fc0
 8005f90:	20000148 	.word	0x20000148
 8005f94:	2000014c 	.word	0x2000014c

08005f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b094      	sub	sp, #80	@ 0x50
 8005f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fb0:	4b79      	ldr	r3, [pc, #484]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 030c 	and.w	r3, r3, #12
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d00d      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	f200 80e1 	bhi.w	8006184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_RCC_GetSysClockFreq+0x34>
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d003      	beq.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fca:	e0db      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fcc:	4b73      	ldr	r3, [pc, #460]	@ (800619c <HAL_RCC_GetSysClockFreq+0x204>)
 8005fce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fd0:	e0db      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fd2:	4b73      	ldr	r3, [pc, #460]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fd6:	e0d8      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fe0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d063      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fee:	4b6a      	ldr	r3, [pc, #424]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	099b      	lsrs	r3, r3, #6
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ff8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006000:	633b      	str	r3, [r7, #48]	@ 0x30
 8006002:	2300      	movs	r3, #0
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
 8006006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	f04f 0000 	mov.w	r0, #0
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	0159      	lsls	r1, r3, #5
 8006018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800601c:	0150      	lsls	r0, r2, #5
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4621      	mov	r1, r4
 8006024:	1a51      	subs	r1, r2, r1
 8006026:	6139      	str	r1, [r7, #16]
 8006028:	4629      	mov	r1, r5
 800602a:	eb63 0301 	sbc.w	r3, r3, r1
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800603c:	4659      	mov	r1, fp
 800603e:	018b      	lsls	r3, r1, #6
 8006040:	4651      	mov	r1, sl
 8006042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006046:	4651      	mov	r1, sl
 8006048:	018a      	lsls	r2, r1, #6
 800604a:	4651      	mov	r1, sl
 800604c:	ebb2 0801 	subs.w	r8, r2, r1
 8006050:	4659      	mov	r1, fp
 8006052:	eb63 0901 	sbc.w	r9, r3, r1
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800606a:	4690      	mov	r8, r2
 800606c:	4699      	mov	r9, r3
 800606e:	4623      	mov	r3, r4
 8006070:	eb18 0303 	adds.w	r3, r8, r3
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	462b      	mov	r3, r5
 8006078:	eb49 0303 	adc.w	r3, r9, r3
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800608a:	4629      	mov	r1, r5
 800608c:	024b      	lsls	r3, r1, #9
 800608e:	4621      	mov	r1, r4
 8006090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006094:	4621      	mov	r1, r4
 8006096:	024a      	lsls	r2, r1, #9
 8006098:	4610      	mov	r0, r2
 800609a:	4619      	mov	r1, r3
 800609c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800609e:	2200      	movs	r2, #0
 80060a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060a8:	f7fa f8fa 	bl	80002a0 <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4613      	mov	r3, r2
 80060b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b4:	e058      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b6:	4b38      	ldr	r3, [pc, #224]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x200>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	099b      	lsrs	r3, r3, #6
 80060bc:	2200      	movs	r2, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	4611      	mov	r1, r2
 80060c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060c6:	623b      	str	r3, [r7, #32]
 80060c8:	2300      	movs	r3, #0
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80060cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060d0:	4642      	mov	r2, r8
 80060d2:	464b      	mov	r3, r9
 80060d4:	f04f 0000 	mov.w	r0, #0
 80060d8:	f04f 0100 	mov.w	r1, #0
 80060dc:	0159      	lsls	r1, r3, #5
 80060de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e2:	0150      	lsls	r0, r2, #5
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4641      	mov	r1, r8
 80060ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80060ee:	4649      	mov	r1, r9
 80060f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006108:	ebb2 040a 	subs.w	r4, r2, sl
 800610c:	eb63 050b 	sbc.w	r5, r3, fp
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	00eb      	lsls	r3, r5, #3
 800611a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800611e:	00e2      	lsls	r2, r4, #3
 8006120:	4614      	mov	r4, r2
 8006122:	461d      	mov	r5, r3
 8006124:	4643      	mov	r3, r8
 8006126:	18e3      	adds	r3, r4, r3
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	464b      	mov	r3, r9
 800612c:	eb45 0303 	adc.w	r3, r5, r3
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800613e:	4629      	mov	r1, r5
 8006140:	028b      	lsls	r3, r1, #10
 8006142:	4621      	mov	r1, r4
 8006144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006148:	4621      	mov	r1, r4
 800614a:	028a      	lsls	r2, r1, #10
 800614c:	4610      	mov	r0, r2
 800614e:	4619      	mov	r1, r3
 8006150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006152:	2200      	movs	r2, #0
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	61fa      	str	r2, [r7, #28]
 8006158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800615c:	f7fa f8a0 	bl	80002a0 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4613      	mov	r3, r2
 8006166:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006168:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x200>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	3301      	adds	r3, #1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800617a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006182:	e002      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <HAL_RCC_GetSysClockFreq+0x204>)
 8006186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800618a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800618c:	4618      	mov	r0, r3
 800618e:	3750      	adds	r7, #80	@ 0x50
 8006190:	46bd      	mov	sp, r7
 8006192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800
 800619c:	00f42400 	.word	0x00f42400
 80061a0:	007a1200 	.word	0x007a1200

080061a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a8:	4b03      	ldr	r3, [pc, #12]	@ (80061b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061aa:	681b      	ldr	r3, [r3, #0]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20000148 	.word	0x20000148

080061bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061c0:	f7ff fff0 	bl	80061a4 <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	0a9b      	lsrs	r3, r3, #10
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4903      	ldr	r1, [pc, #12]	@ (80061e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40023800 	.word	0x40023800
 80061e0:	08009fd0 	.word	0x08009fd0

080061e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006214:	2b00      	cmp	r3, #0
 8006216:	d075      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006218:	4b91      	ldr	r3, [pc, #580]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800621e:	f7fd fc09 	bl	8003a34 <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006224:	e008      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006226:	f7fd fc05 	bl	8003a34 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e189      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006238:	4b8a      	ldr	r3, [pc, #552]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f0      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d009      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	019a      	lsls	r2, r3, #6
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	071b      	lsls	r3, r3, #28
 800625c:	4981      	ldr	r1, [pc, #516]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01f      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006270:	4b7c      	ldr	r3, [pc, #496]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006276:	0f1b      	lsrs	r3, r3, #28
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	019a      	lsls	r2, r3, #6
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	061b      	lsls	r3, r3, #24
 800628a:	431a      	orrs	r2, r3
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	071b      	lsls	r3, r3, #28
 8006290:	4974      	ldr	r1, [pc, #464]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006298:	4b72      	ldr	r3, [pc, #456]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800629a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800629e:	f023 021f 	bic.w	r2, r3, #31
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	496e      	ldr	r1, [pc, #440]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	019a      	lsls	r2, r3, #6
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	061b      	lsls	r3, r3, #24
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	071b      	lsls	r3, r3, #28
 80062d0:	4964      	ldr	r1, [pc, #400]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062d8:	4b61      	ldr	r3, [pc, #388]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062de:	f7fd fba9 	bl	8003a34 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062e4:	e008      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062e6:	f7fd fba5 	bl	8003a34 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e129      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0f0      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006318:	2b00      	cmp	r3, #0
 800631a:	d079      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800631c:	4b52      	ldr	r3, [pc, #328]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006322:	f7fd fb87 	bl	8003a34 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006328:	e008      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800632a:	f7fd fb83 	bl	8003a34 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e107      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800633c:	4b49      	ldr	r3, [pc, #292]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006348:	d0ef      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	d020      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006356:	4b43      	ldr	r3, [pc, #268]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	0f1b      	lsrs	r3, r3, #28
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	019a      	lsls	r2, r3, #6
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	061b      	lsls	r3, r3, #24
 8006370:	431a      	orrs	r2, r3
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	071b      	lsls	r3, r3, #28
 8006376:	493b      	ldr	r1, [pc, #236]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006378:	4313      	orrs	r3, r2
 800637a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800637e:	4b39      	ldr	r3, [pc, #228]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006384:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	3b01      	subs	r3, #1
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	4934      	ldr	r1, [pc, #208]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01e      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063a4:	4b2f      	ldr	r3, [pc, #188]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063aa:	0e1b      	lsrs	r3, r3, #24
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	019a      	lsls	r2, r3, #6
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	071b      	lsls	r3, r3, #28
 80063c4:	4927      	ldr	r1, [pc, #156]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80063cc:	4b25      	ldr	r3, [pc, #148]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063da:	4922      	ldr	r1, [pc, #136]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063e2:	4b21      	ldr	r3, [pc, #132]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063e8:	f7fd fb24 	bl	8003a34 <HAL_GetTick>
 80063ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063f0:	f7fd fb20 	bl	8003a34 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e0a4      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006402:	4b18      	ldr	r3, [pc, #96]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800640a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800640e:	d1ef      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 808b 	beq.w	8006534 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	4a0f      	ldr	r2, [pc, #60]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800642c:	6413      	str	r3, [r2, #64]	@ 0x40
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800643a:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a0b      	ldr	r2, [pc, #44]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006444:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006446:	f7fd faf5 	bl	8003a34 <HAL_GetTick>
 800644a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800644c:	e010      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644e:	f7fd faf1 	bl	8003a34 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d909      	bls.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e075      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006460:	42470068 	.word	0x42470068
 8006464:	40023800 	.word	0x40023800
 8006468:	42470070 	.word	0x42470070
 800646c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006470:	4b38      	ldr	r3, [pc, #224]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0e8      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800647c:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006484:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d02f      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x308>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	429a      	cmp	r2, r3
 8006498:	d028      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800649a:	4b2f      	ldr	r3, [pc, #188]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800649c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064a4:	4b2d      	ldr	r3, [pc, #180]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064aa:	4b2c      	ldr	r3, [pc, #176]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064b0:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064b6:	4b28      	ldr	r3, [pc, #160]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d114      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064c2:	f7fd fab7 	bl	8003a34 <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c8:	e00a      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fd fab3 	bl	8003a34 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e035      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ee      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f8:	d10d      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80064fa:	4b17      	ldr	r3, [pc, #92]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006506:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800650a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800650e:	4912      	ldr	r1, [pc, #72]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006510:	4313      	orrs	r3, r2
 8006512:	608b      	str	r3, [r1, #8]
 8006514:	e005      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006516:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	4a0f      	ldr	r2, [pc, #60]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800651c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006520:	6093      	str	r3, [r2, #8]
 8006522:	4b0d      	ldr	r3, [pc, #52]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006524:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652e:	490a      	ldr	r1, [pc, #40]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006530:	4313      	orrs	r3, r2
 8006532:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006546:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006548:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40007000 	.word	0x40007000
 8006558:	40023800 	.word	0x40023800
 800655c:	42470e40 	.word	0x42470e40
 8006560:	424711e0 	.word	0x424711e0

08006564 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e01c      	b.n	80065b0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	795b      	ldrb	r3, [r3, #5]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d105      	bne.n	800658c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fc fd2a 	bl	8002fe0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0204 	orr.w	r2, r2, #4
 80065a0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	791b      	ldrb	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e044      	b.n	800665c <HAL_RNG_GenerateRandomNumber+0xa4>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	795b      	ldrb	r3, [r3, #5]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d133      	bne.n	800664a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065e8:	f7fd fa24 	bl	8003a34 <HAL_GetTick>
 80065ec:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80065ee:	e018      	b.n	8006622 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80065f0:	f7fd fa20 	bl	8003a34 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d911      	bls.n	8006622 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b01      	cmp	r3, #1
 800660a:	d00a      	beq.n	8006622 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e01c      	b.n	800665c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d1df      	bne.n	80065f0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	715a      	strb	r2, [r3, #5]
 8006648:	e004      	b.n	8006654 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2204      	movs	r2, #4
 800664e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	711a      	strb	r2, [r3, #4]

  return status;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e07b      	b.n	800676e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d108      	bne.n	8006690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006686:	d009      	beq.n	800669c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	61da      	str	r2, [r3, #28]
 800668e:	e005      	b.n	800669c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fc fcb4 	bl	8003024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006720:	ea42 0103 	orr.w	r1, r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006728:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	f003 0104 	and.w	r1, r3, #4
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006742:	f003 0210 	and.w	r2, r3, #16
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800675c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e01a      	b.n	80067be <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800679e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7fc fc87 	bl	80030b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b088      	sub	sp, #32
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d6:	f7fd f92d 	bl	8003a34 <HAL_GetTick>
 80067da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d001      	beq.n	80067f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
 80067ee:	e12a      	b.n	8006a46 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <HAL_SPI_Transmit+0x36>
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e122      	b.n	8006a46 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_SPI_Transmit+0x48>
 800680a:	2302      	movs	r3, #2
 800680c:	e11b      	b.n	8006a46 <HAL_SPI_Transmit+0x280>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2203      	movs	r2, #3
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800685c:	d10f      	bne.n	800687e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800686c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800687c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006888:	2b40      	cmp	r3, #64	@ 0x40
 800688a:	d007      	beq.n	800689c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800689a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068a4:	d152      	bne.n	800694c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_SPI_Transmit+0xee>
 80068ae:	8b7b      	ldrh	r3, [r7, #26]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d145      	bne.n	8006940 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068d8:	e032      	b.n	8006940 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d112      	bne.n	800690e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	881a      	ldrh	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f8:	1c9a      	adds	r2, r3, #2
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800690c:	e018      	b.n	8006940 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800690e:	f7fd f891 	bl	8003a34 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d803      	bhi.n	8006926 <HAL_SPI_Transmit+0x160>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006924:	d102      	bne.n	800692c <HAL_SPI_Transmit+0x166>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d109      	bne.n	8006940 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e082      	b.n	8006a46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1c7      	bne.n	80068da <HAL_SPI_Transmit+0x114>
 800694a:	e053      	b.n	80069f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_SPI_Transmit+0x194>
 8006954:	8b7b      	ldrh	r3, [r7, #26]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d147      	bne.n	80069ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	7812      	ldrb	r2, [r2, #0]
 8006966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006980:	e033      	b.n	80069ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b02      	cmp	r3, #2
 800698e:	d113      	bne.n	80069b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069b6:	e018      	b.n	80069ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069b8:	f7fd f83c 	bl	8003a34 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d803      	bhi.n	80069d0 <HAL_SPI_Transmit+0x20a>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ce:	d102      	bne.n	80069d6 <HAL_SPI_Transmit+0x210>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e02d      	b.n	8006a46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1c6      	bne.n	8006982 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f8bf 	bl	8006b7c <SPI_EndRxTxTransaction>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
  }
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3720      	adds	r7, #32
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a5c:	b2db      	uxtb	r3, r3
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a7c:	f7fc ffda 	bl	8003a34 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	4413      	add	r3, r2
 8006a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a8c:	f7fc ffd2 	bl	8003a34 <HAL_GetTick>
 8006a90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a92:	4b39      	ldr	r3, [pc, #228]	@ (8006b78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	015b      	lsls	r3, r3, #5
 8006a98:	0d1b      	lsrs	r3, r3, #20
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aa2:	e054      	b.n	8006b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aaa:	d050      	beq.n	8006b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aac:	f7fc ffc2 	bl	8003a34 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d902      	bls.n	8006ac2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d13d      	bne.n	8006b3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ada:	d111      	bne.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ae4:	d004      	beq.n	8006af0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aee:	d107      	bne.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b08:	d10f      	bne.n	8006b2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e017      	b.n	8006b6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4013      	ands	r3, r2
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	bf0c      	ite	eq
 8006b5e:	2301      	moveq	r3, #1
 8006b60:	2300      	movne	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d19b      	bne.n	8006aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000148 	.word	0x20000148

08006b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2102      	movs	r1, #2
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff ff6a 	bl	8006a6c <SPI_WaitFlagStateUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e032      	b.n	8006c14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bae:	4b1b      	ldr	r3, [pc, #108]	@ (8006c1c <SPI_EndRxTxTransaction+0xa0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c20 <SPI_EndRxTxTransaction+0xa4>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	0d5b      	lsrs	r3, r3, #21
 8006bba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bcc:	d112      	bne.n	8006bf4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2180      	movs	r1, #128	@ 0x80
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff ff47 	bl	8006a6c <SPI_WaitFlagStateUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d016      	beq.n	8006c12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be8:	f043 0220 	orr.w	r2, r3, #32
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e00f      	b.n	8006c14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0a:	2b80      	cmp	r3, #128	@ 0x80
 8006c0c:	d0f2      	beq.n	8006bf4 <SPI_EndRxTxTransaction+0x78>
 8006c0e:	e000      	b.n	8006c12 <SPI_EndRxTxTransaction+0x96>
        break;
 8006c10:	bf00      	nop
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000148 	.word	0x20000148
 8006c20:	165e9f81 	.word	0x165e9f81

08006c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e041      	b.n	8006cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fc fa50 	bl	80030f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f000 f95e 	bl	8006f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d001      	beq.n	8006cdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e046      	b.n	8006d6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a23      	ldr	r2, [pc, #140]	@ (8006d78 <HAL_TIM_Base_Start+0xb4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d022      	beq.n	8006d34 <HAL_TIM_Base_Start+0x70>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf6:	d01d      	beq.n	8006d34 <HAL_TIM_Base_Start+0x70>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d7c <HAL_TIM_Base_Start+0xb8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d018      	beq.n	8006d34 <HAL_TIM_Base_Start+0x70>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	@ (8006d80 <HAL_TIM_Base_Start+0xbc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <HAL_TIM_Base_Start+0x70>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1c      	ldr	r2, [pc, #112]	@ (8006d84 <HAL_TIM_Base_Start+0xc0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_TIM_Base_Start+0x70>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <HAL_TIM_Base_Start+0xc4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <HAL_TIM_Base_Start+0x70>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a19      	ldr	r2, [pc, #100]	@ (8006d8c <HAL_TIM_Base_Start+0xc8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIM_Base_Start+0x70>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a18      	ldr	r2, [pc, #96]	@ (8006d90 <HAL_TIM_Base_Start+0xcc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d111      	bne.n	8006d58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b06      	cmp	r3, #6
 8006d44:	d010      	beq.n	8006d68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	e007      	b.n	8006d68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40010000 	.word	0x40010000
 8006d7c:	40000400 	.word	0x40000400
 8006d80:	40000800 	.word	0x40000800
 8006d84:	40000c00 	.word	0x40000c00
 8006d88:	40010400 	.word	0x40010400
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40001800 	.word	0x40001800

08006d94 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <HAL_TIM_Base_Stop+0x38>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	f240 4344 	movw	r3, #1092	@ 0x444
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_Base_Stop+0x38>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0201 	bic.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d001      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e04e      	b.n	8006e9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a23      	ldr	r2, [pc, #140]	@ (8006ea8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d022      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x80>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e26:	d01d      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x80>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006eac <HAL_TIM_Base_Start_IT+0xc8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d018      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x80>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d013      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x80>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00e      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x80>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d009      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x80>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a19      	ldr	r2, [pc, #100]	@ (8006ebc <HAL_TIM_Base_Start_IT+0xd8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d004      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x80>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a18      	ldr	r2, [pc, #96]	@ (8006ec0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d111      	bne.n	8006e88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b06      	cmp	r3, #6
 8006e74:	d010      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0201 	orr.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e86:	e007      	b.n	8006e98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40010400 	.word	0x40010400
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	40001800 	.word	0x40001800

08006ec4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0201 	bic.w	r2, r2, #1
 8006eda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6a1a      	ldr	r2, [r3, #32]
 8006ee2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10f      	bne.n	8006f0c <HAL_TIM_Base_Stop_IT+0x48>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a1a      	ldr	r2, [r3, #32]
 8006ef2:	f240 4344 	movw	r3, #1092	@ 0x444
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d107      	bne.n	8006f0c <HAL_TIM_Base_Stop_IT+0x48>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a46      	ldr	r2, [pc, #280]	@ (8007050 <TIM_Base_SetConfig+0x12c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f42:	d00f      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a43      	ldr	r2, [pc, #268]	@ (8007054 <TIM_Base_SetConfig+0x130>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a42      	ldr	r2, [pc, #264]	@ (8007058 <TIM_Base_SetConfig+0x134>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a41      	ldr	r2, [pc, #260]	@ (800705c <TIM_Base_SetConfig+0x138>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a40      	ldr	r2, [pc, #256]	@ (8007060 <TIM_Base_SetConfig+0x13c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d108      	bne.n	8006f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a35      	ldr	r2, [pc, #212]	@ (8007050 <TIM_Base_SetConfig+0x12c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d02b      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f84:	d027      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a32      	ldr	r2, [pc, #200]	@ (8007054 <TIM_Base_SetConfig+0x130>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d023      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a31      	ldr	r2, [pc, #196]	@ (8007058 <TIM_Base_SetConfig+0x134>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01f      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a30      	ldr	r2, [pc, #192]	@ (800705c <TIM_Base_SetConfig+0x138>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01b      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8007060 <TIM_Base_SetConfig+0x13c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d017      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8007064 <TIM_Base_SetConfig+0x140>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8007068 <TIM_Base_SetConfig+0x144>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00f      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800706c <TIM_Base_SetConfig+0x148>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8007070 <TIM_Base_SetConfig+0x14c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8007074 <TIM_Base_SetConfig+0x150>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a29      	ldr	r2, [pc, #164]	@ (8007078 <TIM_Base_SetConfig+0x154>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a10      	ldr	r2, [pc, #64]	@ (8007050 <TIM_Base_SetConfig+0x12c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_Base_SetConfig+0xf8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a12      	ldr	r2, [pc, #72]	@ (8007060 <TIM_Base_SetConfig+0x13c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d103      	bne.n	8007024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d105      	bne.n	8007042 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f023 0201 	bic.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	611a      	str	r2, [r3, #16]
  }
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40010400 	.word	0x40010400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800
 8007070:	40001800 	.word	0x40001800
 8007074:	40001c00 	.word	0x40001c00
 8007078:	40002000 	.word	0x40002000

0800707c <findslot>:
 800707c:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <findslot+0x2c>)
 800707e:	b510      	push	{r4, lr}
 8007080:	4604      	mov	r4, r0
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	b118      	cbz	r0, 800708e <findslot+0x12>
 8007086:	6a03      	ldr	r3, [r0, #32]
 8007088:	b90b      	cbnz	r3, 800708e <findslot+0x12>
 800708a:	f000 fb33 	bl	80076f4 <__sinit>
 800708e:	2c13      	cmp	r4, #19
 8007090:	d807      	bhi.n	80070a2 <findslot+0x26>
 8007092:	4806      	ldr	r0, [pc, #24]	@ (80070ac <findslot+0x30>)
 8007094:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007098:	3201      	adds	r2, #1
 800709a:	d002      	beq.n	80070a2 <findslot+0x26>
 800709c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80070a0:	bd10      	pop	{r4, pc}
 80070a2:	2000      	movs	r0, #0
 80070a4:	e7fc      	b.n	80070a0 <findslot+0x24>
 80070a6:	bf00      	nop
 80070a8:	20000168 	.word	0x20000168
 80070ac:	20025c70 	.word	0x20025c70

080070b0 <error>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	4604      	mov	r4, r0
 80070b4:	f000 fbb0 	bl	8007818 <__errno>
 80070b8:	2613      	movs	r6, #19
 80070ba:	4605      	mov	r5, r0
 80070bc:	2700      	movs	r7, #0
 80070be:	4630      	mov	r0, r6
 80070c0:	4639      	mov	r1, r7
 80070c2:	beab      	bkpt	0x00ab
 80070c4:	4606      	mov	r6, r0
 80070c6:	602e      	str	r6, [r5, #0]
 80070c8:	4620      	mov	r0, r4
 80070ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070cc <checkerror>:
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d101      	bne.n	80070d4 <checkerror+0x8>
 80070d0:	f7ff bfee 	b.w	80070b0 <error>
 80070d4:	4770      	bx	lr

080070d6 <_swiread>:
 80070d6:	b530      	push	{r4, r5, lr}
 80070d8:	b085      	sub	sp, #20
 80070da:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80070de:	9203      	str	r2, [sp, #12]
 80070e0:	2406      	movs	r4, #6
 80070e2:	ad01      	add	r5, sp, #4
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	beab      	bkpt	0x00ab
 80070ea:	4604      	mov	r4, r0
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7ff ffed 	bl	80070cc <checkerror>
 80070f2:	b005      	add	sp, #20
 80070f4:	bd30      	pop	{r4, r5, pc}

080070f6 <_read>:
 80070f6:	b570      	push	{r4, r5, r6, lr}
 80070f8:	460e      	mov	r6, r1
 80070fa:	4614      	mov	r4, r2
 80070fc:	f7ff ffbe 	bl	800707c <findslot>
 8007100:	4605      	mov	r5, r0
 8007102:	b930      	cbnz	r0, 8007112 <_read+0x1c>
 8007104:	f000 fb88 	bl	8007818 <__errno>
 8007108:	2309      	movs	r3, #9
 800710a:	6003      	str	r3, [r0, #0]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007110:	bd70      	pop	{r4, r5, r6, pc}
 8007112:	6800      	ldr	r0, [r0, #0]
 8007114:	4622      	mov	r2, r4
 8007116:	4631      	mov	r1, r6
 8007118:	f7ff ffdd 	bl	80070d6 <_swiread>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d0f5      	beq.n	800710c <_read+0x16>
 8007120:	686b      	ldr	r3, [r5, #4]
 8007122:	1a20      	subs	r0, r4, r0
 8007124:	4403      	add	r3, r0
 8007126:	606b      	str	r3, [r5, #4]
 8007128:	e7f2      	b.n	8007110 <_read+0x1a>

0800712a <_swilseek>:
 800712a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800712c:	460c      	mov	r4, r1
 800712e:	4616      	mov	r6, r2
 8007130:	f7ff ffa4 	bl	800707c <findslot>
 8007134:	4605      	mov	r5, r0
 8007136:	b940      	cbnz	r0, 800714a <_swilseek+0x20>
 8007138:	f000 fb6e 	bl	8007818 <__errno>
 800713c:	2309      	movs	r3, #9
 800713e:	6003      	str	r3, [r0, #0]
 8007140:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007144:	4620      	mov	r0, r4
 8007146:	b003      	add	sp, #12
 8007148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714a:	2e02      	cmp	r6, #2
 800714c:	d903      	bls.n	8007156 <_swilseek+0x2c>
 800714e:	f000 fb63 	bl	8007818 <__errno>
 8007152:	2316      	movs	r3, #22
 8007154:	e7f3      	b.n	800713e <_swilseek+0x14>
 8007156:	2e01      	cmp	r6, #1
 8007158:	d112      	bne.n	8007180 <_swilseek+0x56>
 800715a:	6843      	ldr	r3, [r0, #4]
 800715c:	18e4      	adds	r4, r4, r3
 800715e:	d4f6      	bmi.n	800714e <_swilseek+0x24>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	260a      	movs	r6, #10
 8007164:	e9cd 3400 	strd	r3, r4, [sp]
 8007168:	466f      	mov	r7, sp
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	beab      	bkpt	0x00ab
 8007170:	4606      	mov	r6, r0
 8007172:	4630      	mov	r0, r6
 8007174:	f7ff ffaa 	bl	80070cc <checkerror>
 8007178:	2800      	cmp	r0, #0
 800717a:	dbe1      	blt.n	8007140 <_swilseek+0x16>
 800717c:	606c      	str	r4, [r5, #4]
 800717e:	e7e1      	b.n	8007144 <_swilseek+0x1a>
 8007180:	2e02      	cmp	r6, #2
 8007182:	6803      	ldr	r3, [r0, #0]
 8007184:	d1ec      	bne.n	8007160 <_swilseek+0x36>
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	260c      	movs	r6, #12
 800718a:	466f      	mov	r7, sp
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	beab      	bkpt	0x00ab
 8007192:	4606      	mov	r6, r0
 8007194:	4630      	mov	r0, r6
 8007196:	f7ff ff99 	bl	80070cc <checkerror>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d0d0      	beq.n	8007140 <_swilseek+0x16>
 800719e:	4404      	add	r4, r0
 80071a0:	e7de      	b.n	8007160 <_swilseek+0x36>

080071a2 <_lseek>:
 80071a2:	f7ff bfc2 	b.w	800712a <_swilseek>

080071a6 <_swiwrite>:
 80071a6:	b530      	push	{r4, r5, lr}
 80071a8:	b085      	sub	sp, #20
 80071aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80071ae:	9203      	str	r2, [sp, #12]
 80071b0:	2405      	movs	r4, #5
 80071b2:	ad01      	add	r5, sp, #4
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	beab      	bkpt	0x00ab
 80071ba:	4604      	mov	r4, r0
 80071bc:	4620      	mov	r0, r4
 80071be:	f7ff ff85 	bl	80070cc <checkerror>
 80071c2:	b005      	add	sp, #20
 80071c4:	bd30      	pop	{r4, r5, pc}

080071c6 <_write>:
 80071c6:	b570      	push	{r4, r5, r6, lr}
 80071c8:	460e      	mov	r6, r1
 80071ca:	4615      	mov	r5, r2
 80071cc:	f7ff ff56 	bl	800707c <findslot>
 80071d0:	4604      	mov	r4, r0
 80071d2:	b930      	cbnz	r0, 80071e2 <_write+0x1c>
 80071d4:	f000 fb20 	bl	8007818 <__errno>
 80071d8:	2309      	movs	r3, #9
 80071da:	6003      	str	r3, [r0, #0]
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	6800      	ldr	r0, [r0, #0]
 80071e4:	462a      	mov	r2, r5
 80071e6:	4631      	mov	r1, r6
 80071e8:	f7ff ffdd 	bl	80071a6 <_swiwrite>
 80071ec:	1e03      	subs	r3, r0, #0
 80071ee:	dbf5      	blt.n	80071dc <_write+0x16>
 80071f0:	6862      	ldr	r2, [r4, #4]
 80071f2:	1ae8      	subs	r0, r5, r3
 80071f4:	4402      	add	r2, r0
 80071f6:	42ab      	cmp	r3, r5
 80071f8:	6062      	str	r2, [r4, #4]
 80071fa:	d1f1      	bne.n	80071e0 <_write+0x1a>
 80071fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007200:	2000      	movs	r0, #0
 8007202:	f7ff bf55 	b.w	80070b0 <error>

08007206 <_swiclose>:
 8007206:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007208:	2402      	movs	r4, #2
 800720a:	9001      	str	r0, [sp, #4]
 800720c:	ad01      	add	r5, sp, #4
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	beab      	bkpt	0x00ab
 8007214:	4604      	mov	r4, r0
 8007216:	4620      	mov	r0, r4
 8007218:	f7ff ff58 	bl	80070cc <checkerror>
 800721c:	b003      	add	sp, #12
 800721e:	bd30      	pop	{r4, r5, pc}

08007220 <_close>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4605      	mov	r5, r0
 8007224:	f7ff ff2a 	bl	800707c <findslot>
 8007228:	4604      	mov	r4, r0
 800722a:	b930      	cbnz	r0, 800723a <_close+0x1a>
 800722c:	f000 faf4 	bl	8007818 <__errno>
 8007230:	2309      	movs	r3, #9
 8007232:	6003      	str	r3, [r0, #0]
 8007234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007238:	bd38      	pop	{r3, r4, r5, pc}
 800723a:	3d01      	subs	r5, #1
 800723c:	2d01      	cmp	r5, #1
 800723e:	d809      	bhi.n	8007254 <_close+0x34>
 8007240:	4b07      	ldr	r3, [pc, #28]	@ (8007260 <_close+0x40>)
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	d104      	bne.n	8007254 <_close+0x34>
 800724a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	2000      	movs	r0, #0
 8007252:	e7f1      	b.n	8007238 <_close+0x18>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	f7ff ffd6 	bl	8007206 <_swiclose>
 800725a:	2800      	cmp	r0, #0
 800725c:	d0f5      	beq.n	800724a <_close+0x2a>
 800725e:	e7eb      	b.n	8007238 <_close+0x18>
 8007260:	20025c70 	.word	0x20025c70

08007264 <_swistat>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	f7ff ff08 	bl	800707c <findslot>
 800726c:	4605      	mov	r5, r0
 800726e:	b930      	cbnz	r0, 800727e <_swistat+0x1a>
 8007270:	f000 fad2 	bl	8007818 <__errno>
 8007274:	2309      	movs	r3, #9
 8007276:	6003      	str	r3, [r0, #0]
 8007278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800727c:	bd70      	pop	{r4, r5, r6, pc}
 800727e:	6863      	ldr	r3, [r4, #4]
 8007280:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800728a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800728c:	260c      	movs	r6, #12
 800728e:	4630      	mov	r0, r6
 8007290:	4629      	mov	r1, r5
 8007292:	beab      	bkpt	0x00ab
 8007294:	4605      	mov	r5, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f7ff ff18 	bl	80070cc <checkerror>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d0eb      	beq.n	8007278 <_swistat+0x14>
 80072a0:	6120      	str	r0, [r4, #16]
 80072a2:	2000      	movs	r0, #0
 80072a4:	e7ea      	b.n	800727c <_swistat+0x18>

080072a6 <_fstat>:
 80072a6:	460b      	mov	r3, r1
 80072a8:	b510      	push	{r4, lr}
 80072aa:	2100      	movs	r1, #0
 80072ac:	4604      	mov	r4, r0
 80072ae:	2258      	movs	r2, #88	@ 0x58
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 faa9 	bl	8007808 <memset>
 80072b6:	4601      	mov	r1, r0
 80072b8:	4620      	mov	r0, r4
 80072ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072be:	f7ff bfd1 	b.w	8007264 <_swistat>

080072c2 <_stat>:
 80072c2:	b538      	push	{r3, r4, r5, lr}
 80072c4:	460d      	mov	r5, r1
 80072c6:	4604      	mov	r4, r0
 80072c8:	2258      	movs	r2, #88	@ 0x58
 80072ca:	2100      	movs	r1, #0
 80072cc:	4628      	mov	r0, r5
 80072ce:	f000 fa9b 	bl	8007808 <memset>
 80072d2:	4620      	mov	r0, r4
 80072d4:	2100      	movs	r1, #0
 80072d6:	f000 f811 	bl	80072fc <_swiopen>
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	4604      	mov	r4, r0
 80072de:	d00b      	beq.n	80072f8 <_stat+0x36>
 80072e0:	686b      	ldr	r3, [r5, #4]
 80072e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072e6:	606b      	str	r3, [r5, #4]
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7ff ffbb 	bl	8007264 <_swistat>
 80072ee:	4605      	mov	r5, r0
 80072f0:	4620      	mov	r0, r4
 80072f2:	f7ff ff95 	bl	8007220 <_close>
 80072f6:	462c      	mov	r4, r5
 80072f8:	4620      	mov	r0, r4
 80072fa:	bd38      	pop	{r3, r4, r5, pc}

080072fc <_swiopen>:
 80072fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007300:	4f29      	ldr	r7, [pc, #164]	@ (80073a8 <_swiopen+0xac>)
 8007302:	b096      	sub	sp, #88	@ 0x58
 8007304:	4682      	mov	sl, r0
 8007306:	460e      	mov	r6, r1
 8007308:	2400      	movs	r4, #0
 800730a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800730e:	3301      	adds	r3, #1
 8007310:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007314:	d00c      	beq.n	8007330 <_swiopen+0x34>
 8007316:	3401      	adds	r4, #1
 8007318:	2c14      	cmp	r4, #20
 800731a:	d1f6      	bne.n	800730a <_swiopen+0xe>
 800731c:	f000 fa7c 	bl	8007818 <__errno>
 8007320:	2318      	movs	r3, #24
 8007322:	6003      	str	r3, [r0, #0]
 8007324:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007328:	4620      	mov	r0, r4
 800732a:	b016      	add	sp, #88	@ 0x58
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007334:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007338:	46e9      	mov	r9, sp
 800733a:	d109      	bne.n	8007350 <_swiopen+0x54>
 800733c:	4649      	mov	r1, r9
 800733e:	4650      	mov	r0, sl
 8007340:	f7ff ffbf 	bl	80072c2 <_stat>
 8007344:	3001      	adds	r0, #1
 8007346:	d003      	beq.n	8007350 <_swiopen+0x54>
 8007348:	f000 fa66 	bl	8007818 <__errno>
 800734c:	2311      	movs	r3, #17
 800734e:	e7e8      	b.n	8007322 <_swiopen+0x26>
 8007350:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007354:	f240 6301 	movw	r3, #1537	@ 0x601
 8007358:	07b2      	lsls	r2, r6, #30
 800735a:	bf48      	it	mi
 800735c:	f045 0502 	orrmi.w	r5, r5, #2
 8007360:	421e      	tst	r6, r3
 8007362:	bf18      	it	ne
 8007364:	f045 0504 	orrne.w	r5, r5, #4
 8007368:	0733      	lsls	r3, r6, #28
 800736a:	bf48      	it	mi
 800736c:	f025 0504 	bicmi.w	r5, r5, #4
 8007370:	4650      	mov	r0, sl
 8007372:	bf48      	it	mi
 8007374:	f045 0508 	orrmi.w	r5, r5, #8
 8007378:	f8cd a000 	str.w	sl, [sp]
 800737c:	f7f8 ff38 	bl	80001f0 <strlen>
 8007380:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007384:	2501      	movs	r5, #1
 8007386:	4628      	mov	r0, r5
 8007388:	4649      	mov	r1, r9
 800738a:	beab      	bkpt	0x00ab
 800738c:	4605      	mov	r5, r0
 800738e:	2d00      	cmp	r5, #0
 8007390:	db05      	blt.n	800739e <_swiopen+0xa2>
 8007392:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007396:	4447      	add	r7, r8
 8007398:	2300      	movs	r3, #0
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	e7c4      	b.n	8007328 <_swiopen+0x2c>
 800739e:	4628      	mov	r0, r5
 80073a0:	f7ff fe86 	bl	80070b0 <error>
 80073a4:	4604      	mov	r4, r0
 80073a6:	e7bf      	b.n	8007328 <_swiopen+0x2c>
 80073a8:	20025c70 	.word	0x20025c70

080073ac <_get_semihosting_exts>:
 80073ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	4606      	mov	r6, r0
 80073b2:	460f      	mov	r7, r1
 80073b4:	4829      	ldr	r0, [pc, #164]	@ (800745c <_get_semihosting_exts+0xb0>)
 80073b6:	2100      	movs	r1, #0
 80073b8:	4615      	mov	r5, r2
 80073ba:	f7ff ff9f 	bl	80072fc <_swiopen>
 80073be:	462a      	mov	r2, r5
 80073c0:	4604      	mov	r4, r0
 80073c2:	2100      	movs	r1, #0
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 fa1f 	bl	8007808 <memset>
 80073ca:	1c63      	adds	r3, r4, #1
 80073cc:	d014      	beq.n	80073f8 <_get_semihosting_exts+0x4c>
 80073ce:	4620      	mov	r0, r4
 80073d0:	f7ff fe54 	bl	800707c <findslot>
 80073d4:	f04f 080c 	mov.w	r8, #12
 80073d8:	4681      	mov	r9, r0
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	beab      	bkpt	0x00ab
 80073e0:	4680      	mov	r8, r0
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7ff fe72 	bl	80070cc <checkerror>
 80073e8:	2803      	cmp	r0, #3
 80073ea:	dd02      	ble.n	80073f2 <_get_semihosting_exts+0x46>
 80073ec:	1ec3      	subs	r3, r0, #3
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	dc07      	bgt.n	8007402 <_get_semihosting_exts+0x56>
 80073f2:	4620      	mov	r0, r4
 80073f4:	f7ff ff14 	bl	8007220 <_close>
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073fc:	b003      	add	sp, #12
 80073fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007402:	2204      	movs	r2, #4
 8007404:	eb0d 0102 	add.w	r1, sp, r2
 8007408:	4620      	mov	r0, r4
 800740a:	f7ff fe74 	bl	80070f6 <_read>
 800740e:	2803      	cmp	r0, #3
 8007410:	ddef      	ble.n	80073f2 <_get_semihosting_exts+0x46>
 8007412:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007416:	2b53      	cmp	r3, #83	@ 0x53
 8007418:	d1eb      	bne.n	80073f2 <_get_semihosting_exts+0x46>
 800741a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800741e:	2b48      	cmp	r3, #72	@ 0x48
 8007420:	d1e7      	bne.n	80073f2 <_get_semihosting_exts+0x46>
 8007422:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007426:	2b46      	cmp	r3, #70	@ 0x46
 8007428:	d1e3      	bne.n	80073f2 <_get_semihosting_exts+0x46>
 800742a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800742e:	2b42      	cmp	r3, #66	@ 0x42
 8007430:	d1df      	bne.n	80073f2 <_get_semihosting_exts+0x46>
 8007432:	2201      	movs	r2, #1
 8007434:	4639      	mov	r1, r7
 8007436:	4620      	mov	r0, r4
 8007438:	f7ff fe77 	bl	800712a <_swilseek>
 800743c:	2800      	cmp	r0, #0
 800743e:	dbd8      	blt.n	80073f2 <_get_semihosting_exts+0x46>
 8007440:	462a      	mov	r2, r5
 8007442:	4631      	mov	r1, r6
 8007444:	4620      	mov	r0, r4
 8007446:	f7ff fe56 	bl	80070f6 <_read>
 800744a:	4605      	mov	r5, r0
 800744c:	4620      	mov	r0, r4
 800744e:	f7ff fee7 	bl	8007220 <_close>
 8007452:	4628      	mov	r0, r5
 8007454:	f7ff fe3a 	bl	80070cc <checkerror>
 8007458:	e7d0      	b.n	80073fc <_get_semihosting_exts+0x50>
 800745a:	bf00      	nop
 800745c:	08009fd8 	.word	0x08009fd8

08007460 <initialise_semihosting_exts>:
 8007460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007462:	4d0a      	ldr	r5, [pc, #40]	@ (800748c <initialise_semihosting_exts+0x2c>)
 8007464:	4c0a      	ldr	r4, [pc, #40]	@ (8007490 <initialise_semihosting_exts+0x30>)
 8007466:	2100      	movs	r1, #0
 8007468:	2201      	movs	r2, #1
 800746a:	a801      	add	r0, sp, #4
 800746c:	6029      	str	r1, [r5, #0]
 800746e:	6022      	str	r2, [r4, #0]
 8007470:	f7ff ff9c 	bl	80073ac <_get_semihosting_exts>
 8007474:	2800      	cmp	r0, #0
 8007476:	dd07      	ble.n	8007488 <initialise_semihosting_exts+0x28>
 8007478:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800747c:	f003 0201 	and.w	r2, r3, #1
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	602a      	str	r2, [r5, #0]
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	b003      	add	sp, #12
 800748a:	bd30      	pop	{r4, r5, pc}
 800748c:	20000158 	.word	0x20000158
 8007490:	20000154 	.word	0x20000154

08007494 <_has_ext_stdout_stderr>:
 8007494:	b510      	push	{r4, lr}
 8007496:	4c04      	ldr	r4, [pc, #16]	@ (80074a8 <_has_ext_stdout_stderr+0x14>)
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da01      	bge.n	80074a2 <_has_ext_stdout_stderr+0xe>
 800749e:	f7ff ffdf 	bl	8007460 <initialise_semihosting_exts>
 80074a2:	6820      	ldr	r0, [r4, #0]
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	bf00      	nop
 80074a8:	20000154 	.word	0x20000154

080074ac <initialise_monitor_handles>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	b085      	sub	sp, #20
 80074b2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8007564 <initialise_monitor_handles+0xb8>
 80074b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80074ba:	2303      	movs	r3, #3
 80074bc:	2400      	movs	r4, #0
 80074be:	9303      	str	r3, [sp, #12]
 80074c0:	af01      	add	r7, sp, #4
 80074c2:	9402      	str	r4, [sp, #8]
 80074c4:	2501      	movs	r5, #1
 80074c6:	4628      	mov	r0, r5
 80074c8:	4639      	mov	r1, r7
 80074ca:	beab      	bkpt	0x00ab
 80074cc:	4605      	mov	r5, r0
 80074ce:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007568 <initialise_monitor_handles+0xbc>
 80074d2:	4623      	mov	r3, r4
 80074d4:	4c20      	ldr	r4, [pc, #128]	@ (8007558 <initialise_monitor_handles+0xac>)
 80074d6:	f8c8 5000 	str.w	r5, [r8]
 80074da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074de:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80074e2:	3301      	adds	r3, #1
 80074e4:	2b14      	cmp	r3, #20
 80074e6:	d1fa      	bne.n	80074de <initialise_monitor_handles+0x32>
 80074e8:	f7ff ffd4 	bl	8007494 <_has_ext_stdout_stderr>
 80074ec:	4d1b      	ldr	r5, [pc, #108]	@ (800755c <initialise_monitor_handles+0xb0>)
 80074ee:	b1d0      	cbz	r0, 8007526 <initialise_monitor_handles+0x7a>
 80074f0:	f04f 0a03 	mov.w	sl, #3
 80074f4:	2304      	movs	r3, #4
 80074f6:	f8cd 9004 	str.w	r9, [sp, #4]
 80074fa:	2601      	movs	r6, #1
 80074fc:	f8cd a00c 	str.w	sl, [sp, #12]
 8007500:	9302      	str	r3, [sp, #8]
 8007502:	4630      	mov	r0, r6
 8007504:	4639      	mov	r1, r7
 8007506:	beab      	bkpt	0x00ab
 8007508:	4683      	mov	fp, r0
 800750a:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <initialise_monitor_handles+0xb4>)
 800750c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007510:	f8c3 b000 	str.w	fp, [r3]
 8007514:	2308      	movs	r3, #8
 8007516:	f8cd a00c 	str.w	sl, [sp, #12]
 800751a:	9302      	str	r3, [sp, #8]
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	beab      	bkpt	0x00ab
 8007522:	4606      	mov	r6, r0
 8007524:	602e      	str	r6, [r5, #0]
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	3301      	adds	r3, #1
 800752a:	bf02      	ittt	eq
 800752c:	4b0c      	ldreq	r3, [pc, #48]	@ (8007560 <initialise_monitor_handles+0xb4>)
 800752e:	681b      	ldreq	r3, [r3, #0]
 8007530:	602b      	streq	r3, [r5, #0]
 8007532:	2600      	movs	r6, #0
 8007534:	f8d8 3000 	ldr.w	r3, [r8]
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	6066      	str	r6, [r4, #4]
 800753c:	f7ff ffaa 	bl	8007494 <_has_ext_stdout_stderr>
 8007540:	b130      	cbz	r0, 8007550 <initialise_monitor_handles+0xa4>
 8007542:	4b07      	ldr	r3, [pc, #28]	@ (8007560 <initialise_monitor_handles+0xb4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007550:	b005      	add	sp, #20
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	bf00      	nop
 8007558:	20025c70 	.word	0x20025c70
 800755c:	20025c64 	.word	0x20025c64
 8007560:	20025c68 	.word	0x20025c68
 8007564:	08009fee 	.word	0x08009fee
 8007568:	20025c6c 	.word	0x20025c6c

0800756c <_isatty>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	f7ff fd85 	bl	800707c <findslot>
 8007572:	2409      	movs	r4, #9
 8007574:	4605      	mov	r5, r0
 8007576:	b920      	cbnz	r0, 8007582 <_isatty+0x16>
 8007578:	f000 f94e 	bl	8007818 <__errno>
 800757c:	6004      	str	r4, [r0, #0]
 800757e:	2000      	movs	r0, #0
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	beab      	bkpt	0x00ab
 8007588:	4604      	mov	r4, r0
 800758a:	2c01      	cmp	r4, #1
 800758c:	4620      	mov	r0, r4
 800758e:	d0f7      	beq.n	8007580 <_isatty+0x14>
 8007590:	f000 f942 	bl	8007818 <__errno>
 8007594:	2513      	movs	r5, #19
 8007596:	4604      	mov	r4, r0
 8007598:	2600      	movs	r6, #0
 800759a:	4628      	mov	r0, r5
 800759c:	4631      	mov	r1, r6
 800759e:	beab      	bkpt	0x00ab
 80075a0:	4605      	mov	r5, r0
 80075a2:	6025      	str	r5, [r4, #0]
 80075a4:	e7eb      	b.n	800757e <_isatty+0x12>

080075a6 <__itoa>:
 80075a6:	1e93      	subs	r3, r2, #2
 80075a8:	2b22      	cmp	r3, #34	@ 0x22
 80075aa:	b510      	push	{r4, lr}
 80075ac:	460c      	mov	r4, r1
 80075ae:	d904      	bls.n	80075ba <__itoa+0x14>
 80075b0:	2300      	movs	r3, #0
 80075b2:	700b      	strb	r3, [r1, #0]
 80075b4:	461c      	mov	r4, r3
 80075b6:	4620      	mov	r0, r4
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	2a0a      	cmp	r2, #10
 80075bc:	d109      	bne.n	80075d2 <__itoa+0x2c>
 80075be:	2800      	cmp	r0, #0
 80075c0:	da07      	bge.n	80075d2 <__itoa+0x2c>
 80075c2:	232d      	movs	r3, #45	@ 0x2d
 80075c4:	700b      	strb	r3, [r1, #0]
 80075c6:	4240      	negs	r0, r0
 80075c8:	2101      	movs	r1, #1
 80075ca:	4421      	add	r1, r4
 80075cc:	f000 f8aa 	bl	8007724 <__utoa>
 80075d0:	e7f1      	b.n	80075b6 <__itoa+0x10>
 80075d2:	2100      	movs	r1, #0
 80075d4:	e7f9      	b.n	80075ca <__itoa+0x24>

080075d6 <itoa>:
 80075d6:	f7ff bfe6 	b.w	80075a6 <__itoa>
	...

080075dc <std>:
 80075dc:	2300      	movs	r3, #0
 80075de:	b510      	push	{r4, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	e9c0 3300 	strd	r3, r3, [r0]
 80075e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ea:	6083      	str	r3, [r0, #8]
 80075ec:	8181      	strh	r1, [r0, #12]
 80075ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80075f0:	81c2      	strh	r2, [r0, #14]
 80075f2:	6183      	str	r3, [r0, #24]
 80075f4:	4619      	mov	r1, r3
 80075f6:	2208      	movs	r2, #8
 80075f8:	305c      	adds	r0, #92	@ 0x5c
 80075fa:	f000 f905 	bl	8007808 <memset>
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <std+0x58>)
 8007600:	6263      	str	r3, [r4, #36]	@ 0x24
 8007602:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <std+0x5c>)
 8007604:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007606:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <std+0x60>)
 8007608:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <std+0x64>)
 800760c:	6323      	str	r3, [r4, #48]	@ 0x30
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <std+0x68>)
 8007610:	6224      	str	r4, [r4, #32]
 8007612:	429c      	cmp	r4, r3
 8007614:	d006      	beq.n	8007624 <std+0x48>
 8007616:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800761a:	4294      	cmp	r4, r2
 800761c:	d002      	beq.n	8007624 <std+0x48>
 800761e:	33d0      	adds	r3, #208	@ 0xd0
 8007620:	429c      	cmp	r4, r3
 8007622:	d105      	bne.n	8007630 <std+0x54>
 8007624:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800762c:	f000 b91e 	b.w	800786c <__retarget_lock_init_recursive>
 8007630:	bd10      	pop	{r4, pc}
 8007632:	bf00      	nop
 8007634:	080080c5 	.word	0x080080c5
 8007638:	080080e7 	.word	0x080080e7
 800763c:	0800811f 	.word	0x0800811f
 8007640:	08008143 	.word	0x08008143
 8007644:	20025d10 	.word	0x20025d10

08007648 <stdio_exit_handler>:
 8007648:	4a02      	ldr	r2, [pc, #8]	@ (8007654 <stdio_exit_handler+0xc>)
 800764a:	4903      	ldr	r1, [pc, #12]	@ (8007658 <stdio_exit_handler+0x10>)
 800764c:	4803      	ldr	r0, [pc, #12]	@ (800765c <stdio_exit_handler+0x14>)
 800764e:	f000 b8ab 	b.w	80077a8 <_fwalk_sglue>
 8007652:	bf00      	nop
 8007654:	2000015c 	.word	0x2000015c
 8007658:	0800805d 	.word	0x0800805d
 800765c:	2000016c 	.word	0x2000016c

08007660 <cleanup_stdio>:
 8007660:	6841      	ldr	r1, [r0, #4]
 8007662:	4b0c      	ldr	r3, [pc, #48]	@ (8007694 <cleanup_stdio+0x34>)
 8007664:	4299      	cmp	r1, r3
 8007666:	b510      	push	{r4, lr}
 8007668:	4604      	mov	r4, r0
 800766a:	d001      	beq.n	8007670 <cleanup_stdio+0x10>
 800766c:	f000 fcf6 	bl	800805c <_fflush_r>
 8007670:	68a1      	ldr	r1, [r4, #8]
 8007672:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <cleanup_stdio+0x38>)
 8007674:	4299      	cmp	r1, r3
 8007676:	d002      	beq.n	800767e <cleanup_stdio+0x1e>
 8007678:	4620      	mov	r0, r4
 800767a:	f000 fcef 	bl	800805c <_fflush_r>
 800767e:	68e1      	ldr	r1, [r4, #12]
 8007680:	4b06      	ldr	r3, [pc, #24]	@ (800769c <cleanup_stdio+0x3c>)
 8007682:	4299      	cmp	r1, r3
 8007684:	d004      	beq.n	8007690 <cleanup_stdio+0x30>
 8007686:	4620      	mov	r0, r4
 8007688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768c:	f000 bce6 	b.w	800805c <_fflush_r>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	20025d10 	.word	0x20025d10
 8007698:	20025d78 	.word	0x20025d78
 800769c:	20025de0 	.word	0x20025de0

080076a0 <global_stdio_init.part.0>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	4b0b      	ldr	r3, [pc, #44]	@ (80076d0 <global_stdio_init.part.0+0x30>)
 80076a4:	4c0b      	ldr	r4, [pc, #44]	@ (80076d4 <global_stdio_init.part.0+0x34>)
 80076a6:	4a0c      	ldr	r2, [pc, #48]	@ (80076d8 <global_stdio_init.part.0+0x38>)
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	4620      	mov	r0, r4
 80076ac:	2200      	movs	r2, #0
 80076ae:	2104      	movs	r1, #4
 80076b0:	f7ff ff94 	bl	80075dc <std>
 80076b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076b8:	2201      	movs	r2, #1
 80076ba:	2109      	movs	r1, #9
 80076bc:	f7ff ff8e 	bl	80075dc <std>
 80076c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076c4:	2202      	movs	r2, #2
 80076c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ca:	2112      	movs	r1, #18
 80076cc:	f7ff bf86 	b.w	80075dc <std>
 80076d0:	20025e48 	.word	0x20025e48
 80076d4:	20025d10 	.word	0x20025d10
 80076d8:	08007649 	.word	0x08007649

080076dc <__sfp_lock_acquire>:
 80076dc:	4801      	ldr	r0, [pc, #4]	@ (80076e4 <__sfp_lock_acquire+0x8>)
 80076de:	f000 b8c6 	b.w	800786e <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	20025e4d 	.word	0x20025e4d

080076e8 <__sfp_lock_release>:
 80076e8:	4801      	ldr	r0, [pc, #4]	@ (80076f0 <__sfp_lock_release+0x8>)
 80076ea:	f000 b8c1 	b.w	8007870 <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	20025e4d 	.word	0x20025e4d

080076f4 <__sinit>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	4604      	mov	r4, r0
 80076f8:	f7ff fff0 	bl	80076dc <__sfp_lock_acquire>
 80076fc:	6a23      	ldr	r3, [r4, #32]
 80076fe:	b11b      	cbz	r3, 8007708 <__sinit+0x14>
 8007700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007704:	f7ff bff0 	b.w	80076e8 <__sfp_lock_release>
 8007708:	4b04      	ldr	r3, [pc, #16]	@ (800771c <__sinit+0x28>)
 800770a:	6223      	str	r3, [r4, #32]
 800770c:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <__sinit+0x2c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f5      	bne.n	8007700 <__sinit+0xc>
 8007714:	f7ff ffc4 	bl	80076a0 <global_stdio_init.part.0>
 8007718:	e7f2      	b.n	8007700 <__sinit+0xc>
 800771a:	bf00      	nop
 800771c:	08007661 	.word	0x08007661
 8007720:	20025e48 	.word	0x20025e48

08007724 <__utoa>:
 8007724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007726:	4c1f      	ldr	r4, [pc, #124]	@ (80077a4 <__utoa+0x80>)
 8007728:	b08b      	sub	sp, #44	@ 0x2c
 800772a:	4605      	mov	r5, r0
 800772c:	460b      	mov	r3, r1
 800772e:	466e      	mov	r6, sp
 8007730:	f104 0c20 	add.w	ip, r4, #32
 8007734:	6820      	ldr	r0, [r4, #0]
 8007736:	6861      	ldr	r1, [r4, #4]
 8007738:	4637      	mov	r7, r6
 800773a:	c703      	stmia	r7!, {r0, r1}
 800773c:	3408      	adds	r4, #8
 800773e:	4564      	cmp	r4, ip
 8007740:	463e      	mov	r6, r7
 8007742:	d1f7      	bne.n	8007734 <__utoa+0x10>
 8007744:	7921      	ldrb	r1, [r4, #4]
 8007746:	7139      	strb	r1, [r7, #4]
 8007748:	1e91      	subs	r1, r2, #2
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	6038      	str	r0, [r7, #0]
 800774e:	2922      	cmp	r1, #34	@ 0x22
 8007750:	f04f 0100 	mov.w	r1, #0
 8007754:	d904      	bls.n	8007760 <__utoa+0x3c>
 8007756:	7019      	strb	r1, [r3, #0]
 8007758:	460b      	mov	r3, r1
 800775a:	4618      	mov	r0, r3
 800775c:	b00b      	add	sp, #44	@ 0x2c
 800775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007760:	1e58      	subs	r0, r3, #1
 8007762:	4684      	mov	ip, r0
 8007764:	fbb5 f7f2 	udiv	r7, r5, r2
 8007768:	fb02 5617 	mls	r6, r2, r7, r5
 800776c:	3628      	adds	r6, #40	@ 0x28
 800776e:	446e      	add	r6, sp
 8007770:	460c      	mov	r4, r1
 8007772:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007776:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800777a:	462e      	mov	r6, r5
 800777c:	42b2      	cmp	r2, r6
 800777e:	f101 0101 	add.w	r1, r1, #1
 8007782:	463d      	mov	r5, r7
 8007784:	d9ee      	bls.n	8007764 <__utoa+0x40>
 8007786:	2200      	movs	r2, #0
 8007788:	545a      	strb	r2, [r3, r1]
 800778a:	1919      	adds	r1, r3, r4
 800778c:	1aa5      	subs	r5, r4, r2
 800778e:	42aa      	cmp	r2, r5
 8007790:	dae3      	bge.n	800775a <__utoa+0x36>
 8007792:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007796:	780e      	ldrb	r6, [r1, #0]
 8007798:	7006      	strb	r6, [r0, #0]
 800779a:	3201      	adds	r2, #1
 800779c:	f801 5901 	strb.w	r5, [r1], #-1
 80077a0:	e7f4      	b.n	800778c <__utoa+0x68>
 80077a2:	bf00      	nop
 80077a4:	08009ff2 	.word	0x08009ff2

080077a8 <_fwalk_sglue>:
 80077a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ac:	4607      	mov	r7, r0
 80077ae:	4688      	mov	r8, r1
 80077b0:	4614      	mov	r4, r2
 80077b2:	2600      	movs	r6, #0
 80077b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077b8:	f1b9 0901 	subs.w	r9, r9, #1
 80077bc:	d505      	bpl.n	80077ca <_fwalk_sglue+0x22>
 80077be:	6824      	ldr	r4, [r4, #0]
 80077c0:	2c00      	cmp	r4, #0
 80077c2:	d1f7      	bne.n	80077b4 <_fwalk_sglue+0xc>
 80077c4:	4630      	mov	r0, r6
 80077c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ca:	89ab      	ldrh	r3, [r5, #12]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d907      	bls.n	80077e0 <_fwalk_sglue+0x38>
 80077d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077d4:	3301      	adds	r3, #1
 80077d6:	d003      	beq.n	80077e0 <_fwalk_sglue+0x38>
 80077d8:	4629      	mov	r1, r5
 80077da:	4638      	mov	r0, r7
 80077dc:	47c0      	blx	r8
 80077de:	4306      	orrs	r6, r0
 80077e0:	3568      	adds	r5, #104	@ 0x68
 80077e2:	e7e9      	b.n	80077b8 <_fwalk_sglue+0x10>

080077e4 <iprintf>:
 80077e4:	b40f      	push	{r0, r1, r2, r3}
 80077e6:	b507      	push	{r0, r1, r2, lr}
 80077e8:	4906      	ldr	r1, [pc, #24]	@ (8007804 <iprintf+0x20>)
 80077ea:	ab04      	add	r3, sp, #16
 80077ec:	6808      	ldr	r0, [r1, #0]
 80077ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f2:	6881      	ldr	r1, [r0, #8]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	f000 f865 	bl	80078c4 <_vfiprintf_r>
 80077fa:	b003      	add	sp, #12
 80077fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007800:	b004      	add	sp, #16
 8007802:	4770      	bx	lr
 8007804:	20000168 	.word	0x20000168

08007808 <memset>:
 8007808:	4402      	add	r2, r0
 800780a:	4603      	mov	r3, r0
 800780c:	4293      	cmp	r3, r2
 800780e:	d100      	bne.n	8007812 <memset+0xa>
 8007810:	4770      	bx	lr
 8007812:	f803 1b01 	strb.w	r1, [r3], #1
 8007816:	e7f9      	b.n	800780c <memset+0x4>

08007818 <__errno>:
 8007818:	4b01      	ldr	r3, [pc, #4]	@ (8007820 <__errno+0x8>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	20000168 	.word	0x20000168

08007824 <__libc_init_array>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4d0d      	ldr	r5, [pc, #52]	@ (800785c <__libc_init_array+0x38>)
 8007828:	4c0d      	ldr	r4, [pc, #52]	@ (8007860 <__libc_init_array+0x3c>)
 800782a:	1b64      	subs	r4, r4, r5
 800782c:	10a4      	asrs	r4, r4, #2
 800782e:	2600      	movs	r6, #0
 8007830:	42a6      	cmp	r6, r4
 8007832:	d109      	bne.n	8007848 <__libc_init_array+0x24>
 8007834:	4d0b      	ldr	r5, [pc, #44]	@ (8007864 <__libc_init_array+0x40>)
 8007836:	4c0c      	ldr	r4, [pc, #48]	@ (8007868 <__libc_init_array+0x44>)
 8007838:	f000 fe40 	bl	80084bc <_init>
 800783c:	1b64      	subs	r4, r4, r5
 800783e:	10a4      	asrs	r4, r4, #2
 8007840:	2600      	movs	r6, #0
 8007842:	42a6      	cmp	r6, r4
 8007844:	d105      	bne.n	8007852 <__libc_init_array+0x2e>
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	f855 3b04 	ldr.w	r3, [r5], #4
 800784c:	4798      	blx	r3
 800784e:	3601      	adds	r6, #1
 8007850:	e7ee      	b.n	8007830 <__libc_init_array+0xc>
 8007852:	f855 3b04 	ldr.w	r3, [r5], #4
 8007856:	4798      	blx	r3
 8007858:	3601      	adds	r6, #1
 800785a:	e7f2      	b.n	8007842 <__libc_init_array+0x1e>
 800785c:	0800a054 	.word	0x0800a054
 8007860:	0800a054 	.word	0x0800a054
 8007864:	0800a054 	.word	0x0800a054
 8007868:	0800a058 	.word	0x0800a058

0800786c <__retarget_lock_init_recursive>:
 800786c:	4770      	bx	lr

0800786e <__retarget_lock_acquire_recursive>:
 800786e:	4770      	bx	lr

08007870 <__retarget_lock_release_recursive>:
 8007870:	4770      	bx	lr

08007872 <__sfputc_r>:
 8007872:	6893      	ldr	r3, [r2, #8]
 8007874:	3b01      	subs	r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	b410      	push	{r4}
 800787a:	6093      	str	r3, [r2, #8]
 800787c:	da08      	bge.n	8007890 <__sfputc_r+0x1e>
 800787e:	6994      	ldr	r4, [r2, #24]
 8007880:	42a3      	cmp	r3, r4
 8007882:	db01      	blt.n	8007888 <__sfputc_r+0x16>
 8007884:	290a      	cmp	r1, #10
 8007886:	d103      	bne.n	8007890 <__sfputc_r+0x1e>
 8007888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800788c:	f000 bc5d 	b.w	800814a <__swbuf_r>
 8007890:	6813      	ldr	r3, [r2, #0]
 8007892:	1c58      	adds	r0, r3, #1
 8007894:	6010      	str	r0, [r2, #0]
 8007896:	7019      	strb	r1, [r3, #0]
 8007898:	4608      	mov	r0, r1
 800789a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <__sfputs_r>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	4614      	mov	r4, r2
 80078a8:	18d5      	adds	r5, r2, r3
 80078aa:	42ac      	cmp	r4, r5
 80078ac:	d101      	bne.n	80078b2 <__sfputs_r+0x12>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e007      	b.n	80078c2 <__sfputs_r+0x22>
 80078b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b6:	463a      	mov	r2, r7
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff ffda 	bl	8007872 <__sfputc_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	d1f3      	bne.n	80078aa <__sfputs_r+0xa>
 80078c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078c4 <_vfiprintf_r>:
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	460d      	mov	r5, r1
 80078ca:	b09d      	sub	sp, #116	@ 0x74
 80078cc:	4614      	mov	r4, r2
 80078ce:	4698      	mov	r8, r3
 80078d0:	4606      	mov	r6, r0
 80078d2:	b118      	cbz	r0, 80078dc <_vfiprintf_r+0x18>
 80078d4:	6a03      	ldr	r3, [r0, #32]
 80078d6:	b90b      	cbnz	r3, 80078dc <_vfiprintf_r+0x18>
 80078d8:	f7ff ff0c 	bl	80076f4 <__sinit>
 80078dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078de:	07d9      	lsls	r1, r3, #31
 80078e0:	d405      	bmi.n	80078ee <_vfiprintf_r+0x2a>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	059a      	lsls	r2, r3, #22
 80078e6:	d402      	bmi.n	80078ee <_vfiprintf_r+0x2a>
 80078e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ea:	f7ff ffc0 	bl	800786e <__retarget_lock_acquire_recursive>
 80078ee:	89ab      	ldrh	r3, [r5, #12]
 80078f0:	071b      	lsls	r3, r3, #28
 80078f2:	d501      	bpl.n	80078f8 <_vfiprintf_r+0x34>
 80078f4:	692b      	ldr	r3, [r5, #16]
 80078f6:	b99b      	cbnz	r3, 8007920 <_vfiprintf_r+0x5c>
 80078f8:	4629      	mov	r1, r5
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 fc64 	bl	80081c8 <__swsetup_r>
 8007900:	b170      	cbz	r0, 8007920 <_vfiprintf_r+0x5c>
 8007902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007904:	07dc      	lsls	r4, r3, #31
 8007906:	d504      	bpl.n	8007912 <_vfiprintf_r+0x4e>
 8007908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800790c:	b01d      	add	sp, #116	@ 0x74
 800790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007912:	89ab      	ldrh	r3, [r5, #12]
 8007914:	0598      	lsls	r0, r3, #22
 8007916:	d4f7      	bmi.n	8007908 <_vfiprintf_r+0x44>
 8007918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800791a:	f7ff ffa9 	bl	8007870 <__retarget_lock_release_recursive>
 800791e:	e7f3      	b.n	8007908 <_vfiprintf_r+0x44>
 8007920:	2300      	movs	r3, #0
 8007922:	9309      	str	r3, [sp, #36]	@ 0x24
 8007924:	2320      	movs	r3, #32
 8007926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800792a:	f8cd 800c 	str.w	r8, [sp, #12]
 800792e:	2330      	movs	r3, #48	@ 0x30
 8007930:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ae0 <_vfiprintf_r+0x21c>
 8007934:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007938:	f04f 0901 	mov.w	r9, #1
 800793c:	4623      	mov	r3, r4
 800793e:	469a      	mov	sl, r3
 8007940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007944:	b10a      	cbz	r2, 800794a <_vfiprintf_r+0x86>
 8007946:	2a25      	cmp	r2, #37	@ 0x25
 8007948:	d1f9      	bne.n	800793e <_vfiprintf_r+0x7a>
 800794a:	ebba 0b04 	subs.w	fp, sl, r4
 800794e:	d00b      	beq.n	8007968 <_vfiprintf_r+0xa4>
 8007950:	465b      	mov	r3, fp
 8007952:	4622      	mov	r2, r4
 8007954:	4629      	mov	r1, r5
 8007956:	4630      	mov	r0, r6
 8007958:	f7ff ffa2 	bl	80078a0 <__sfputs_r>
 800795c:	3001      	adds	r0, #1
 800795e:	f000 80a7 	beq.w	8007ab0 <_vfiprintf_r+0x1ec>
 8007962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007964:	445a      	add	r2, fp
 8007966:	9209      	str	r2, [sp, #36]	@ 0x24
 8007968:	f89a 3000 	ldrb.w	r3, [sl]
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 809f 	beq.w	8007ab0 <_vfiprintf_r+0x1ec>
 8007972:	2300      	movs	r3, #0
 8007974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800797c:	f10a 0a01 	add.w	sl, sl, #1
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	9307      	str	r3, [sp, #28]
 8007984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007988:	931a      	str	r3, [sp, #104]	@ 0x68
 800798a:	4654      	mov	r4, sl
 800798c:	2205      	movs	r2, #5
 800798e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007992:	4853      	ldr	r0, [pc, #332]	@ (8007ae0 <_vfiprintf_r+0x21c>)
 8007994:	f7f8 fc34 	bl	8000200 <memchr>
 8007998:	9a04      	ldr	r2, [sp, #16]
 800799a:	b9d8      	cbnz	r0, 80079d4 <_vfiprintf_r+0x110>
 800799c:	06d1      	lsls	r1, r2, #27
 800799e:	bf44      	itt	mi
 80079a0:	2320      	movmi	r3, #32
 80079a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079a6:	0713      	lsls	r3, r2, #28
 80079a8:	bf44      	itt	mi
 80079aa:	232b      	movmi	r3, #43	@ 0x2b
 80079ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079b0:	f89a 3000 	ldrb.w	r3, [sl]
 80079b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80079b6:	d015      	beq.n	80079e4 <_vfiprintf_r+0x120>
 80079b8:	9a07      	ldr	r2, [sp, #28]
 80079ba:	4654      	mov	r4, sl
 80079bc:	2000      	movs	r0, #0
 80079be:	f04f 0c0a 	mov.w	ip, #10
 80079c2:	4621      	mov	r1, r4
 80079c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079c8:	3b30      	subs	r3, #48	@ 0x30
 80079ca:	2b09      	cmp	r3, #9
 80079cc:	d94b      	bls.n	8007a66 <_vfiprintf_r+0x1a2>
 80079ce:	b1b0      	cbz	r0, 80079fe <_vfiprintf_r+0x13a>
 80079d0:	9207      	str	r2, [sp, #28]
 80079d2:	e014      	b.n	80079fe <_vfiprintf_r+0x13a>
 80079d4:	eba0 0308 	sub.w	r3, r0, r8
 80079d8:	fa09 f303 	lsl.w	r3, r9, r3
 80079dc:	4313      	orrs	r3, r2
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	46a2      	mov	sl, r4
 80079e2:	e7d2      	b.n	800798a <_vfiprintf_r+0xc6>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	1d19      	adds	r1, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	9103      	str	r1, [sp, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bfbb      	ittet	lt
 80079f0:	425b      	neglt	r3, r3
 80079f2:	f042 0202 	orrlt.w	r2, r2, #2
 80079f6:	9307      	strge	r3, [sp, #28]
 80079f8:	9307      	strlt	r3, [sp, #28]
 80079fa:	bfb8      	it	lt
 80079fc:	9204      	strlt	r2, [sp, #16]
 80079fe:	7823      	ldrb	r3, [r4, #0]
 8007a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a02:	d10a      	bne.n	8007a1a <_vfiprintf_r+0x156>
 8007a04:	7863      	ldrb	r3, [r4, #1]
 8007a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a08:	d132      	bne.n	8007a70 <_vfiprintf_r+0x1ac>
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	9203      	str	r2, [sp, #12]
 8007a12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a16:	3402      	adds	r4, #2
 8007a18:	9305      	str	r3, [sp, #20]
 8007a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007af0 <_vfiprintf_r+0x22c>
 8007a1e:	7821      	ldrb	r1, [r4, #0]
 8007a20:	2203      	movs	r2, #3
 8007a22:	4650      	mov	r0, sl
 8007a24:	f7f8 fbec 	bl	8000200 <memchr>
 8007a28:	b138      	cbz	r0, 8007a3a <_vfiprintf_r+0x176>
 8007a2a:	9b04      	ldr	r3, [sp, #16]
 8007a2c:	eba0 000a 	sub.w	r0, r0, sl
 8007a30:	2240      	movs	r2, #64	@ 0x40
 8007a32:	4082      	lsls	r2, r0
 8007a34:	4313      	orrs	r3, r2
 8007a36:	3401      	adds	r4, #1
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3e:	4829      	ldr	r0, [pc, #164]	@ (8007ae4 <_vfiprintf_r+0x220>)
 8007a40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a44:	2206      	movs	r2, #6
 8007a46:	f7f8 fbdb 	bl	8000200 <memchr>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d03f      	beq.n	8007ace <_vfiprintf_r+0x20a>
 8007a4e:	4b26      	ldr	r3, [pc, #152]	@ (8007ae8 <_vfiprintf_r+0x224>)
 8007a50:	bb1b      	cbnz	r3, 8007a9a <_vfiprintf_r+0x1d6>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	3307      	adds	r3, #7
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a60:	443b      	add	r3, r7
 8007a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a64:	e76a      	b.n	800793c <_vfiprintf_r+0x78>
 8007a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	e7a8      	b.n	80079c2 <_vfiprintf_r+0xfe>
 8007a70:	2300      	movs	r3, #0
 8007a72:	3401      	adds	r4, #1
 8007a74:	9305      	str	r3, [sp, #20]
 8007a76:	4619      	mov	r1, r3
 8007a78:	f04f 0c0a 	mov.w	ip, #10
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a82:	3a30      	subs	r2, #48	@ 0x30
 8007a84:	2a09      	cmp	r2, #9
 8007a86:	d903      	bls.n	8007a90 <_vfiprintf_r+0x1cc>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0c6      	beq.n	8007a1a <_vfiprintf_r+0x156>
 8007a8c:	9105      	str	r1, [sp, #20]
 8007a8e:	e7c4      	b.n	8007a1a <_vfiprintf_r+0x156>
 8007a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a94:	4604      	mov	r4, r0
 8007a96:	2301      	movs	r3, #1
 8007a98:	e7f0      	b.n	8007a7c <_vfiprintf_r+0x1b8>
 8007a9a:	ab03      	add	r3, sp, #12
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	4b12      	ldr	r3, [pc, #72]	@ (8007aec <_vfiprintf_r+0x228>)
 8007aa2:	a904      	add	r1, sp, #16
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f3af 8000 	nop.w
 8007aaa:	4607      	mov	r7, r0
 8007aac:	1c78      	adds	r0, r7, #1
 8007aae:	d1d6      	bne.n	8007a5e <_vfiprintf_r+0x19a>
 8007ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ab2:	07d9      	lsls	r1, r3, #31
 8007ab4:	d405      	bmi.n	8007ac2 <_vfiprintf_r+0x1fe>
 8007ab6:	89ab      	ldrh	r3, [r5, #12]
 8007ab8:	059a      	lsls	r2, r3, #22
 8007aba:	d402      	bmi.n	8007ac2 <_vfiprintf_r+0x1fe>
 8007abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007abe:	f7ff fed7 	bl	8007870 <__retarget_lock_release_recursive>
 8007ac2:	89ab      	ldrh	r3, [r5, #12]
 8007ac4:	065b      	lsls	r3, r3, #25
 8007ac6:	f53f af1f 	bmi.w	8007908 <_vfiprintf_r+0x44>
 8007aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007acc:	e71e      	b.n	800790c <_vfiprintf_r+0x48>
 8007ace:	ab03      	add	r3, sp, #12
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <_vfiprintf_r+0x228>)
 8007ad6:	a904      	add	r1, sp, #16
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 f91b 	bl	8007d14 <_printf_i>
 8007ade:	e7e4      	b.n	8007aaa <_vfiprintf_r+0x1e6>
 8007ae0:	0800a017 	.word	0x0800a017
 8007ae4:	0800a021 	.word	0x0800a021
 8007ae8:	00000000 	.word	0x00000000
 8007aec:	080078a1 	.word	0x080078a1
 8007af0:	0800a01d 	.word	0x0800a01d

08007af4 <sbrk_aligned>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4e0f      	ldr	r6, [pc, #60]	@ (8007b34 <sbrk_aligned+0x40>)
 8007af8:	460c      	mov	r4, r1
 8007afa:	6831      	ldr	r1, [r6, #0]
 8007afc:	4605      	mov	r5, r0
 8007afe:	b911      	cbnz	r1, 8007b06 <sbrk_aligned+0x12>
 8007b00:	f000 fc70 	bl	80083e4 <_sbrk_r>
 8007b04:	6030      	str	r0, [r6, #0]
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 fc6b 	bl	80083e4 <_sbrk_r>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d103      	bne.n	8007b1a <sbrk_aligned+0x26>
 8007b12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b16:	4620      	mov	r0, r4
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	1cc4      	adds	r4, r0, #3
 8007b1c:	f024 0403 	bic.w	r4, r4, #3
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d0f8      	beq.n	8007b16 <sbrk_aligned+0x22>
 8007b24:	1a21      	subs	r1, r4, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 fc5c 	bl	80083e4 <_sbrk_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d1f2      	bne.n	8007b16 <sbrk_aligned+0x22>
 8007b30:	e7ef      	b.n	8007b12 <sbrk_aligned+0x1e>
 8007b32:	bf00      	nop
 8007b34:	20025e50 	.word	0x20025e50

08007b38 <_malloc_r>:
 8007b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b3c:	1ccd      	adds	r5, r1, #3
 8007b3e:	f025 0503 	bic.w	r5, r5, #3
 8007b42:	3508      	adds	r5, #8
 8007b44:	2d0c      	cmp	r5, #12
 8007b46:	bf38      	it	cc
 8007b48:	250c      	movcc	r5, #12
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	db01      	blt.n	8007b54 <_malloc_r+0x1c>
 8007b50:	42a9      	cmp	r1, r5
 8007b52:	d904      	bls.n	8007b5e <_malloc_r+0x26>
 8007b54:	230c      	movs	r3, #12
 8007b56:	6033      	str	r3, [r6, #0]
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c34 <_malloc_r+0xfc>
 8007b62:	f000 faa3 	bl	80080ac <__malloc_lock>
 8007b66:	f8d8 3000 	ldr.w	r3, [r8]
 8007b6a:	461c      	mov	r4, r3
 8007b6c:	bb44      	cbnz	r4, 8007bc0 <_malloc_r+0x88>
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7ff ffbf 	bl	8007af4 <sbrk_aligned>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	4604      	mov	r4, r0
 8007b7a:	d158      	bne.n	8007c2e <_malloc_r+0xf6>
 8007b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b80:	4627      	mov	r7, r4
 8007b82:	2f00      	cmp	r7, #0
 8007b84:	d143      	bne.n	8007c0e <_malloc_r+0xd6>
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	d04b      	beq.n	8007c22 <_malloc_r+0xea>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	4630      	mov	r0, r6
 8007b90:	eb04 0903 	add.w	r9, r4, r3
 8007b94:	f000 fc26 	bl	80083e4 <_sbrk_r>
 8007b98:	4581      	cmp	r9, r0
 8007b9a:	d142      	bne.n	8007c22 <_malloc_r+0xea>
 8007b9c:	6821      	ldr	r1, [r4, #0]
 8007b9e:	1a6d      	subs	r5, r5, r1
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7ff ffa6 	bl	8007af4 <sbrk_aligned>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d03a      	beq.n	8007c22 <_malloc_r+0xea>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	442b      	add	r3, r5
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	bb62      	cbnz	r2, 8007c14 <_malloc_r+0xdc>
 8007bba:	f8c8 7000 	str.w	r7, [r8]
 8007bbe:	e00f      	b.n	8007be0 <_malloc_r+0xa8>
 8007bc0:	6822      	ldr	r2, [r4, #0]
 8007bc2:	1b52      	subs	r2, r2, r5
 8007bc4:	d420      	bmi.n	8007c08 <_malloc_r+0xd0>
 8007bc6:	2a0b      	cmp	r2, #11
 8007bc8:	d917      	bls.n	8007bfa <_malloc_r+0xc2>
 8007bca:	1961      	adds	r1, r4, r5
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	6025      	str	r5, [r4, #0]
 8007bd0:	bf18      	it	ne
 8007bd2:	6059      	strne	r1, [r3, #4]
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	bf08      	it	eq
 8007bd8:	f8c8 1000 	streq.w	r1, [r8]
 8007bdc:	5162      	str	r2, [r4, r5]
 8007bde:	604b      	str	r3, [r1, #4]
 8007be0:	4630      	mov	r0, r6
 8007be2:	f000 fa69 	bl	80080b8 <__malloc_unlock>
 8007be6:	f104 000b 	add.w	r0, r4, #11
 8007bea:	1d23      	adds	r3, r4, #4
 8007bec:	f020 0007 	bic.w	r0, r0, #7
 8007bf0:	1ac2      	subs	r2, r0, r3
 8007bf2:	bf1c      	itt	ne
 8007bf4:	1a1b      	subne	r3, r3, r0
 8007bf6:	50a3      	strne	r3, [r4, r2]
 8007bf8:	e7af      	b.n	8007b5a <_malloc_r+0x22>
 8007bfa:	6862      	ldr	r2, [r4, #4]
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	bf0c      	ite	eq
 8007c00:	f8c8 2000 	streq.w	r2, [r8]
 8007c04:	605a      	strne	r2, [r3, #4]
 8007c06:	e7eb      	b.n	8007be0 <_malloc_r+0xa8>
 8007c08:	4623      	mov	r3, r4
 8007c0a:	6864      	ldr	r4, [r4, #4]
 8007c0c:	e7ae      	b.n	8007b6c <_malloc_r+0x34>
 8007c0e:	463c      	mov	r4, r7
 8007c10:	687f      	ldr	r7, [r7, #4]
 8007c12:	e7b6      	b.n	8007b82 <_malloc_r+0x4a>
 8007c14:	461a      	mov	r2, r3
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	d1fb      	bne.n	8007c14 <_malloc_r+0xdc>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6053      	str	r3, [r2, #4]
 8007c20:	e7de      	b.n	8007be0 <_malloc_r+0xa8>
 8007c22:	230c      	movs	r3, #12
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	4630      	mov	r0, r6
 8007c28:	f000 fa46 	bl	80080b8 <__malloc_unlock>
 8007c2c:	e794      	b.n	8007b58 <_malloc_r+0x20>
 8007c2e:	6005      	str	r5, [r0, #0]
 8007c30:	e7d6      	b.n	8007be0 <_malloc_r+0xa8>
 8007c32:	bf00      	nop
 8007c34:	20025e54 	.word	0x20025e54

08007c38 <_printf_common>:
 8007c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	4698      	mov	r8, r3
 8007c40:	688a      	ldr	r2, [r1, #8]
 8007c42:	690b      	ldr	r3, [r1, #16]
 8007c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	bfb8      	it	lt
 8007c4c:	4613      	movlt	r3, r2
 8007c4e:	6033      	str	r3, [r6, #0]
 8007c50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c54:	4607      	mov	r7, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b10a      	cbz	r2, 8007c5e <_printf_common+0x26>
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	6033      	str	r3, [r6, #0]
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	0699      	lsls	r1, r3, #26
 8007c62:	bf42      	ittt	mi
 8007c64:	6833      	ldrmi	r3, [r6, #0]
 8007c66:	3302      	addmi	r3, #2
 8007c68:	6033      	strmi	r3, [r6, #0]
 8007c6a:	6825      	ldr	r5, [r4, #0]
 8007c6c:	f015 0506 	ands.w	r5, r5, #6
 8007c70:	d106      	bne.n	8007c80 <_printf_common+0x48>
 8007c72:	f104 0a19 	add.w	sl, r4, #25
 8007c76:	68e3      	ldr	r3, [r4, #12]
 8007c78:	6832      	ldr	r2, [r6, #0]
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	42ab      	cmp	r3, r5
 8007c7e:	dc26      	bgt.n	8007cce <_printf_common+0x96>
 8007c80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c84:	6822      	ldr	r2, [r4, #0]
 8007c86:	3b00      	subs	r3, #0
 8007c88:	bf18      	it	ne
 8007c8a:	2301      	movne	r3, #1
 8007c8c:	0692      	lsls	r2, r2, #26
 8007c8e:	d42b      	bmi.n	8007ce8 <_printf_common+0xb0>
 8007c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c94:	4641      	mov	r1, r8
 8007c96:	4638      	mov	r0, r7
 8007c98:	47c8      	blx	r9
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d01e      	beq.n	8007cdc <_printf_common+0xa4>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	6922      	ldr	r2, [r4, #16]
 8007ca2:	f003 0306 	and.w	r3, r3, #6
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	bf02      	ittt	eq
 8007caa:	68e5      	ldreq	r5, [r4, #12]
 8007cac:	6833      	ldreq	r3, [r6, #0]
 8007cae:	1aed      	subeq	r5, r5, r3
 8007cb0:	68a3      	ldr	r3, [r4, #8]
 8007cb2:	bf0c      	ite	eq
 8007cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cb8:	2500      	movne	r5, #0
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	bfc4      	itt	gt
 8007cbe:	1a9b      	subgt	r3, r3, r2
 8007cc0:	18ed      	addgt	r5, r5, r3
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	341a      	adds	r4, #26
 8007cc6:	42b5      	cmp	r5, r6
 8007cc8:	d11a      	bne.n	8007d00 <_printf_common+0xc8>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e008      	b.n	8007ce0 <_printf_common+0xa8>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4652      	mov	r2, sl
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	47c8      	blx	r9
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d103      	bne.n	8007ce4 <_printf_common+0xac>
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	e7c6      	b.n	8007c76 <_printf_common+0x3e>
 8007ce8:	18e1      	adds	r1, r4, r3
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	2030      	movs	r0, #48	@ 0x30
 8007cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cf2:	4422      	add	r2, r4
 8007cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	e7c7      	b.n	8007c90 <_printf_common+0x58>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4622      	mov	r2, r4
 8007d04:	4641      	mov	r1, r8
 8007d06:	4638      	mov	r0, r7
 8007d08:	47c8      	blx	r9
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d0e6      	beq.n	8007cdc <_printf_common+0xa4>
 8007d0e:	3601      	adds	r6, #1
 8007d10:	e7d9      	b.n	8007cc6 <_printf_common+0x8e>
	...

08007d14 <_printf_i>:
 8007d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d18:	7e0f      	ldrb	r7, [r1, #24]
 8007d1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d1c:	2f78      	cmp	r7, #120	@ 0x78
 8007d1e:	4691      	mov	r9, r2
 8007d20:	4680      	mov	r8, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	469a      	mov	sl, r3
 8007d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d2a:	d807      	bhi.n	8007d3c <_printf_i+0x28>
 8007d2c:	2f62      	cmp	r7, #98	@ 0x62
 8007d2e:	d80a      	bhi.n	8007d46 <_printf_i+0x32>
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	f000 80d2 	beq.w	8007eda <_printf_i+0x1c6>
 8007d36:	2f58      	cmp	r7, #88	@ 0x58
 8007d38:	f000 80b9 	beq.w	8007eae <_printf_i+0x19a>
 8007d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d44:	e03a      	b.n	8007dbc <_printf_i+0xa8>
 8007d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d4a:	2b15      	cmp	r3, #21
 8007d4c:	d8f6      	bhi.n	8007d3c <_printf_i+0x28>
 8007d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d54 <_printf_i+0x40>)
 8007d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d54:	08007dad 	.word	0x08007dad
 8007d58:	08007dc1 	.word	0x08007dc1
 8007d5c:	08007d3d 	.word	0x08007d3d
 8007d60:	08007d3d 	.word	0x08007d3d
 8007d64:	08007d3d 	.word	0x08007d3d
 8007d68:	08007d3d 	.word	0x08007d3d
 8007d6c:	08007dc1 	.word	0x08007dc1
 8007d70:	08007d3d 	.word	0x08007d3d
 8007d74:	08007d3d 	.word	0x08007d3d
 8007d78:	08007d3d 	.word	0x08007d3d
 8007d7c:	08007d3d 	.word	0x08007d3d
 8007d80:	08007ec1 	.word	0x08007ec1
 8007d84:	08007deb 	.word	0x08007deb
 8007d88:	08007e7b 	.word	0x08007e7b
 8007d8c:	08007d3d 	.word	0x08007d3d
 8007d90:	08007d3d 	.word	0x08007d3d
 8007d94:	08007ee3 	.word	0x08007ee3
 8007d98:	08007d3d 	.word	0x08007d3d
 8007d9c:	08007deb 	.word	0x08007deb
 8007da0:	08007d3d 	.word	0x08007d3d
 8007da4:	08007d3d 	.word	0x08007d3d
 8007da8:	08007e83 	.word	0x08007e83
 8007dac:	6833      	ldr	r3, [r6, #0]
 8007dae:	1d1a      	adds	r2, r3, #4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6032      	str	r2, [r6, #0]
 8007db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e09d      	b.n	8007efc <_printf_i+0x1e8>
 8007dc0:	6833      	ldr	r3, [r6, #0]
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	1d19      	adds	r1, r3, #4
 8007dc6:	6031      	str	r1, [r6, #0]
 8007dc8:	0606      	lsls	r6, r0, #24
 8007dca:	d501      	bpl.n	8007dd0 <_printf_i+0xbc>
 8007dcc:	681d      	ldr	r5, [r3, #0]
 8007dce:	e003      	b.n	8007dd8 <_printf_i+0xc4>
 8007dd0:	0645      	lsls	r5, r0, #25
 8007dd2:	d5fb      	bpl.n	8007dcc <_printf_i+0xb8>
 8007dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	da03      	bge.n	8007de4 <_printf_i+0xd0>
 8007ddc:	232d      	movs	r3, #45	@ 0x2d
 8007dde:	426d      	negs	r5, r5
 8007de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de4:	4859      	ldr	r0, [pc, #356]	@ (8007f4c <_printf_i+0x238>)
 8007de6:	230a      	movs	r3, #10
 8007de8:	e011      	b.n	8007e0e <_printf_i+0xfa>
 8007dea:	6821      	ldr	r1, [r4, #0]
 8007dec:	6833      	ldr	r3, [r6, #0]
 8007dee:	0608      	lsls	r0, r1, #24
 8007df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007df4:	d402      	bmi.n	8007dfc <_printf_i+0xe8>
 8007df6:	0649      	lsls	r1, r1, #25
 8007df8:	bf48      	it	mi
 8007dfa:	b2ad      	uxthmi	r5, r5
 8007dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dfe:	4853      	ldr	r0, [pc, #332]	@ (8007f4c <_printf_i+0x238>)
 8007e00:	6033      	str	r3, [r6, #0]
 8007e02:	bf14      	ite	ne
 8007e04:	230a      	movne	r3, #10
 8007e06:	2308      	moveq	r3, #8
 8007e08:	2100      	movs	r1, #0
 8007e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e0e:	6866      	ldr	r6, [r4, #4]
 8007e10:	60a6      	str	r6, [r4, #8]
 8007e12:	2e00      	cmp	r6, #0
 8007e14:	bfa2      	ittt	ge
 8007e16:	6821      	ldrge	r1, [r4, #0]
 8007e18:	f021 0104 	bicge.w	r1, r1, #4
 8007e1c:	6021      	strge	r1, [r4, #0]
 8007e1e:	b90d      	cbnz	r5, 8007e24 <_printf_i+0x110>
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	d04b      	beq.n	8007ebc <_printf_i+0x1a8>
 8007e24:	4616      	mov	r6, r2
 8007e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e2e:	5dc7      	ldrb	r7, [r0, r7]
 8007e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e34:	462f      	mov	r7, r5
 8007e36:	42bb      	cmp	r3, r7
 8007e38:	460d      	mov	r5, r1
 8007e3a:	d9f4      	bls.n	8007e26 <_printf_i+0x112>
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d10b      	bne.n	8007e58 <_printf_i+0x144>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	07df      	lsls	r7, r3, #31
 8007e44:	d508      	bpl.n	8007e58 <_printf_i+0x144>
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	6861      	ldr	r1, [r4, #4]
 8007e4a:	4299      	cmp	r1, r3
 8007e4c:	bfde      	ittt	le
 8007e4e:	2330      	movle	r3, #48	@ 0x30
 8007e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e54:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e58:	1b92      	subs	r2, r2, r6
 8007e5a:	6122      	str	r2, [r4, #16]
 8007e5c:	f8cd a000 	str.w	sl, [sp]
 8007e60:	464b      	mov	r3, r9
 8007e62:	aa03      	add	r2, sp, #12
 8007e64:	4621      	mov	r1, r4
 8007e66:	4640      	mov	r0, r8
 8007e68:	f7ff fee6 	bl	8007c38 <_printf_common>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d14a      	bne.n	8007f06 <_printf_i+0x1f2>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e74:	b004      	add	sp, #16
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	f043 0320 	orr.w	r3, r3, #32
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	4833      	ldr	r0, [pc, #204]	@ (8007f50 <_printf_i+0x23c>)
 8007e84:	2778      	movs	r7, #120	@ 0x78
 8007e86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	6831      	ldr	r1, [r6, #0]
 8007e8e:	061f      	lsls	r7, r3, #24
 8007e90:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e94:	d402      	bmi.n	8007e9c <_printf_i+0x188>
 8007e96:	065f      	lsls	r7, r3, #25
 8007e98:	bf48      	it	mi
 8007e9a:	b2ad      	uxthmi	r5, r5
 8007e9c:	6031      	str	r1, [r6, #0]
 8007e9e:	07d9      	lsls	r1, r3, #31
 8007ea0:	bf44      	itt	mi
 8007ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea6:	6023      	strmi	r3, [r4, #0]
 8007ea8:	b11d      	cbz	r5, 8007eb2 <_printf_i+0x19e>
 8007eaa:	2310      	movs	r3, #16
 8007eac:	e7ac      	b.n	8007e08 <_printf_i+0xf4>
 8007eae:	4827      	ldr	r0, [pc, #156]	@ (8007f4c <_printf_i+0x238>)
 8007eb0:	e7e9      	b.n	8007e86 <_printf_i+0x172>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	f023 0320 	bic.w	r3, r3, #32
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	e7f6      	b.n	8007eaa <_printf_i+0x196>
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	e7bd      	b.n	8007e3c <_printf_i+0x128>
 8007ec0:	6833      	ldr	r3, [r6, #0]
 8007ec2:	6825      	ldr	r5, [r4, #0]
 8007ec4:	6961      	ldr	r1, [r4, #20]
 8007ec6:	1d18      	adds	r0, r3, #4
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	062e      	lsls	r6, r5, #24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	d501      	bpl.n	8007ed4 <_printf_i+0x1c0>
 8007ed0:	6019      	str	r1, [r3, #0]
 8007ed2:	e002      	b.n	8007eda <_printf_i+0x1c6>
 8007ed4:	0668      	lsls	r0, r5, #25
 8007ed6:	d5fb      	bpl.n	8007ed0 <_printf_i+0x1bc>
 8007ed8:	8019      	strh	r1, [r3, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	4616      	mov	r6, r2
 8007ee0:	e7bc      	b.n	8007e5c <_printf_i+0x148>
 8007ee2:	6833      	ldr	r3, [r6, #0]
 8007ee4:	1d1a      	adds	r2, r3, #4
 8007ee6:	6032      	str	r2, [r6, #0]
 8007ee8:	681e      	ldr	r6, [r3, #0]
 8007eea:	6862      	ldr	r2, [r4, #4]
 8007eec:	2100      	movs	r1, #0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7f8 f986 	bl	8000200 <memchr>
 8007ef4:	b108      	cbz	r0, 8007efa <_printf_i+0x1e6>
 8007ef6:	1b80      	subs	r0, r0, r6
 8007ef8:	6060      	str	r0, [r4, #4]
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	2300      	movs	r3, #0
 8007f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f04:	e7aa      	b.n	8007e5c <_printf_i+0x148>
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	4632      	mov	r2, r6
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	47d0      	blx	sl
 8007f10:	3001      	adds	r0, #1
 8007f12:	d0ad      	beq.n	8007e70 <_printf_i+0x15c>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	079b      	lsls	r3, r3, #30
 8007f18:	d413      	bmi.n	8007f42 <_printf_i+0x22e>
 8007f1a:	68e0      	ldr	r0, [r4, #12]
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	4298      	cmp	r0, r3
 8007f20:	bfb8      	it	lt
 8007f22:	4618      	movlt	r0, r3
 8007f24:	e7a6      	b.n	8007e74 <_printf_i+0x160>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4632      	mov	r2, r6
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	47d0      	blx	sl
 8007f30:	3001      	adds	r0, #1
 8007f32:	d09d      	beq.n	8007e70 <_printf_i+0x15c>
 8007f34:	3501      	adds	r5, #1
 8007f36:	68e3      	ldr	r3, [r4, #12]
 8007f38:	9903      	ldr	r1, [sp, #12]
 8007f3a:	1a5b      	subs	r3, r3, r1
 8007f3c:	42ab      	cmp	r3, r5
 8007f3e:	dcf2      	bgt.n	8007f26 <_printf_i+0x212>
 8007f40:	e7eb      	b.n	8007f1a <_printf_i+0x206>
 8007f42:	2500      	movs	r5, #0
 8007f44:	f104 0619 	add.w	r6, r4, #25
 8007f48:	e7f5      	b.n	8007f36 <_printf_i+0x222>
 8007f4a:	bf00      	nop
 8007f4c:	0800a028 	.word	0x0800a028
 8007f50:	0800a039 	.word	0x0800a039

08007f54 <__sflush_r>:
 8007f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5c:	0716      	lsls	r6, r2, #28
 8007f5e:	4605      	mov	r5, r0
 8007f60:	460c      	mov	r4, r1
 8007f62:	d454      	bmi.n	800800e <__sflush_r+0xba>
 8007f64:	684b      	ldr	r3, [r1, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dc02      	bgt.n	8007f70 <__sflush_r+0x1c>
 8007f6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd48      	ble.n	8008002 <__sflush_r+0xae>
 8007f70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d045      	beq.n	8008002 <__sflush_r+0xae>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f7c:	682f      	ldr	r7, [r5, #0]
 8007f7e:	6a21      	ldr	r1, [r4, #32]
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	d030      	beq.n	8007fe6 <__sflush_r+0x92>
 8007f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	0759      	lsls	r1, r3, #29
 8007f8a:	d505      	bpl.n	8007f98 <__sflush_r+0x44>
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f92:	b10b      	cbz	r3, 8007f98 <__sflush_r+0x44>
 8007f94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f9c:	6a21      	ldr	r1, [r4, #32]
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b0      	blx	r6
 8007fa2:	1c43      	adds	r3, r0, #1
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	d106      	bne.n	8007fb6 <__sflush_r+0x62>
 8007fa8:	6829      	ldr	r1, [r5, #0]
 8007faa:	291d      	cmp	r1, #29
 8007fac:	d82b      	bhi.n	8008006 <__sflush_r+0xb2>
 8007fae:	4a2a      	ldr	r2, [pc, #168]	@ (8008058 <__sflush_r+0x104>)
 8007fb0:	410a      	asrs	r2, r1
 8007fb2:	07d6      	lsls	r6, r2, #31
 8007fb4:	d427      	bmi.n	8008006 <__sflush_r+0xb2>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	6062      	str	r2, [r4, #4]
 8007fba:	04d9      	lsls	r1, r3, #19
 8007fbc:	6922      	ldr	r2, [r4, #16]
 8007fbe:	6022      	str	r2, [r4, #0]
 8007fc0:	d504      	bpl.n	8007fcc <__sflush_r+0x78>
 8007fc2:	1c42      	adds	r2, r0, #1
 8007fc4:	d101      	bne.n	8007fca <__sflush_r+0x76>
 8007fc6:	682b      	ldr	r3, [r5, #0]
 8007fc8:	b903      	cbnz	r3, 8007fcc <__sflush_r+0x78>
 8007fca:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fce:	602f      	str	r7, [r5, #0]
 8007fd0:	b1b9      	cbz	r1, 8008002 <__sflush_r+0xae>
 8007fd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fd6:	4299      	cmp	r1, r3
 8007fd8:	d002      	beq.n	8007fe0 <__sflush_r+0x8c>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 fa24 	bl	8008428 <_free_r>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fe4:	e00d      	b.n	8008002 <__sflush_r+0xae>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b0      	blx	r6
 8007fec:	4602      	mov	r2, r0
 8007fee:	1c50      	adds	r0, r2, #1
 8007ff0:	d1c9      	bne.n	8007f86 <__sflush_r+0x32>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c6      	beq.n	8007f86 <__sflush_r+0x32>
 8007ff8:	2b1d      	cmp	r3, #29
 8007ffa:	d001      	beq.n	8008000 <__sflush_r+0xac>
 8007ffc:	2b16      	cmp	r3, #22
 8007ffe:	d11e      	bne.n	800803e <__sflush_r+0xea>
 8008000:	602f      	str	r7, [r5, #0]
 8008002:	2000      	movs	r0, #0
 8008004:	e022      	b.n	800804c <__sflush_r+0xf8>
 8008006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800800a:	b21b      	sxth	r3, r3
 800800c:	e01b      	b.n	8008046 <__sflush_r+0xf2>
 800800e:	690f      	ldr	r7, [r1, #16]
 8008010:	2f00      	cmp	r7, #0
 8008012:	d0f6      	beq.n	8008002 <__sflush_r+0xae>
 8008014:	0793      	lsls	r3, r2, #30
 8008016:	680e      	ldr	r6, [r1, #0]
 8008018:	bf08      	it	eq
 800801a:	694b      	ldreq	r3, [r1, #20]
 800801c:	600f      	str	r7, [r1, #0]
 800801e:	bf18      	it	ne
 8008020:	2300      	movne	r3, #0
 8008022:	eba6 0807 	sub.w	r8, r6, r7
 8008026:	608b      	str	r3, [r1, #8]
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	dde9      	ble.n	8008002 <__sflush_r+0xae>
 800802e:	6a21      	ldr	r1, [r4, #32]
 8008030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008032:	4643      	mov	r3, r8
 8008034:	463a      	mov	r2, r7
 8008036:	4628      	mov	r0, r5
 8008038:	47b0      	blx	r6
 800803a:	2800      	cmp	r0, #0
 800803c:	dc08      	bgt.n	8008050 <__sflush_r+0xfc>
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008050:	4407      	add	r7, r0
 8008052:	eba8 0800 	sub.w	r8, r8, r0
 8008056:	e7e7      	b.n	8008028 <__sflush_r+0xd4>
 8008058:	dfbffffe 	.word	0xdfbffffe

0800805c <_fflush_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	690b      	ldr	r3, [r1, #16]
 8008060:	4605      	mov	r5, r0
 8008062:	460c      	mov	r4, r1
 8008064:	b913      	cbnz	r3, 800806c <_fflush_r+0x10>
 8008066:	2500      	movs	r5, #0
 8008068:	4628      	mov	r0, r5
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	b118      	cbz	r0, 8008076 <_fflush_r+0x1a>
 800806e:	6a03      	ldr	r3, [r0, #32]
 8008070:	b90b      	cbnz	r3, 8008076 <_fflush_r+0x1a>
 8008072:	f7ff fb3f 	bl	80076f4 <__sinit>
 8008076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0f3      	beq.n	8008066 <_fflush_r+0xa>
 800807e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008080:	07d0      	lsls	r0, r2, #31
 8008082:	d404      	bmi.n	800808e <_fflush_r+0x32>
 8008084:	0599      	lsls	r1, r3, #22
 8008086:	d402      	bmi.n	800808e <_fflush_r+0x32>
 8008088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800808a:	f7ff fbf0 	bl	800786e <__retarget_lock_acquire_recursive>
 800808e:	4628      	mov	r0, r5
 8008090:	4621      	mov	r1, r4
 8008092:	f7ff ff5f 	bl	8007f54 <__sflush_r>
 8008096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008098:	07da      	lsls	r2, r3, #31
 800809a:	4605      	mov	r5, r0
 800809c:	d4e4      	bmi.n	8008068 <_fflush_r+0xc>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	059b      	lsls	r3, r3, #22
 80080a2:	d4e1      	bmi.n	8008068 <_fflush_r+0xc>
 80080a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080a6:	f7ff fbe3 	bl	8007870 <__retarget_lock_release_recursive>
 80080aa:	e7dd      	b.n	8008068 <_fflush_r+0xc>

080080ac <__malloc_lock>:
 80080ac:	4801      	ldr	r0, [pc, #4]	@ (80080b4 <__malloc_lock+0x8>)
 80080ae:	f7ff bbde 	b.w	800786e <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	20025e4c 	.word	0x20025e4c

080080b8 <__malloc_unlock>:
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <__malloc_unlock+0x8>)
 80080ba:	f7ff bbd9 	b.w	8007870 <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	20025e4c 	.word	0x20025e4c

080080c4 <__sread>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	460c      	mov	r4, r1
 80080c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080cc:	f000 f978 	bl	80083c0 <_read_r>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	bfab      	itete	ge
 80080d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080d6:	89a3      	ldrhlt	r3, [r4, #12]
 80080d8:	181b      	addge	r3, r3, r0
 80080da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080de:	bfac      	ite	ge
 80080e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080e2:	81a3      	strhlt	r3, [r4, #12]
 80080e4:	bd10      	pop	{r4, pc}

080080e6 <__swrite>:
 80080e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ea:	461f      	mov	r7, r3
 80080ec:	898b      	ldrh	r3, [r1, #12]
 80080ee:	05db      	lsls	r3, r3, #23
 80080f0:	4605      	mov	r5, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	4616      	mov	r6, r2
 80080f6:	d505      	bpl.n	8008104 <__swrite+0x1e>
 80080f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fc:	2302      	movs	r3, #2
 80080fe:	2200      	movs	r2, #0
 8008100:	f000 f94c 	bl	800839c <_lseek_r>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800810a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	4628      	mov	r0, r5
 8008116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	f000 b973 	b.w	8008404 <_write_r>

0800811e <__sseek>:
 800811e:	b510      	push	{r4, lr}
 8008120:	460c      	mov	r4, r1
 8008122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008126:	f000 f939 	bl	800839c <_lseek_r>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	bf15      	itete	ne
 8008130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800813a:	81a3      	strheq	r3, [r4, #12]
 800813c:	bf18      	it	ne
 800813e:	81a3      	strhne	r3, [r4, #12]
 8008140:	bd10      	pop	{r4, pc}

08008142 <__sclose>:
 8008142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008146:	f000 b8f7 	b.w	8008338 <_close_r>

0800814a <__swbuf_r>:
 800814a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814c:	460e      	mov	r6, r1
 800814e:	4614      	mov	r4, r2
 8008150:	4605      	mov	r5, r0
 8008152:	b118      	cbz	r0, 800815c <__swbuf_r+0x12>
 8008154:	6a03      	ldr	r3, [r0, #32]
 8008156:	b90b      	cbnz	r3, 800815c <__swbuf_r+0x12>
 8008158:	f7ff facc 	bl	80076f4 <__sinit>
 800815c:	69a3      	ldr	r3, [r4, #24]
 800815e:	60a3      	str	r3, [r4, #8]
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	071a      	lsls	r2, r3, #28
 8008164:	d501      	bpl.n	800816a <__swbuf_r+0x20>
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	b943      	cbnz	r3, 800817c <__swbuf_r+0x32>
 800816a:	4621      	mov	r1, r4
 800816c:	4628      	mov	r0, r5
 800816e:	f000 f82b 	bl	80081c8 <__swsetup_r>
 8008172:	b118      	cbz	r0, 800817c <__swbuf_r+0x32>
 8008174:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008178:	4638      	mov	r0, r7
 800817a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	6922      	ldr	r2, [r4, #16]
 8008180:	1a98      	subs	r0, r3, r2
 8008182:	6963      	ldr	r3, [r4, #20]
 8008184:	b2f6      	uxtb	r6, r6
 8008186:	4283      	cmp	r3, r0
 8008188:	4637      	mov	r7, r6
 800818a:	dc05      	bgt.n	8008198 <__swbuf_r+0x4e>
 800818c:	4621      	mov	r1, r4
 800818e:	4628      	mov	r0, r5
 8008190:	f7ff ff64 	bl	800805c <_fflush_r>
 8008194:	2800      	cmp	r0, #0
 8008196:	d1ed      	bne.n	8008174 <__swbuf_r+0x2a>
 8008198:	68a3      	ldr	r3, [r4, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	60a3      	str	r3, [r4, #8]
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	701e      	strb	r6, [r3, #0]
 80081a6:	6962      	ldr	r2, [r4, #20]
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d004      	beq.n	80081b8 <__swbuf_r+0x6e>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	07db      	lsls	r3, r3, #31
 80081b2:	d5e1      	bpl.n	8008178 <__swbuf_r+0x2e>
 80081b4:	2e0a      	cmp	r6, #10
 80081b6:	d1df      	bne.n	8008178 <__swbuf_r+0x2e>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	f7ff ff4e 	bl	800805c <_fflush_r>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d0d9      	beq.n	8008178 <__swbuf_r+0x2e>
 80081c4:	e7d6      	b.n	8008174 <__swbuf_r+0x2a>
	...

080081c8 <__swsetup_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4b29      	ldr	r3, [pc, #164]	@ (8008270 <__swsetup_r+0xa8>)
 80081cc:	4605      	mov	r5, r0
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	460c      	mov	r4, r1
 80081d2:	b118      	cbz	r0, 80081dc <__swsetup_r+0x14>
 80081d4:	6a03      	ldr	r3, [r0, #32]
 80081d6:	b90b      	cbnz	r3, 80081dc <__swsetup_r+0x14>
 80081d8:	f7ff fa8c 	bl	80076f4 <__sinit>
 80081dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e0:	0719      	lsls	r1, r3, #28
 80081e2:	d422      	bmi.n	800822a <__swsetup_r+0x62>
 80081e4:	06da      	lsls	r2, r3, #27
 80081e6:	d407      	bmi.n	80081f8 <__swsetup_r+0x30>
 80081e8:	2209      	movs	r2, #9
 80081ea:	602a      	str	r2, [r5, #0]
 80081ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081f6:	e033      	b.n	8008260 <__swsetup_r+0x98>
 80081f8:	0758      	lsls	r0, r3, #29
 80081fa:	d512      	bpl.n	8008222 <__swsetup_r+0x5a>
 80081fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081fe:	b141      	cbz	r1, 8008212 <__swsetup_r+0x4a>
 8008200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008204:	4299      	cmp	r1, r3
 8008206:	d002      	beq.n	800820e <__swsetup_r+0x46>
 8008208:	4628      	mov	r0, r5
 800820a:	f000 f90d 	bl	8008428 <_free_r>
 800820e:	2300      	movs	r3, #0
 8008210:	6363      	str	r3, [r4, #52]	@ 0x34
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	2300      	movs	r3, #0
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f043 0308 	orr.w	r3, r3, #8
 8008228:	81a3      	strh	r3, [r4, #12]
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	b94b      	cbnz	r3, 8008242 <__swsetup_r+0x7a>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008238:	d003      	beq.n	8008242 <__swsetup_r+0x7a>
 800823a:	4621      	mov	r1, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f000 f83f 	bl	80082c0 <__smakebuf_r>
 8008242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008246:	f013 0201 	ands.w	r2, r3, #1
 800824a:	d00a      	beq.n	8008262 <__swsetup_r+0x9a>
 800824c:	2200      	movs	r2, #0
 800824e:	60a2      	str	r2, [r4, #8]
 8008250:	6962      	ldr	r2, [r4, #20]
 8008252:	4252      	negs	r2, r2
 8008254:	61a2      	str	r2, [r4, #24]
 8008256:	6922      	ldr	r2, [r4, #16]
 8008258:	b942      	cbnz	r2, 800826c <__swsetup_r+0xa4>
 800825a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800825e:	d1c5      	bne.n	80081ec <__swsetup_r+0x24>
 8008260:	bd38      	pop	{r3, r4, r5, pc}
 8008262:	0799      	lsls	r1, r3, #30
 8008264:	bf58      	it	pl
 8008266:	6962      	ldrpl	r2, [r4, #20]
 8008268:	60a2      	str	r2, [r4, #8]
 800826a:	e7f4      	b.n	8008256 <__swsetup_r+0x8e>
 800826c:	2000      	movs	r0, #0
 800826e:	e7f7      	b.n	8008260 <__swsetup_r+0x98>
 8008270:	20000168 	.word	0x20000168

08008274 <__swhatbuf_r>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	460c      	mov	r4, r1
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	2900      	cmp	r1, #0
 800827e:	b096      	sub	sp, #88	@ 0x58
 8008280:	4615      	mov	r5, r2
 8008282:	461e      	mov	r6, r3
 8008284:	da0d      	bge.n	80082a2 <__swhatbuf_r+0x2e>
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800828c:	f04f 0100 	mov.w	r1, #0
 8008290:	bf14      	ite	ne
 8008292:	2340      	movne	r3, #64	@ 0x40
 8008294:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008298:	2000      	movs	r0, #0
 800829a:	6031      	str	r1, [r6, #0]
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	b016      	add	sp, #88	@ 0x58
 80082a0:	bd70      	pop	{r4, r5, r6, pc}
 80082a2:	466a      	mov	r2, sp
 80082a4:	f000 f858 	bl	8008358 <_fstat_r>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	dbec      	blt.n	8008286 <__swhatbuf_r+0x12>
 80082ac:	9901      	ldr	r1, [sp, #4]
 80082ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082b6:	4259      	negs	r1, r3
 80082b8:	4159      	adcs	r1, r3
 80082ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082be:	e7eb      	b.n	8008298 <__swhatbuf_r+0x24>

080082c0 <__smakebuf_r>:
 80082c0:	898b      	ldrh	r3, [r1, #12]
 80082c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c4:	079d      	lsls	r5, r3, #30
 80082c6:	4606      	mov	r6, r0
 80082c8:	460c      	mov	r4, r1
 80082ca:	d507      	bpl.n	80082dc <__smakebuf_r+0x1c>
 80082cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	2301      	movs	r3, #1
 80082d6:	6163      	str	r3, [r4, #20]
 80082d8:	b003      	add	sp, #12
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082dc:	ab01      	add	r3, sp, #4
 80082de:	466a      	mov	r2, sp
 80082e0:	f7ff ffc8 	bl	8008274 <__swhatbuf_r>
 80082e4:	9f00      	ldr	r7, [sp, #0]
 80082e6:	4605      	mov	r5, r0
 80082e8:	4639      	mov	r1, r7
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff fc24 	bl	8007b38 <_malloc_r>
 80082f0:	b948      	cbnz	r0, 8008306 <__smakebuf_r+0x46>
 80082f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082f6:	059a      	lsls	r2, r3, #22
 80082f8:	d4ee      	bmi.n	80082d8 <__smakebuf_r+0x18>
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	f043 0302 	orr.w	r3, r3, #2
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	e7e2      	b.n	80082cc <__smakebuf_r+0xc>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	6020      	str	r0, [r4, #0]
 800830a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008316:	b15b      	cbz	r3, 8008330 <__smakebuf_r+0x70>
 8008318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800831c:	4630      	mov	r0, r6
 800831e:	f000 f82d 	bl	800837c <_isatty_r>
 8008322:	b128      	cbz	r0, 8008330 <__smakebuf_r+0x70>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	431d      	orrs	r5, r3
 8008334:	81a5      	strh	r5, [r4, #12]
 8008336:	e7cf      	b.n	80082d8 <__smakebuf_r+0x18>

08008338 <_close_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d06      	ldr	r5, [pc, #24]	@ (8008354 <_close_r+0x1c>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7fe ff6c 	bl	8007220 <_close>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_close_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_close_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	20025e58 	.word	0x20025e58

08008358 <_fstat_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d07      	ldr	r5, [pc, #28]	@ (8008378 <_fstat_r+0x20>)
 800835c:	2300      	movs	r3, #0
 800835e:	4604      	mov	r4, r0
 8008360:	4608      	mov	r0, r1
 8008362:	4611      	mov	r1, r2
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	f7fe ff9e 	bl	80072a6 <_fstat>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	d102      	bne.n	8008374 <_fstat_r+0x1c>
 800836e:	682b      	ldr	r3, [r5, #0]
 8008370:	b103      	cbz	r3, 8008374 <_fstat_r+0x1c>
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	bd38      	pop	{r3, r4, r5, pc}
 8008376:	bf00      	nop
 8008378:	20025e58 	.word	0x20025e58

0800837c <_isatty_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d06      	ldr	r5, [pc, #24]	@ (8008398 <_isatty_r+0x1c>)
 8008380:	2300      	movs	r3, #0
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	f7ff f8f0 	bl	800756c <_isatty>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_isatty_r+0x1a>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_isatty_r+0x1a>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20025e58 	.word	0x20025e58

0800839c <_lseek_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d07      	ldr	r5, [pc, #28]	@ (80083bc <_lseek_r+0x20>)
 80083a0:	4604      	mov	r4, r0
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	602a      	str	r2, [r5, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f7fe fef9 	bl	80071a2 <_lseek>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_lseek_r+0x1e>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_lseek_r+0x1e>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	20025e58 	.word	0x20025e58

080083c0 <_read_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d07      	ldr	r5, [pc, #28]	@ (80083e0 <_read_r+0x20>)
 80083c4:	4604      	mov	r4, r0
 80083c6:	4608      	mov	r0, r1
 80083c8:	4611      	mov	r1, r2
 80083ca:	2200      	movs	r2, #0
 80083cc:	602a      	str	r2, [r5, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	f7fe fe91 	bl	80070f6 <_read>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d102      	bne.n	80083de <_read_r+0x1e>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b103      	cbz	r3, 80083de <_read_r+0x1e>
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	20025e58 	.word	0x20025e58

080083e4 <_sbrk_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d06      	ldr	r5, [pc, #24]	@ (8008400 <_sbrk_r+0x1c>)
 80083e8:	2300      	movs	r3, #0
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	f7fb fa48 	bl	8003884 <_sbrk>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_sbrk_r+0x1a>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_sbrk_r+0x1a>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	20025e58 	.word	0x20025e58

08008404 <_write_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	@ (8008424 <_write_r+0x20>)
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	2200      	movs	r2, #0
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f7fe fed7 	bl	80071c6 <_write>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_write_r+0x1e>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_write_r+0x1e>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	20025e58 	.word	0x20025e58

08008428 <_free_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4605      	mov	r5, r0
 800842c:	2900      	cmp	r1, #0
 800842e:	d041      	beq.n	80084b4 <_free_r+0x8c>
 8008430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008434:	1f0c      	subs	r4, r1, #4
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfb8      	it	lt
 800843a:	18e4      	addlt	r4, r4, r3
 800843c:	f7ff fe36 	bl	80080ac <__malloc_lock>
 8008440:	4a1d      	ldr	r2, [pc, #116]	@ (80084b8 <_free_r+0x90>)
 8008442:	6813      	ldr	r3, [r2, #0]
 8008444:	b933      	cbnz	r3, 8008454 <_free_r+0x2c>
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	6014      	str	r4, [r2, #0]
 800844a:	4628      	mov	r0, r5
 800844c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008450:	f7ff be32 	b.w	80080b8 <__malloc_unlock>
 8008454:	42a3      	cmp	r3, r4
 8008456:	d908      	bls.n	800846a <_free_r+0x42>
 8008458:	6820      	ldr	r0, [r4, #0]
 800845a:	1821      	adds	r1, r4, r0
 800845c:	428b      	cmp	r3, r1
 800845e:	bf01      	itttt	eq
 8008460:	6819      	ldreq	r1, [r3, #0]
 8008462:	685b      	ldreq	r3, [r3, #4]
 8008464:	1809      	addeq	r1, r1, r0
 8008466:	6021      	streq	r1, [r4, #0]
 8008468:	e7ed      	b.n	8008446 <_free_r+0x1e>
 800846a:	461a      	mov	r2, r3
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	b10b      	cbz	r3, 8008474 <_free_r+0x4c>
 8008470:	42a3      	cmp	r3, r4
 8008472:	d9fa      	bls.n	800846a <_free_r+0x42>
 8008474:	6811      	ldr	r1, [r2, #0]
 8008476:	1850      	adds	r0, r2, r1
 8008478:	42a0      	cmp	r0, r4
 800847a:	d10b      	bne.n	8008494 <_free_r+0x6c>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	4401      	add	r1, r0
 8008480:	1850      	adds	r0, r2, r1
 8008482:	4283      	cmp	r3, r0
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	d1e0      	bne.n	800844a <_free_r+0x22>
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	6053      	str	r3, [r2, #4]
 800848e:	4408      	add	r0, r1
 8008490:	6010      	str	r0, [r2, #0]
 8008492:	e7da      	b.n	800844a <_free_r+0x22>
 8008494:	d902      	bls.n	800849c <_free_r+0x74>
 8008496:	230c      	movs	r3, #12
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	e7d6      	b.n	800844a <_free_r+0x22>
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	1821      	adds	r1, r4, r0
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf04      	itt	eq
 80084a4:	6819      	ldreq	r1, [r3, #0]
 80084a6:	685b      	ldreq	r3, [r3, #4]
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	bf04      	itt	eq
 80084ac:	1809      	addeq	r1, r1, r0
 80084ae:	6021      	streq	r1, [r4, #0]
 80084b0:	6054      	str	r4, [r2, #4]
 80084b2:	e7ca      	b.n	800844a <_free_r+0x22>
 80084b4:	bd38      	pop	{r3, r4, r5, pc}
 80084b6:	bf00      	nop
 80084b8:	20025e54 	.word	0x20025e54

080084bc <_init>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr

080084c8 <_fini>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	bf00      	nop
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr
